{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger as Logger, Credentials, StorageHelper, Hub, parseAWSExports } from '@aws-amplify/core';\nimport { GetObjectCommand, DeleteObjectCommand, ListObjectsV2Command, CopyObjectCommand, HeadObjectCommand } from '@aws-sdk/client-s3';\nimport { formatUrl } from '@aws-sdk/util-format-url';\nimport { createRequest } from '@aws-sdk/util-create-request';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { SEND_DOWNLOAD_PROGRESS_EVENT, SEND_UPLOAD_PROGRESS_EVENT } from './axios-http-handler';\nimport { StorageErrorStrings } from '../common/StorageErrorStrings';\nimport { dispatchStorageEvent } from '../common/StorageUtils';\nimport { createPrefixMiddleware, prefixMiddlewareOptions, getPrefix, autoAdjustClockskewMiddleware, autoAdjustClockskewMiddlewareOptions, createS3Client } from '../common/S3ClientUtils';\nimport { AWSS3ProviderManagedUpload } from './AWSS3ProviderManagedUpload';\nimport { AWSS3UploadTask, TaskEvents } from './AWSS3UploadTask';\nimport { UPLOADS_STORAGE_KEY } from '../common/StorageConstants';\nimport * as events from 'events';\nvar logger = new Logger('AWSS3Provider');\nvar DEFAULT_STORAGE_LEVEL = 'public';\nvar DEFAULT_PRESIGN_EXPIRATION = 900;\n/**\n * Provide storage methods to use AWS S3\n */\nvar AWSS3Provider = /** @class */function () {\n  /**\n   * Initialize Storage with AWS configurations\n   * @param {Object} config - Configuration object for storage\n   */\n  function AWSS3Provider(config) {\n    var _this = this;\n    this._config = config ? config : {};\n    this._storage = new StorageHelper().getStorage();\n    Hub.listen('auth', function (data) {\n      var payload = data.payload;\n      if (payload.event === 'signOut' || payload.event === 'signIn') {\n        _this._storage.removeItem(UPLOADS_STORAGE_KEY);\n      }\n    });\n    logger.debug('Storage Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   */\n  AWSS3Provider.prototype.getCategory = function () {\n    return AWSS3Provider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AWSS3Provider.prototype.getProviderName = function () {\n    return AWSS3Provider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Storage part with aws configuration\n   * @param {Object} config - Configuration of the Storage\n   * @return {Object} - Current configuration\n   */\n  AWSS3Provider.prototype.configure = function (config) {\n    logger.debug('configure Storage', config);\n    if (!config) return this._config;\n    var amplifyConfig = parseAWSExports(config);\n    this._config = Object.assign({}, this._config, amplifyConfig.Storage);\n    if (!this._config.bucket) {\n      logger.debug('Do not have bucket yet');\n    }\n    return this._config;\n  };\n  AWSS3Provider.prototype.startResumableUpload = function (addTaskInput, config) {\n    var s3Client = addTaskInput.s3Client,\n      emitter = addTaskInput.emitter,\n      key = addTaskInput.key,\n      file = addTaskInput.file,\n      params = addTaskInput.params;\n    var progressCallback = config.progressCallback,\n      completeCallback = config.completeCallback,\n      errorCallback = config.errorCallback,\n      _a = config.track,\n      track = _a === void 0 ? false : _a;\n    if (!(file instanceof Blob)) {\n      throw new Error(StorageErrorStrings.INVALID_BLOB);\n    }\n    emitter.on(TaskEvents.UPLOAD_PROGRESS, function (event) {\n      if (progressCallback) {\n        if (typeof progressCallback === 'function') {\n          progressCallback(event);\n        } else {\n          logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n        }\n      }\n    });\n    emitter.on(TaskEvents.UPLOAD_COMPLETE, function (event) {\n      if (completeCallback) {\n        if (typeof completeCallback === 'function') {\n          completeCallback(event);\n        } else {\n          logger.warn('completeCallback should be a function, not a ' + typeof completeCallback);\n        }\n      }\n    });\n    emitter.on(TaskEvents.ERROR, function (err) {\n      if (errorCallback) {\n        if (typeof errorCallback === 'function') {\n          errorCallback(err);\n        } else {\n          logger.warn('errorCallback should be a function, not a ' + typeof errorCallback);\n        }\n      }\n    });\n    // we want to keep this function sync so we defer this promise to AWSS3UploadTask to resolve when it's needed\n    // when its doing a final check with _listSingleFile function\n    var prefixPromise = Credentials.get().then(function (credentials) {\n      var cred = Credentials.shear(credentials);\n      return getPrefix(__assign(__assign({}, config), {\n        credentials: cred\n      }));\n    });\n    var task = new AWSS3UploadTask({\n      s3Client: s3Client,\n      file: file,\n      emitter: emitter,\n      level: config.level,\n      storage: this._storage,\n      params: params,\n      prefixPromise: prefixPromise\n    });\n    dispatchStorageEvent(track, 'upload', {\n      method: 'put',\n      result: 'success'\n    }, null, \"Upload Task created successfully for \" + key);\n    // automatically start the upload task\n    task.resume();\n    return task;\n  };\n  /**\n   * Copy an object from a source object to a new object within the same bucket. Can optionally copy files across\n   * different level or identityId (if source object's level is 'protected').\n   *\n   * @async\n   * @param {S3CopySource} src - Key and optionally access level and identityId of the source object.\n   * @param {S3CopyDestination} dest - Key and optionally access level of the destination object.\n   * @param {S3ProviderCopyConfig} [config] - Optional configuration for s3 commands.\n   * @return {Promise<S3ProviderCopyOutput>} The key of the copied object.\n   */\n  AWSS3Provider.prototype.copy = function (src, dest, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, acl, bucket, cacheControl, expires, track, serverSideEncryption, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, SSEKMSKeyId, _a, srcLevel, srcIdentityId, srcKey, _b, destLevel, destKey, srcPrefix, destPrefix, finalSrcKey, finalDestKey, params, s3, error_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _c.sent();\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n            opt = Object.assign({}, this._config, config);\n            acl = opt.acl, bucket = opt.bucket, cacheControl = opt.cacheControl, expires = opt.expires, track = opt.track, serverSideEncryption = opt.serverSideEncryption, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, SSEKMSKeyId = opt.SSEKMSKeyId;\n            _a = src.level, srcLevel = _a === void 0 ? DEFAULT_STORAGE_LEVEL : _a, srcIdentityId = src.identityId, srcKey = src.key;\n            _b = dest.level, destLevel = _b === void 0 ? DEFAULT_STORAGE_LEVEL : _b, destKey = dest.key;\n            if (!srcKey || typeof srcKey !== 'string') {\n              throw new Error(StorageErrorStrings.NO_SRC_KEY);\n            }\n            if (!destKey || typeof destKey !== 'string') {\n              throw new Error(StorageErrorStrings.NO_DEST_KEY);\n            }\n            if (srcLevel !== 'protected' && srcIdentityId) {\n              logger.warn(\"You may copy files from another user if the source level is \\\"protected\\\", currently it's \" + srcLevel);\n            }\n            srcPrefix = this._prefix(__assign(__assign(__assign({}, opt), {\n              level: srcLevel\n            }), srcIdentityId && {\n              identityId: srcIdentityId\n            }));\n            destPrefix = this._prefix(__assign(__assign({}, opt), {\n              level: destLevel\n            }));\n            finalSrcKey = bucket + \"/\" + srcPrefix + srcKey;\n            finalDestKey = \"\" + destPrefix + destKey;\n            logger.debug(\"copying \" + finalSrcKey + \" to \" + finalDestKey);\n            params = {\n              Bucket: bucket,\n              CopySource: finalSrcKey,\n              Key: finalDestKey,\n              // Copies over metadata like contentType as well\n              MetadataDirective: 'COPY'\n            };\n            if (cacheControl) params.CacheControl = cacheControl;\n            if (expires) params.Expires = expires;\n            if (serverSideEncryption) {\n              params.ServerSideEncryption = serverSideEncryption;\n            }\n            if (SSECustomerAlgorithm) {\n              params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n            }\n            if (SSECustomerKey) {\n              params.SSECustomerKey = SSECustomerKey;\n            }\n            if (SSECustomerKeyMD5) {\n              params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n            }\n            if (SSEKMSKeyId) {\n              params.SSEKMSKeyId = SSEKMSKeyId;\n            }\n            if (acl) params.ACL = acl;\n            s3 = this._createNewS3Client(opt);\n            _c.label = 2;\n          case 2:\n            _c.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, s3.send(new CopyObjectCommand(params))];\n          case 3:\n            _c.sent();\n            dispatchStorageEvent(track, 'copy', {\n              method: 'copy',\n              result: 'success'\n            }, null, \"Copy success from \" + srcKey + \" to \" + destKey);\n            return [2 /*return*/, {\n              key: destKey\n            }];\n          case 4:\n            error_1 = _c.sent();\n            dispatchStorageEvent(track, 'copy', {\n              method: 'copy',\n              result: 'failed'\n            }, null, \"Copy failed from \" + srcKey + \" to \" + destKey);\n            throw error_1;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3Provider.prototype.get = function (key, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, download, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, expires, track, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, progressCallback, _a, validateObjectExistence, prefix, final_key, emitter, s3, params, getObjectCommand, response, error_2, headObjectCommand, error_3, signer, request, url, _b, error_4;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _c.sent();\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, download = opt.download, cacheControl = opt.cacheControl, contentDisposition = opt.contentDisposition, contentEncoding = opt.contentEncoding, contentLanguage = opt.contentLanguage, contentType = opt.contentType, expires = opt.expires, track = opt.track, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, progressCallback = opt.progressCallback, _a = opt.validateObjectExistence, validateObjectExistence = _a === void 0 ? false : _a;\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            emitter = new events.EventEmitter();\n            s3 = this._createNewS3Client(opt, emitter);\n            logger.debug('get ' + key + ' from ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            };\n            // See: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property\n            if (cacheControl) params.ResponseCacheControl = cacheControl;\n            if (contentDisposition) params.ResponseContentDisposition = contentDisposition;\n            if (contentEncoding) params.ResponseContentEncoding = contentEncoding;\n            if (contentLanguage) params.ResponseContentLanguage = contentLanguage;\n            if (contentType) params.ResponseContentType = contentType;\n            if (SSECustomerAlgorithm) {\n              params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n            }\n            if (SSECustomerKey) {\n              params.SSECustomerKey = SSECustomerKey;\n            }\n            if (SSECustomerKeyMD5) {\n              params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n            }\n            if (!(download === true)) return [3 /*break*/, 5];\n            getObjectCommand = new GetObjectCommand(params);\n            _c.label = 2;\n          case 2:\n            _c.trys.push([2, 4,, 5]);\n            if (progressCallback) {\n              if (typeof progressCallback === 'function') {\n                emitter.on(SEND_DOWNLOAD_PROGRESS_EVENT, function (progress) {\n                  progressCallback(progress);\n                });\n              } else {\n                logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n              }\n            }\n            return [4 /*yield*/, s3.send(getObjectCommand)];\n          case 3:\n            response = _c.sent();\n            emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n            dispatchStorageEvent(track, 'download', {\n              method: 'get',\n              result: 'success'\n            }, {\n              fileSize: Number(response.Body['size'] || response.Body['length'])\n            }, \"Download success for \" + key);\n            return [2 /*return*/, response];\n          case 4:\n            error_2 = _c.sent();\n            dispatchStorageEvent(track, 'download', {\n              method: 'get',\n              result: 'failed'\n            }, null, \"Download failed with \" + error_2.message);\n            throw error_2;\n          case 5:\n            if (!validateObjectExistence) return [3 /*break*/, 9];\n            headObjectCommand = new HeadObjectCommand(params);\n            _c.label = 6;\n          case 6:\n            _c.trys.push([6, 8,, 9]);\n            return [4 /*yield*/, s3.send(headObjectCommand)];\n          case 7:\n            _c.sent();\n            return [3 /*break*/, 9];\n          case 8:\n            error_3 = _c.sent();\n            if (error_3.$metadata.httpStatusCode === 404) {\n              dispatchStorageEvent(track, 'getSignedUrl', {\n                method: 'get',\n                result: 'failed'\n              }, null, key + \" not found\");\n            }\n            throw error_3;\n          case 9:\n            _c.trys.push([9, 12,, 13]);\n            signer = new S3RequestPresigner(__assign({}, s3.config));\n            return [4 /*yield*/, createRequest(s3, new GetObjectCommand(params))];\n          case 10:\n            request = _c.sent();\n            _b = formatUrl;\n            return [4 /*yield*/, signer.presign(request, {\n              expiresIn: expires || DEFAULT_PRESIGN_EXPIRATION\n            })];\n          case 11:\n            url = _b.apply(void 0, [_c.sent()]);\n            dispatchStorageEvent(track, 'getSignedUrl', {\n              method: 'get',\n              result: 'success'\n            }, null, \"Signed URL: \" + url);\n            return [2 /*return*/, url];\n          case 12:\n            error_4 = _c.sent();\n            logger.warn('get signed url error', error_4);\n            dispatchStorageEvent(track, 'getSignedUrl', {\n              method: 'get',\n              result: 'failed'\n            }, null, \"Could not get a signed URL for \" + key);\n            throw error_4;\n          case 13:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Put a file in S3 bucket specified to configure method\n   * @param key - key of the object\n   * @param object - File to be put in Amazon S3 bucket\n   * @param [config] - Optional configuration for the underlying S3 command\n   * @return an instance of AWSS3UploadTask or a promise that resolves to an object with the new object's key on\n   * success.\n   */\n  AWSS3Provider.prototype.put = function (key, object, config) {\n    var opt = Object.assign({}, this._config, config);\n    var bucket = opt.bucket,\n      track = opt.track,\n      progressCallback = opt.progressCallback,\n      level = opt.level,\n      resumable = opt.resumable;\n    var contentType = opt.contentType,\n      contentDisposition = opt.contentDisposition,\n      contentEncoding = opt.contentEncoding,\n      cacheControl = opt.cacheControl,\n      expires = opt.expires,\n      metadata = opt.metadata,\n      tagging = opt.tagging,\n      acl = opt.acl;\n    var serverSideEncryption = opt.serverSideEncryption,\n      SSECustomerAlgorithm = opt.SSECustomerAlgorithm,\n      SSECustomerKey = opt.SSECustomerKey,\n      SSECustomerKeyMD5 = opt.SSECustomerKeyMD5,\n      SSEKMSKeyId = opt.SSEKMSKeyId;\n    var type = contentType ? contentType : 'binary/octet-stream';\n    var params = {\n      Bucket: bucket,\n      Key: key,\n      Body: object,\n      ContentType: type\n    };\n    if (cacheControl) {\n      params.CacheControl = cacheControl;\n    }\n    if (contentDisposition) {\n      params.ContentDisposition = contentDisposition;\n    }\n    if (contentEncoding) {\n      params.ContentEncoding = contentEncoding;\n    }\n    if (expires) {\n      params.Expires = expires;\n    }\n    if (metadata) {\n      params.Metadata = metadata;\n    }\n    if (tagging) {\n      params.Tagging = tagging;\n    }\n    if (serverSideEncryption) {\n      params.ServerSideEncryption = serverSideEncryption;\n    }\n    if (SSECustomerAlgorithm) {\n      params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n    }\n    if (SSECustomerKey) {\n      params.SSECustomerKey = SSECustomerKey;\n    }\n    if (SSECustomerKeyMD5) {\n      params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n    }\n    if (SSEKMSKeyId) {\n      params.SSEKMSKeyId = SSEKMSKeyId;\n    }\n    var emitter = new events.EventEmitter();\n    var uploader = new AWSS3ProviderManagedUpload(params, opt, emitter);\n    if (acl) {\n      params.ACL = acl;\n    }\n    if (resumable === true) {\n      var s3Client = this._createNewS3Client(opt);\n      // we are using aws sdk middleware to inject the prefix to key, this way we don't have to call\n      // this._ensureCredentials() which allows us to make this function sync so we can return non-Promise like UploadTask\n      s3Client.middlewareStack.add(createPrefixMiddleware(opt, key), prefixMiddlewareOptions);\n      var addTaskInput = {\n        bucket: bucket,\n        key: key,\n        s3Client: s3Client,\n        file: object,\n        emitter: emitter,\n        accessLevel: level,\n        params: params\n      };\n      // explicitly asserting the type here as Typescript could not infer that resumable is of type true\n      return this.startResumableUpload(addTaskInput, config);\n    }\n    try {\n      if (progressCallback) {\n        if (typeof progressCallback === 'function') {\n          emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n            progressCallback(progress);\n          });\n        } else {\n          logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n        }\n      }\n      return uploader.upload().then(function (response) {\n        logger.debug('upload result', response);\n        dispatchStorageEvent(track, 'upload', {\n          method: 'put',\n          result: 'success'\n        }, null, \"Upload success for \" + key);\n        return {\n          key: key\n        };\n      });\n    } catch (error) {\n      logger.warn('error uploading', error);\n      dispatchStorageEvent(track, 'upload', {\n        method: 'put',\n        result: 'failed'\n      }, null, \"Error uploading \" + key);\n      throw error;\n    }\n  };\n  /**\n   * Remove the object for specified key\n   * @param {string} key - key of the object\n   * @param {S3ProviderRemoveConfig} [config] - Optional configuration for the underlying S3 command\n   * @return {Promise<S3ProviderRemoveOutput>} - Promise resolves upon successful removal of the object\n   */\n  AWSS3Provider.prototype.remove = function (key, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, prefix, final_key, s3, params, deleteObjectCommand, response, error_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track;\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            s3 = this._createNewS3Client(opt);\n            logger.debug('remove ' + key + ' from ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            };\n            deleteObjectCommand = new DeleteObjectCommand(params);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, s3.send(deleteObjectCommand)];\n          case 3:\n            response = _a.sent();\n            dispatchStorageEvent(track, 'delete', {\n              method: 'remove',\n              result: 'success'\n            }, null, \"Deleted \" + key + \" successfully\");\n            return [2 /*return*/, response];\n          case 4:\n            error_5 = _a.sent();\n            dispatchStorageEvent(track, 'delete', {\n              method: 'remove',\n              result: 'failed'\n            }, null, \"Deletion of \" + key + \" failed with \" + error_5);\n            throw error_5;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3Provider.prototype._list = function (params, opt, prefix) {\n    return __awaiter(this, void 0, void 0, function () {\n      var list, s3, listObjectsV2Command, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            list = {\n              results: [],\n              hasNextToken: false\n            };\n            s3 = this._createNewS3Client(opt);\n            listObjectsV2Command = new ListObjectsV2Command(__assign({}, params));\n            return [4 /*yield*/, s3.send(listObjectsV2Command)];\n          case 1:\n            response = _a.sent();\n            if (response && response.Contents) {\n              list.results = response.Contents.map(function (item) {\n                return {\n                  key: item.Key.substr(prefix.length),\n                  eTag: item.ETag,\n                  lastModified: item.LastModified,\n                  size: item.Size\n                };\n              });\n              list.nextToken = response.NextContinuationToken;\n              list.hasNextToken = response.IsTruncated;\n            }\n            return [2 /*return*/, list];\n        }\n      });\n    });\n  };\n  /**\n   * List bucket objects relative to the level and prefix specified\n   * @param {string} path - the path that contains objects\n   * @param {S3ProviderListConfig} [config] - Optional configuration for the underlying S3 command\n   * @return {Promise<S3ProviderListOutput>} - Promise resolves to list of keys, eTags, lastModified\n   * and file size for all objects in path\n   */\n  AWSS3Provider.prototype.list = function (path, config) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, pageSize, nextToken, prefix, final_path, list, MAX_PAGE_SIZE, listResult, params, error_6;\n      var _b, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _d.sent();\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track, pageSize = opt.pageSize, nextToken = opt.nextToken;\n            prefix = this._prefix(opt);\n            final_path = prefix + path;\n            logger.debug('list ' + path + ' from ' + final_path);\n            _d.label = 2;\n          case 2:\n            _d.trys.push([2, 10,, 11]);\n            list = {\n              results: [],\n              hasNextToken: false\n            };\n            MAX_PAGE_SIZE = 1000;\n            listResult = void 0;\n            params = {\n              Bucket: bucket,\n              Prefix: final_path,\n              MaxKeys: MAX_PAGE_SIZE,\n              ContinuationToken: nextToken\n            };\n            params.ContinuationToken = nextToken;\n            if (!(pageSize === 'ALL')) return [3 /*break*/, 7];\n            _d.label = 3;\n          case 3:\n            return [4 /*yield*/, this._list(params, opt, prefix)];\n          case 4:\n            listResult = _d.sent();\n            (_b = list.results).push.apply(_b, __spread(listResult.results));\n            if (listResult.nextToken) params.ContinuationToken = listResult.nextToken;\n            _d.label = 5;\n          case 5:\n            if (listResult.nextToken) return [3 /*break*/, 3];\n            _d.label = 6;\n          case 6:\n            return [3 /*break*/, 9];\n          case 7:\n            if (pageSize && pageSize <= MAX_PAGE_SIZE && typeof pageSize === 'number') params.MaxKeys = pageSize;else logger.warn(\"pageSize should be from 0 - \" + MAX_PAGE_SIZE + \".\");\n            return [4 /*yield*/, this._list(params, opt, prefix)];\n          case 8:\n            listResult = _d.sent();\n            (_c = list.results).push.apply(_c, __spread(listResult.results));\n            list.hasNextToken = listResult.hasNextToken;\n            list.nextToken = (_a = null) !== null && _a !== void 0 ? _a : listResult.nextToken;\n            _d.label = 9;\n          case 9:\n            dispatchStorageEvent(track, 'list', {\n              method: 'list',\n              result: 'success'\n            }, null, list.results.length + \" items returned from list operation\");\n            logger.debug('list', list);\n            return [2 /*return*/, list];\n          case 10:\n            error_6 = _d.sent();\n            logger.error('list InvalidArgument', error_6);\n            dispatchStorageEvent(track, 'list', {\n              method: 'list',\n              result: 'failed'\n            }, null, \"Listing items failed: \" + error_6.message);\n            throw error_6;\n          case 11:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3Provider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, cred, error_7;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2 /*return*/, false];\n            cred = Credentials.shear(credentials);\n            logger.debug('set credentials for storage', cred);\n            this._config.credentials = cred;\n            return [2 /*return*/, true];\n          case 2:\n            error_7 = _a.sent();\n            logger.warn('ensure credentials error', error_7);\n            return [2 /*return*/, false];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3Provider.prototype._isWithCredentials = function (config) {\n    return typeof config === 'object' && config.hasOwnProperty('credentials');\n  };\n  AWSS3Provider.prototype._prefix = function (config) {\n    var credentials = config.credentials,\n      level = config.level;\n    var customPrefix = config.customPrefix || {};\n    var identityId = config.identityId || credentials.identityId;\n    var privatePath = (customPrefix.private !== undefined ? customPrefix.private : 'private/') + identityId + '/';\n    var protectedPath = (customPrefix.protected !== undefined ? customPrefix.protected : 'protected/') + identityId + '/';\n    var publicPath = customPrefix.public !== undefined ? customPrefix.public : 'public/';\n    switch (level) {\n      case 'private':\n        return privatePath;\n      case 'protected':\n        return protectedPath;\n      default:\n        return publicPath;\n    }\n  };\n  /**\n   * Creates an S3 client with new V3 aws sdk\n   */\n  AWSS3Provider.prototype._createNewS3Client = function (config, emitter) {\n    var s3client = createS3Client(config, emitter);\n    s3client.middlewareStack.add(autoAdjustClockskewMiddleware(s3client.config), autoAdjustClockskewMiddlewareOptions);\n    return s3client;\n  };\n  AWSS3Provider.CATEGORY = 'Storage';\n  AWSS3Provider.PROVIDER_NAME = 'AWSS3';\n  return AWSS3Provider;\n}();\nexport { AWSS3Provider };","map":{"version":3,"names":["ConsoleLogger","Logger","Credentials","StorageHelper","Hub","parseAWSExports","GetObjectCommand","DeleteObjectCommand","ListObjectsV2Command","CopyObjectCommand","HeadObjectCommand","formatUrl","createRequest","S3RequestPresigner","SEND_DOWNLOAD_PROGRESS_EVENT","SEND_UPLOAD_PROGRESS_EVENT","StorageErrorStrings","dispatchStorageEvent","createPrefixMiddleware","prefixMiddlewareOptions","getPrefix","autoAdjustClockskewMiddleware","autoAdjustClockskewMiddlewareOptions","createS3Client","AWSS3ProviderManagedUpload","AWSS3UploadTask","TaskEvents","UPLOADS_STORAGE_KEY","events","logger","DEFAULT_STORAGE_LEVEL","DEFAULT_PRESIGN_EXPIRATION","AWSS3Provider","config","_this","_config","_storage","getStorage","listen","data","payload","event","removeItem","debug","prototype","getCategory","CATEGORY","getProviderName","PROVIDER_NAME","configure","amplifyConfig","Object","assign","Storage","bucket","startResumableUpload","addTaskInput","s3Client","emitter","key","file","params","progressCallback","completeCallback","errorCallback","_a","track","Blob","Error","INVALID_BLOB","on","UPLOAD_PROGRESS","warn","UPLOAD_COMPLETE","ERROR","err","prefixPromise","get","then","credentials","cred","shear","__assign","task","level","storage","method","result","resume","copy","src","dest","_ensureCredentials","credentialsOK","_c","sent","_isWithCredentials","NO_CREDENTIALS","opt","acl","cacheControl","expires","serverSideEncryption","SSECustomerAlgorithm","SSECustomerKey","SSECustomerKeyMD5","SSEKMSKeyId","srcLevel","srcIdentityId","identityId","srcKey","_b","destLevel","destKey","NO_SRC_KEY","NO_DEST_KEY","srcPrefix","_prefix","destPrefix","finalSrcKey","finalDestKey","Bucket","CopySource","Key","MetadataDirective","CacheControl","Expires","ServerSideEncryption","ACL","s3","_createNewS3Client","send","error_1","download","contentDisposition","contentEncoding","contentLanguage","contentType","validateObjectExistence","prefix","final_key","EventEmitter","ResponseCacheControl","ResponseContentDisposition","ResponseContentEncoding","ResponseContentLanguage","ResponseContentType","getObjectCommand","progress","response","removeAllListeners","fileSize","Number","Body","error_2","message","headObjectCommand","error_3","$metadata","httpStatusCode","signer","request","presign","expiresIn","url","apply","error_4","put","object","resumable","metadata","tagging","type","ContentType","ContentDisposition","ContentEncoding","Metadata","Tagging","uploader","middlewareStack","add","accessLevel","upload","error","remove","deleteObjectCommand","error_5","_list","list","results","hasNextToken","listObjectsV2Command","Contents","map","item","substr","length","eTag","ETag","lastModified","LastModified","size","Size","nextToken","NextContinuationToken","IsTruncated","path","_d","pageSize","final_path","MAX_PAGE_SIZE","listResult","Prefix","MaxKeys","ContinuationToken","push","__spread","error_6","error_7","hasOwnProperty","customPrefix","privatePath","private","undefined","protectedPath","protected","publicPath","public","s3client"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\storage\\src\\providers\\AWSS3Provider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tICredentials,\n\tStorageHelper,\n\tHub,\n\tparseAWSExports,\n} from '@aws-amplify/core';\nimport {\n\tS3Client,\n\tGetObjectCommand,\n\tDeleteObjectCommand,\n\tListObjectsV2Command,\n\tGetObjectCommandOutput,\n\tDeleteObjectCommandInput,\n\tCopyObjectCommandInput,\n\tCopyObjectCommand,\n\tPutObjectCommandInput,\n\tGetObjectCommandInput,\n\tListObjectsV2Request,\n\tHeadObjectCommand,\n} from '@aws-sdk/client-s3';\nimport { formatUrl } from '@aws-sdk/util-format-url';\nimport { createRequest } from '@aws-sdk/util-create-request';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport {\n\tSEND_DOWNLOAD_PROGRESS_EVENT,\n\tSEND_UPLOAD_PROGRESS_EVENT,\n} from './axios-http-handler';\nimport {\n\tStorageOptions,\n\tStorageProvider,\n\tS3ProviderGetConfig,\n\tS3ProviderGetOuput,\n\tS3ProviderPutConfig,\n\tS3ProviderRemoveConfig,\n\tS3ProviderListConfig,\n\tS3ProviderCopyConfig,\n\tS3ProviderCopyOutput,\n\tS3CopySource,\n\tS3CopyDestination,\n\tStorageAccessLevel,\n\tCustomPrefix,\n\tS3ProviderRemoveOutput,\n\tS3ProviderPutOutput,\n\tResumableUploadConfig,\n\tUploadTask,\n\tS3ClientOptions,\n\tS3ProviderListOutput,\n} from '../types';\nimport { StorageErrorStrings } from '../common/StorageErrorStrings';\nimport { dispatchStorageEvent } from '../common/StorageUtils';\nimport {\n\tcreatePrefixMiddleware,\n\tprefixMiddlewareOptions,\n\tgetPrefix,\n\tautoAdjustClockskewMiddleware,\n\tautoAdjustClockskewMiddlewareOptions,\n\tcreateS3Client,\n} from '../common/S3ClientUtils';\nimport { AWSS3ProviderManagedUpload } from './AWSS3ProviderManagedUpload';\nimport { AWSS3UploadTask, TaskEvents } from './AWSS3UploadTask';\nimport { UPLOADS_STORAGE_KEY } from '../common/StorageConstants';\nimport * as events from 'events';\nimport { CancelTokenSource } from 'axios';\n\nconst logger = new Logger('AWSS3Provider');\n\nconst DEFAULT_STORAGE_LEVEL = 'public';\nconst DEFAULT_PRESIGN_EXPIRATION = 900;\n\ninterface AddTaskInput {\n\taccessLevel: StorageAccessLevel;\n\tfile: Blob;\n\tbucket: string;\n\temitter: events.EventEmitter;\n\tkey: string;\n\ts3Client: S3Client;\n\tparams?: PutObjectCommandInput;\n}\n\n/**\n * Provide storage methods to use AWS S3\n */\nexport class AWSS3Provider implements StorageProvider {\n\tstatic readonly CATEGORY = 'Storage';\n\tstatic readonly PROVIDER_NAME = 'AWSS3';\n\tprivate _config: StorageOptions;\n\tprivate _storage: Storage;\n\n\t/**\n\t * Initialize Storage with AWS configurations\n\t * @param {Object} config - Configuration object for storage\n\t */\n\tconstructor(config?: StorageOptions) {\n\t\tthis._config = config ? config : {};\n\t\tthis._storage = new StorageHelper().getStorage();\n\t\tHub.listen('auth', data => {\n\t\t\tconst { payload } = data;\n\t\t\tif (payload.event === 'signOut' || payload.event === 'signIn') {\n\t\t\t\tthis._storage.removeItem(UPLOADS_STORAGE_KEY);\n\t\t\t}\n\t\t});\n\t\tlogger.debug('Storage Options', this._config);\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tpublic getCategory(): string {\n\t\treturn AWSS3Provider.CATEGORY;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tgetProviderName(): 'AWSS3' {\n\t\treturn AWSS3Provider.PROVIDER_NAME;\n\t}\n\n\t/**\n\t * Configure Storage part with aws configuration\n\t * @param {Object} config - Configuration of the Storage\n\t * @return {Object} - Current configuration\n\t */\n\tpublic configure(config?): object {\n\t\tlogger.debug('configure Storage', config);\n\t\tif (!config) return this._config;\n\t\tconst amplifyConfig = parseAWSExports(config);\n\t\tthis._config = Object.assign({}, this._config, amplifyConfig.Storage);\n\t\tif (!this._config.bucket) {\n\t\t\tlogger.debug('Do not have bucket yet');\n\t\t}\n\t\treturn this._config;\n\t}\n\n\tprivate startResumableUpload(\n\t\taddTaskInput: AddTaskInput,\n\t\tconfig: S3ProviderPutConfig & ResumableUploadConfig\n\t): UploadTask {\n\t\tconst { s3Client, emitter, key, file, params } = addTaskInput;\n\t\tconst {\n\t\t\tprogressCallback,\n\t\t\tcompleteCallback,\n\t\t\terrorCallback,\n\t\t\ttrack = false,\n\t\t} = config;\n\t\tif (!(file instanceof Blob)) {\n\t\t\tthrow new Error(StorageErrorStrings.INVALID_BLOB);\n\t\t}\n\n\t\temitter.on(TaskEvents.UPLOAD_PROGRESS, event => {\n\t\t\tif (progressCallback) {\n\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\tprogressCallback(event);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\temitter.on(TaskEvents.UPLOAD_COMPLETE, event => {\n\t\t\tif (completeCallback) {\n\t\t\t\tif (typeof completeCallback === 'function') {\n\t\t\t\t\tcompleteCallback(event);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'completeCallback should be a function, not a ' +\n\t\t\t\t\t\t\ttypeof completeCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\temitter.on(TaskEvents.ERROR, err => {\n\t\t\tif (errorCallback) {\n\t\t\t\tif (typeof errorCallback === 'function') {\n\t\t\t\t\terrorCallback(err);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'errorCallback should be a function, not a ' + typeof errorCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// we want to keep this function sync so we defer this promise to AWSS3UploadTask to resolve when it's needed\n\t\t// when its doing a final check with _listSingleFile function\n\t\tconst prefixPromise: Promise<string> = Credentials.get().then(\n\t\t\t(credentials: any) => {\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\treturn getPrefix({\n\t\t\t\t\t...config,\n\t\t\t\t\tcredentials: cred,\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\n\t\tconst task = new AWSS3UploadTask({\n\t\t\ts3Client,\n\t\t\tfile,\n\t\t\temitter,\n\t\t\tlevel: config.level,\n\t\t\tstorage: this._storage,\n\t\t\tparams,\n\t\t\tprefixPromise,\n\t\t});\n\n\t\tdispatchStorageEvent(\n\t\t\ttrack,\n\t\t\t'upload',\n\t\t\t{ method: 'put', result: 'success' },\n\t\t\tnull,\n\t\t\t`Upload Task created successfully for ${key}`\n\t\t);\n\n\t\t// automatically start the upload task\n\t\ttask.resume();\n\n\t\treturn task;\n\t}\n\n\t/**\n\t * Copy an object from a source object to a new object within the same bucket. Can optionally copy files across\n\t * different level or identityId (if source object's level is 'protected').\n\t *\n\t * @async\n\t * @param {S3CopySource} src - Key and optionally access level and identityId of the source object.\n\t * @param {S3CopyDestination} dest - Key and optionally access level of the destination object.\n\t * @param {S3ProviderCopyConfig} [config] - Optional configuration for s3 commands.\n\t * @return {Promise<S3ProviderCopyOutput>} The key of the copied object.\n\t */\n\tpublic async copy(\n\t\tsrc: S3CopySource,\n\t\tdest: S3CopyDestination,\n\t\tconfig?: S3ProviderCopyConfig\n\t): Promise<S3ProviderCopyOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst {\n\t\t\tacl,\n\t\t\tbucket,\n\t\t\tcacheControl,\n\t\t\texpires,\n\t\t\ttrack,\n\t\t\tserverSideEncryption,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tSSEKMSKeyId,\n\t\t} = opt;\n\t\tconst {\n\t\t\tlevel: srcLevel = DEFAULT_STORAGE_LEVEL,\n\t\t\tidentityId: srcIdentityId,\n\t\t\tkey: srcKey,\n\t\t} = src;\n\t\tconst { level: destLevel = DEFAULT_STORAGE_LEVEL, key: destKey } = dest;\n\t\tif (!srcKey || typeof srcKey !== 'string') {\n\t\t\tthrow new Error(StorageErrorStrings.NO_SRC_KEY);\n\t\t}\n\t\tif (!destKey || typeof destKey !== 'string') {\n\t\t\tthrow new Error(StorageErrorStrings.NO_DEST_KEY);\n\t\t}\n\t\tif (srcLevel !== 'protected' && srcIdentityId) {\n\t\t\tlogger.warn(\n\t\t\t\t`You may copy files from another user if the source level is \"protected\", currently it's ${srcLevel}`\n\t\t\t);\n\t\t}\n\t\tconst srcPrefix = this._prefix({\n\t\t\t...opt,\n\t\t\tlevel: srcLevel,\n\t\t\t...(srcIdentityId && { identityId: srcIdentityId }),\n\t\t});\n\t\tconst destPrefix = this._prefix({ ...opt, level: destLevel });\n\t\tconst finalSrcKey = `${bucket}/${srcPrefix}${srcKey}`;\n\t\tconst finalDestKey = `${destPrefix}${destKey}`;\n\t\tlogger.debug(`copying ${finalSrcKey} to ${finalDestKey}`);\n\n\t\tconst params: CopyObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tCopySource: finalSrcKey,\n\t\t\tKey: finalDestKey,\n\t\t\t// Copies over metadata like contentType as well\n\t\t\tMetadataDirective: 'COPY',\n\t\t};\n\n\t\tif (cacheControl) params.CacheControl = cacheControl;\n\t\tif (expires) params.Expires = expires;\n\t\tif (serverSideEncryption) {\n\t\t\tparams.ServerSideEncryption = serverSideEncryption;\n\t\t}\n\t\tif (SSECustomerAlgorithm) {\n\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t}\n\t\tif (SSECustomerKey) {\n\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t}\n\t\tif (SSECustomerKeyMD5) {\n\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t}\n\t\tif (SSEKMSKeyId) {\n\t\t\tparams.SSEKMSKeyId = SSEKMSKeyId;\n\t\t}\n\t\tif (acl) params.ACL = acl;\n\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\ttry {\n\t\t\tawait s3.send(new CopyObjectCommand(params));\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'copy',\n\t\t\t\t{\n\t\t\t\t\tmethod: 'copy',\n\t\t\t\t\tresult: 'success',\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\t`Copy success from ${srcKey} to ${destKey}`\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tkey: destKey,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'copy',\n\t\t\t\t{\n\t\t\t\t\tmethod: 'copy',\n\t\t\t\t\tresult: 'failed',\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\t`Copy failed from ${srcKey} to ${destKey}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Get a presigned URL of the file or the object data when download:true\n\t *\n\t * @param {string} key - key of the object\n\t * @param {S3ProviderGetConfig} [config] - Optional configuration for the underlying S3 command\n\t * @return {Promise<string | GetObjectCommandOutput>} - A promise resolves to Amazon S3 presigned URL or the\n\t * GetObjectCommandOutput if download is set to true on success\n\t */\n\tpublic async get<T extends S3ProviderGetConfig & StorageOptions>(\n\t\tkey: string,\n\t\tconfig?: T\n\t): Promise<S3ProviderGetOuput<T>>;\n\tpublic async get(\n\t\tkey: string,\n\t\tconfig?: S3ProviderGetConfig\n\t): Promise<string | GetObjectCommandOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst {\n\t\t\tbucket,\n\t\t\tdownload,\n\t\t\tcacheControl,\n\t\t\tcontentDisposition,\n\t\t\tcontentEncoding,\n\t\t\tcontentLanguage,\n\t\t\tcontentType,\n\t\t\texpires,\n\t\t\ttrack,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tprogressCallback,\n\t\t\tvalidateObjectExistence = false,\n\t\t} = opt;\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_key = prefix + key;\n\t\tconst emitter = new events.EventEmitter();\n\t\tconst s3 = this._createNewS3Client(opt, emitter);\n\t\tlogger.debug('get ' + key + ' from ' + final_key);\n\n\t\tconst params: GetObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tKey: final_key,\n\t\t};\n\t\t// See: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property\n\t\tif (cacheControl) params.ResponseCacheControl = cacheControl;\n\t\tif (contentDisposition)\n\t\t\tparams.ResponseContentDisposition = contentDisposition;\n\t\tif (contentEncoding) params.ResponseContentEncoding = contentEncoding;\n\t\tif (contentLanguage) params.ResponseContentLanguage = contentLanguage;\n\t\tif (contentType) params.ResponseContentType = contentType;\n\t\tif (SSECustomerAlgorithm) {\n\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t}\n\t\tif (SSECustomerKey) {\n\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t}\n\t\tif (SSECustomerKeyMD5) {\n\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t}\n\n\t\tif (download === true) {\n\t\t\tconst getObjectCommand = new GetObjectCommand(params);\n\t\t\ttry {\n\t\t\t\tif (progressCallback) {\n\t\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\t\temitter.on(SEND_DOWNLOAD_PROGRESS_EVENT, progress => {\n\t\t\t\t\t\t\tprogressCallback(progress);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst response = await s3.send(getObjectCommand);\n\t\t\t\temitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'download',\n\t\t\t\t\t{ method: 'get', result: 'success' },\n\t\t\t\t\t{\n\t\t\t\t\t\tfileSize: Number(response.Body['size'] || response.Body['length']),\n\t\t\t\t\t},\n\t\t\t\t\t`Download success for ${key}`\n\t\t\t\t);\n\t\t\t\treturn response;\n\t\t\t} catch (error) {\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'download',\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod: 'get',\n\t\t\t\t\t\tresult: 'failed',\n\t\t\t\t\t},\n\t\t\t\t\tnull,\n\t\t\t\t\t`Download failed with ${error.message}`\n\t\t\t\t);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\tif (validateObjectExistence) {\n\t\t\tconst headObjectCommand = new HeadObjectCommand(params);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tawait s3.send(headObjectCommand);\n\t\t\t} catch (error) {\n\t\t\t\tif (error.$metadata.httpStatusCode === 404) {\n\t\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\t\ttrack,\n\t\t\t\t\t\t'getSignedUrl',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmethod: 'get',\n\t\t\t\t\t\t\tresult: 'failed',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t`${key} not found`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tconst signer = new S3RequestPresigner({ ...s3.config });\n\t\t\tconst request = await createRequest(s3, new GetObjectCommand(params));\n\t\t\t// Default is 15 mins as defined in V2 AWS SDK\n\t\t\tconst url = formatUrl(\n\t\t\t\tawait signer.presign(request, {\n\t\t\t\t\texpiresIn: expires || DEFAULT_PRESIGN_EXPIRATION,\n\t\t\t\t})\n\t\t\t);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'getSignedUrl',\n\t\t\t\t{ method: 'get', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`Signed URL: ${url}`\n\t\t\t);\n\t\t\treturn url;\n\t\t} catch (error) {\n\t\t\tlogger.warn('get signed url error', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'getSignedUrl',\n\t\t\t\t{ method: 'get', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Could not get a signed URL for ${key}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Put a file in S3 bucket specified to configure method\n\t * @param key - key of the object\n\t * @param object - File to be put in Amazon S3 bucket\n\t * @param [config] - Optional configuration for the underlying S3 command\n\t * @return an instance of AWSS3UploadTask or a promise that resolves to an object with the new object's key on\n\t * success.\n\t */\n\tpublic put<T extends S3ProviderPutConfig>(\n\t\tkey: string,\n\t\tobject: PutObjectCommandInput['Body'],\n\t\tconfig?: T\n\t): S3ProviderPutOutput<T> {\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track, progressCallback, level, resumable } = opt;\n\t\tconst {\n\t\t\tcontentType,\n\t\t\tcontentDisposition,\n\t\t\tcontentEncoding,\n\t\t\tcacheControl,\n\t\t\texpires,\n\t\t\tmetadata,\n\t\t\ttagging,\n\t\t\tacl,\n\t\t} = opt;\n\t\tconst {\n\t\t\tserverSideEncryption,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tSSEKMSKeyId,\n\t\t} = opt;\n\t\tconst type = contentType ? contentType : 'binary/octet-stream';\n\n\t\tconst params: PutObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tKey: key,\n\t\t\tBody: object,\n\t\t\tContentType: type,\n\t\t};\n\t\tif (cacheControl) {\n\t\t\tparams.CacheControl = cacheControl;\n\t\t}\n\t\tif (contentDisposition) {\n\t\t\tparams.ContentDisposition = contentDisposition;\n\t\t}\n\t\tif (contentEncoding) {\n\t\t\tparams.ContentEncoding = contentEncoding;\n\t\t}\n\t\tif (expires) {\n\t\t\tparams.Expires = expires;\n\t\t}\n\t\tif (metadata) {\n\t\t\tparams.Metadata = metadata;\n\t\t}\n\t\tif (tagging) {\n\t\t\tparams.Tagging = tagging;\n\t\t}\n\t\tif (serverSideEncryption) {\n\t\t\tparams.ServerSideEncryption = serverSideEncryption;\n\t\t}\n\t\tif (SSECustomerAlgorithm) {\n\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t}\n\t\tif (SSECustomerKey) {\n\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t}\n\t\tif (SSECustomerKeyMD5) {\n\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t}\n\t\tif (SSEKMSKeyId) {\n\t\t\tparams.SSEKMSKeyId = SSEKMSKeyId;\n\t\t}\n\n\t\tconst emitter = new events.EventEmitter();\n\t\tconst uploader = new AWSS3ProviderManagedUpload(params, opt, emitter);\n\n\t\tif (acl) {\n\t\t\tparams.ACL = acl;\n\t\t}\n\n\t\tif (resumable === true) {\n\t\t\tconst s3Client = this._createNewS3Client(opt);\n\t\t\t// we are using aws sdk middleware to inject the prefix to key, this way we don't have to call\n\t\t\t// this._ensureCredentials() which allows us to make this function sync so we can return non-Promise like UploadTask\n\t\t\ts3Client.middlewareStack.add(\n\t\t\t\tcreatePrefixMiddleware(opt, key),\n\t\t\t\tprefixMiddlewareOptions\n\t\t\t);\n\t\t\tconst addTaskInput: AddTaskInput = {\n\t\t\t\tbucket,\n\t\t\t\tkey,\n\t\t\t\ts3Client,\n\t\t\t\tfile: object as Blob,\n\t\t\t\temitter,\n\t\t\t\taccessLevel: level,\n\t\t\t\tparams,\n\t\t\t};\n\t\t\t// explicitly asserting the type here as Typescript could not infer that resumable is of type true\n\t\t\treturn this.startResumableUpload(\n\t\t\t\taddTaskInput,\n\t\t\t\tconfig as typeof config & { resumable: true }\n\t\t\t) as S3ProviderPutOutput<T>;\n\t\t}\n\n\t\ttry {\n\t\t\tif (progressCallback) {\n\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\temitter.on(SEND_UPLOAD_PROGRESS_EVENT, progress => {\n\t\t\t\t\t\tprogressCallback(progress);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn uploader.upload().then(response => {\n\t\t\t\tlogger.debug('upload result', response);\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'upload',\n\t\t\t\t\t{ method: 'put', result: 'success' },\n\t\t\t\t\tnull,\n\t\t\t\t\t`Upload success for ${key}`\n\t\t\t\t);\n\t\t\t\treturn { key };\n\t\t\t}) as S3ProviderPutOutput<T>;\n\t\t} catch (error) {\n\t\t\tlogger.warn('error uploading', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'upload',\n\t\t\t\t{ method: 'put', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Error uploading ${key}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Remove the object for specified key\n\t * @param {string} key - key of the object\n\t * @param {S3ProviderRemoveConfig} [config] - Optional configuration for the underlying S3 command\n\t * @return {Promise<S3ProviderRemoveOutput>} - Promise resolves upon successful removal of the object\n\t */\n\tpublic async remove(\n\t\tkey: string,\n\t\tconfig?: S3ProviderRemoveConfig\n\t): Promise<S3ProviderRemoveOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track } = opt;\n\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_key = prefix + key;\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\tlogger.debug('remove ' + key + ' from ' + final_key);\n\n\t\tconst params: DeleteObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tKey: final_key,\n\t\t};\n\n\t\tconst deleteObjectCommand = new DeleteObjectCommand(params);\n\n\t\ttry {\n\t\t\tconst response = await s3.send(deleteObjectCommand);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'delete',\n\t\t\t\t{ method: 'remove', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`Deleted ${key} successfully`\n\t\t\t);\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'delete',\n\t\t\t\t{ method: 'remove', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Deletion of ${key} failed with ${error}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\tprivate async _list(\n\t\tparams: ListObjectsV2Request,\n\t\topt: S3ClientOptions,\n\t\tprefix: string\n\t): Promise<S3ProviderListOutput> {\n\t\tconst list: S3ProviderListOutput = {\n\t\t\tresults: [],\n\t\t\thasNextToken: false,\n\t\t};\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\tconst listObjectsV2Command = new ListObjectsV2Command({ ...params });\n\t\tconst response = await s3.send(listObjectsV2Command);\n\t\tif (response && response.Contents) {\n\t\t\tlist.results = response.Contents.map(item => {\n\t\t\t\treturn {\n\t\t\t\t\tkey: item.Key.substr(prefix.length),\n\t\t\t\t\teTag: item.ETag,\n\t\t\t\t\tlastModified: item.LastModified,\n\t\t\t\t\tsize: item.Size,\n\t\t\t\t};\n\t\t\t});\n\t\t\tlist.nextToken = response.NextContinuationToken;\n\t\t\tlist.hasNextToken = response.IsTruncated;\n\t\t}\n\t\treturn list;\n\t}\n\n\t/**\n\t * List bucket objects relative to the level and prefix specified\n\t * @param {string} path - the path that contains objects\n\t * @param {S3ProviderListConfig} [config] - Optional configuration for the underlying S3 command\n\t * @return {Promise<S3ProviderListOutput>} - Promise resolves to list of keys, eTags, lastModified\n\t * and file size for all objects in path\n\t */\n\tpublic async list(\n\t\tpath: string,\n\t\tconfig?: S3ProviderListConfig\n\t): Promise<S3ProviderListOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt: S3ClientOptions = Object.assign({}, this._config, config);\n\t\tconst { bucket, track, pageSize, nextToken } = opt;\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_path = prefix + path;\n\t\tlogger.debug('list ' + path + ' from ' + final_path);\n\t\ttry {\n\t\t\tconst list: S3ProviderListOutput = {\n\t\t\t\tresults: [],\n\t\t\t\thasNextToken: false,\n\t\t\t};\n\t\t\tconst MAX_PAGE_SIZE = 1000;\n\t\t\tlet listResult: S3ProviderListOutput;\n\t\t\tconst params: ListObjectsV2Request = {\n\t\t\t\tBucket: bucket,\n\t\t\t\tPrefix: final_path,\n\t\t\t\tMaxKeys: MAX_PAGE_SIZE,\n\t\t\t\tContinuationToken: nextToken,\n\t\t\t};\n\t\t\tparams.ContinuationToken = nextToken;\n\t\t\tif (pageSize === 'ALL') {\n\t\t\t\tdo {\n\t\t\t\t\tlistResult = await this._list(params, opt, prefix);\n\t\t\t\t\tlist.results.push(...listResult.results);\n\t\t\t\t\tif (listResult.nextToken)\n\t\t\t\t\t\tparams.ContinuationToken = listResult.nextToken;\n\t\t\t\t} while (listResult.nextToken);\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tpageSize &&\n\t\t\t\t\tpageSize <= MAX_PAGE_SIZE &&\n\t\t\t\t\ttypeof pageSize === 'number'\n\t\t\t\t)\n\t\t\t\t\tparams.MaxKeys = pageSize;\n\t\t\t\telse logger.warn(`pageSize should be from 0 - ${MAX_PAGE_SIZE}.`);\n\t\t\t\tlistResult = await this._list(params, opt, prefix);\n\t\t\t\tlist.results.push(...listResult.results);\n\t\t\t\tlist.hasNextToken = listResult.hasNextToken;\n\t\t\t\tlist.nextToken = null ?? listResult.nextToken;\n\t\t\t}\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'list',\n\t\t\t\t{ method: 'list', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`${list.results.length} items returned from list operation`\n\t\t\t);\n\t\t\tlogger.debug('list', list);\n\t\t\treturn list;\n\t\t} catch (error) {\n\t\t\tlogger.error('list InvalidArgument', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'list',\n\t\t\t\t{ method: 'list', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Listing items failed: ${error.message}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async _ensureCredentials(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return false;\n\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\tlogger.debug('set credentials for storage', cred);\n\t\t\tthis._config.credentials = cred;\n\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tlogger.warn('ensure credentials error', error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate _isWithCredentials(\n\t\tconfig: StorageOptions\n\t): config is StorageOptions & { credentials: ICredentials } {\n\t\treturn typeof config === 'object' && config.hasOwnProperty('credentials');\n\t}\n\n\tprivate _prefix(config: {\n\t\tcredentials: ICredentials;\n\t\tlevel?: StorageAccessLevel;\n\t\tcustomPrefix?: CustomPrefix;\n\t\tidentityId?: string;\n\t}): string {\n\t\tconst { credentials, level } = config;\n\n\t\tconst customPrefix = config.customPrefix || {};\n\t\tconst identityId = config.identityId || credentials.identityId;\n\t\tconst privatePath =\n\t\t\t(customPrefix.private !== undefined ? customPrefix.private : 'private/') +\n\t\t\tidentityId +\n\t\t\t'/';\n\t\tconst protectedPath =\n\t\t\t(customPrefix.protected !== undefined\n\t\t\t\t? customPrefix.protected\n\t\t\t\t: 'protected/') +\n\t\t\tidentityId +\n\t\t\t'/';\n\t\tconst publicPath =\n\t\t\tcustomPrefix.public !== undefined ? customPrefix.public : 'public/';\n\n\t\tswitch (level) {\n\t\t\tcase 'private':\n\t\t\t\treturn privatePath;\n\t\t\tcase 'protected':\n\t\t\t\treturn protectedPath;\n\t\t\tdefault:\n\t\t\t\treturn publicPath;\n\t\t}\n\t}\n\n\t/**\n\t * Creates an S3 client with new V3 aws sdk\n\t */\n\tprivate _createNewS3Client(\n\t\tconfig: {\n\t\t\tregion?: string;\n\t\t\tcancelTokenSource?: CancelTokenSource;\n\t\t\tdangerouslyConnectToHttpEndpointForTesting?: boolean;\n\t\t\tuseAccelerateEndpoint?: boolean;\n\t\t},\n\t\temitter?: events.EventEmitter\n\t): S3Client {\n\t\tconst s3client = createS3Client(config, emitter);\n\t\ts3client.middlewareStack.add(\n\t\t\tautoAdjustClockskewMiddleware(s3client.config),\n\t\t\tautoAdjustClockskewMiddlewareOptions\n\t\t);\n\t\treturn s3client;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}