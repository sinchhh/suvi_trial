{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { AnalyticsFilter, LifecycleRuleFilter, MetricsFilter, ReplicationRuleFilter } from \"../models/models_0\";\nimport { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { dateToUtcString as __dateToUtcString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getArrayIfSingleItem as __getArrayIfSingleItem, getValueFromTextNode as __getValueFromTextNode } from \"@aws-sdk/smithy-client\";\nimport { XmlNode as __XmlNode, XmlText as __XmlText } from \"@aws-sdk/xml-builder\";\nimport { parse as xmlParse } from \"../xml-parser\";\nexport var serializeAws_restXmlAbortMultipartUploadCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign({\n            \"x-id\": \"AbortMultipartUpload\"\n          }, input.UploadId !== undefined && {\n            uploadId: input.UploadId\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlCompleteMultipartUploadCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign({}, input.UploadId !== undefined && {\n            uploadId: input.UploadId\n          });\n          if (input.MultipartUpload !== undefined) {\n            contents = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlCopyObjectCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.ACL) && {\n            \"x-amz-acl\": input.ACL\n          }), isSerializableHeaderValue(input.CacheControl) && {\n            \"cache-control\": input.CacheControl\n          }), isSerializableHeaderValue(input.ContentDisposition) && {\n            \"content-disposition\": input.ContentDisposition\n          }), isSerializableHeaderValue(input.ContentEncoding) && {\n            \"content-encoding\": input.ContentEncoding\n          }), isSerializableHeaderValue(input.ContentLanguage) && {\n            \"content-language\": input.ContentLanguage\n          }), isSerializableHeaderValue(input.ContentType) && {\n            \"content-type\": input.ContentType\n          }), isSerializableHeaderValue(input.CopySource) && {\n            \"x-amz-copy-source\": input.CopySource\n          }), isSerializableHeaderValue(input.CopySourceIfMatch) && {\n            \"x-amz-copy-source-if-match\": input.CopySourceIfMatch\n          }), isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {\n            \"x-amz-copy-source-if-modified-since\": __dateToUtcString(input.CopySourceIfModifiedSince).toString()\n          }), isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {\n            \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch\n          }), isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {\n            \"x-amz-copy-source-if-unmodified-since\": __dateToUtcString(input.CopySourceIfUnmodifiedSince).toString()\n          }), isSerializableHeaderValue(input.Expires) && {\n            expires: __dateToUtcString(input.Expires).toString()\n          }), isSerializableHeaderValue(input.GrantFullControl) && {\n            \"x-amz-grant-full-control\": input.GrantFullControl\n          }), isSerializableHeaderValue(input.GrantRead) && {\n            \"x-amz-grant-read\": input.GrantRead\n          }), isSerializableHeaderValue(input.GrantReadACP) && {\n            \"x-amz-grant-read-acp\": input.GrantReadACP\n          }), isSerializableHeaderValue(input.GrantWriteACP) && {\n            \"x-amz-grant-write-acp\": input.GrantWriteACP\n          }), isSerializableHeaderValue(input.MetadataDirective) && {\n            \"x-amz-metadata-directive\": input.MetadataDirective\n          }), isSerializableHeaderValue(input.TaggingDirective) && {\n            \"x-amz-tagging-directive\": input.TaggingDirective\n          }), isSerializableHeaderValue(input.ServerSideEncryption) && {\n            \"x-amz-server-side-encryption\": input.ServerSideEncryption\n          }), isSerializableHeaderValue(input.StorageClass) && {\n            \"x-amz-storage-class\": input.StorageClass\n          }), isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n            \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation\n          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey\n          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.SSEKMSKeyId) && {\n            \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId\n          }), isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n            \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext\n          }), isSerializableHeaderValue(input.BucketKeyEnabled) && {\n            \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled.toString()\n          }), isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {\n            \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {\n            \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey\n          }), isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {\n            \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.Tagging) && {\n            \"x-amz-tagging\": input.Tagging\n          }), isSerializableHeaderValue(input.ObjectLockMode) && {\n            \"x-amz-object-lock-mode\": input.ObjectLockMode\n          }), isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n            \"x-amz-object-lock-retain-until-date\": (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString()\n          }), isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n            \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          }), isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {\n            \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner\n          }), input.Metadata !== undefined && Object.keys(input.Metadata).reduce(function (acc, suffix) {\n            var _a;\n            return __assign(__assign({}, acc), (_a = {}, _a[\"x-amz-meta-\" + suffix.toLowerCase()] = input.Metadata[suffix], _a));\n          }, {}));\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = {\n            \"x-id\": \"CopyObject\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlCreateBucketCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ACL) && {\n            \"x-amz-acl\": input.ACL\n          }), isSerializableHeaderValue(input.GrantFullControl) && {\n            \"x-amz-grant-full-control\": input.GrantFullControl\n          }), isSerializableHeaderValue(input.GrantRead) && {\n            \"x-amz-grant-read\": input.GrantRead\n          }), isSerializableHeaderValue(input.GrantReadACP) && {\n            \"x-amz-grant-read-acp\": input.GrantReadACP\n          }), isSerializableHeaderValue(input.GrantWrite) && {\n            \"x-amz-grant-write\": input.GrantWrite\n          }), isSerializableHeaderValue(input.GrantWriteACP) && {\n            \"x-amz-grant-write-acp\": input.GrantWriteACP\n          }), isSerializableHeaderValue(input.ObjectLockEnabledForBucket) && {\n            \"x-amz-bucket-object-lock-enabled\": input.ObjectLockEnabledForBucket.toString()\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.CreateBucketConfiguration !== undefined) {\n            contents = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlCreateMultipartUploadCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.ACL) && {\n            \"x-amz-acl\": input.ACL\n          }), isSerializableHeaderValue(input.CacheControl) && {\n            \"cache-control\": input.CacheControl\n          }), isSerializableHeaderValue(input.ContentDisposition) && {\n            \"content-disposition\": input.ContentDisposition\n          }), isSerializableHeaderValue(input.ContentEncoding) && {\n            \"content-encoding\": input.ContentEncoding\n          }), isSerializableHeaderValue(input.ContentLanguage) && {\n            \"content-language\": input.ContentLanguage\n          }), isSerializableHeaderValue(input.ContentType) && {\n            \"content-type\": input.ContentType\n          }), isSerializableHeaderValue(input.Expires) && {\n            expires: __dateToUtcString(input.Expires).toString()\n          }), isSerializableHeaderValue(input.GrantFullControl) && {\n            \"x-amz-grant-full-control\": input.GrantFullControl\n          }), isSerializableHeaderValue(input.GrantRead) && {\n            \"x-amz-grant-read\": input.GrantRead\n          }), isSerializableHeaderValue(input.GrantReadACP) && {\n            \"x-amz-grant-read-acp\": input.GrantReadACP\n          }), isSerializableHeaderValue(input.GrantWriteACP) && {\n            \"x-amz-grant-write-acp\": input.GrantWriteACP\n          }), isSerializableHeaderValue(input.ServerSideEncryption) && {\n            \"x-amz-server-side-encryption\": input.ServerSideEncryption\n          }), isSerializableHeaderValue(input.StorageClass) && {\n            \"x-amz-storage-class\": input.StorageClass\n          }), isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n            \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation\n          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey\n          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.SSEKMSKeyId) && {\n            \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId\n          }), isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n            \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext\n          }), isSerializableHeaderValue(input.BucketKeyEnabled) && {\n            \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled.toString()\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.Tagging) && {\n            \"x-amz-tagging\": input.Tagging\n          }), isSerializableHeaderValue(input.ObjectLockMode) && {\n            \"x-amz-object-lock-mode\": input.ObjectLockMode\n          }), isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n            \"x-amz-object-lock-retain-until-date\": (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString()\n          }), isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n            \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          }), input.Metadata !== undefined && Object.keys(input.Metadata).reduce(function (acc, suffix) {\n            var _a;\n            return __assign(__assign({}, acc), (_a = {}, _a[\"x-amz-meta-\" + suffix.toLowerCase()] = input.Metadata[suffix], _a));\n          }, {}));\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = {\n            uploads: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign({\n            analytics: \"\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketCorsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            cors: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketEncryptionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            encryption: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign({\n            \"intelligent-tiering\": \"\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign({\n            inventory: \"\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketLifecycleCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            lifecycle: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign({\n            metrics: \"\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketOwnershipControlsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            ownershipControls: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketPolicyCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            policy: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketReplicationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            replication: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketTaggingCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            tagging: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketWebsiteCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            website: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteObjectCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.MFA) && {\n            \"x-amz-mfa\": input.MFA\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n            \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention.toString()\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign({\n            \"x-id\": \"DeleteObject\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteObjectsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.MFA) && {\n            \"x-amz-mfa\": input.MFA\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n            \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention.toString()\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            delete: \"\"\n          };\n          if (input.Delete !== undefined) {\n            contents = serializeAws_restXmlDelete(input.Delete, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteObjectTaggingCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign({\n            tagging: \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeletePublicAccessBlockCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            publicAccessBlock: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketAccelerateConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            accelerate: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketAclCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            acl: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign({\n            analytics: \"\",\n            \"x-id\": \"GetBucketAnalyticsConfiguration\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketCorsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            cors: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketEncryptionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            encryption: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign({\n            \"intelligent-tiering\": \"\",\n            \"x-id\": \"GetBucketIntelligentTieringConfiguration\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketInventoryConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign({\n            inventory: \"\",\n            \"x-id\": \"GetBucketInventoryConfiguration\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketLifecycleConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            lifecycle: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketLocationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            location: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketLoggingCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            logging: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketMetricsConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign({\n            metrics: \"\",\n            \"x-id\": \"GetBucketMetricsConfiguration\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketNotificationConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            notification: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketOwnershipControlsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            ownershipControls: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketPolicyCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            policy: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketPolicyStatusCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            policyStatus: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketReplicationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            replication: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketRequestPaymentCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            requestPayment: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketTaggingCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            tagging: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketVersioningCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            versioning: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketWebsiteCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            website: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetObjectCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.IfMatch) && {\n            \"if-match\": input.IfMatch\n          }), isSerializableHeaderValue(input.IfModifiedSince) && {\n            \"if-modified-since\": __dateToUtcString(input.IfModifiedSince).toString()\n          }), isSerializableHeaderValue(input.IfNoneMatch) && {\n            \"if-none-match\": input.IfNoneMatch\n          }), isSerializableHeaderValue(input.IfUnmodifiedSince) && {\n            \"if-unmodified-since\": __dateToUtcString(input.IfUnmodifiedSince).toString()\n          }), isSerializableHeaderValue(input.Range) && {\n            range: input.Range\n          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey\n          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({\n            \"x-id\": \"GetObject\"\n          }, input.ResponseCacheControl !== undefined && {\n            \"response-cache-control\": input.ResponseCacheControl\n          }), input.ResponseContentDisposition !== undefined && {\n            \"response-content-disposition\": input.ResponseContentDisposition\n          }), input.ResponseContentEncoding !== undefined && {\n            \"response-content-encoding\": input.ResponseContentEncoding\n          }), input.ResponseContentLanguage !== undefined && {\n            \"response-content-language\": input.ResponseContentLanguage\n          }), input.ResponseContentType !== undefined && {\n            \"response-content-type\": input.ResponseContentType\n          }), input.ResponseExpires !== undefined && {\n            \"response-expires\": (input.ResponseExpires.toISOString().split(\".\")[0] + \"Z\").toString()\n          }), input.VersionId !== undefined && {\n            versionId: input.VersionId\n          }), input.PartNumber !== undefined && {\n            partNumber: input.PartNumber.toString()\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetObjectAclCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign({\n            acl: \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetObjectLegalHoldCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign({\n            \"legal-hold\": \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetObjectLockConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            \"object-lock\": \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetObjectRetentionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign({\n            retention: \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetObjectTaggingCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign({\n            tagging: \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetObjectTorrentCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = {\n            torrent: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetPublicAccessBlockCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            publicAccessBlock: \"\"\n          };\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlHeadBucketCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"HEAD\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlHeadObjectCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.IfMatch) && {\n            \"if-match\": input.IfMatch\n          }), isSerializableHeaderValue(input.IfModifiedSince) && {\n            \"if-modified-since\": __dateToUtcString(input.IfModifiedSince).toString()\n          }), isSerializableHeaderValue(input.IfNoneMatch) && {\n            \"if-none-match\": input.IfNoneMatch\n          }), isSerializableHeaderValue(input.IfUnmodifiedSince) && {\n            \"if-unmodified-since\": __dateToUtcString(input.IfUnmodifiedSince).toString()\n          }), isSerializableHeaderValue(input.Range) && {\n            range: input.Range\n          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey\n          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign(__assign({}, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          }), input.PartNumber !== undefined && {\n            partNumber: input.PartNumber.toString()\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"HEAD\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign({\n            analytics: \"\",\n            \"x-id\": \"ListBucketAnalyticsConfigurations\"\n          }, input.ContinuationToken !== undefined && {\n            \"continuation-token\": input.ContinuationToken\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign({\n            \"intelligent-tiering\": \"\",\n            \"x-id\": \"ListBucketIntelligentTieringConfigurations\"\n          }, input.ContinuationToken !== undefined && {\n            \"continuation-token\": input.ContinuationToken\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListBucketInventoryConfigurationsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign({\n            inventory: \"\",\n            \"x-id\": \"ListBucketInventoryConfigurations\"\n          }, input.ContinuationToken !== undefined && {\n            \"continuation-token\": input.ContinuationToken\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListBucketMetricsConfigurationsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign({\n            metrics: \"\",\n            \"x-id\": \"ListBucketMetricsConfigurations\"\n          }, input.ContinuationToken !== undefined && {\n            \"continuation-token\": input.ContinuationToken\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListBucketsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/\";\n          body = \"\";\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListMultipartUploadsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign(__assign(__assign(__assign(__assign(__assign({\n            uploads: \"\"\n          }, input.Delimiter !== undefined && {\n            delimiter: input.Delimiter\n          }), input.EncodingType !== undefined && {\n            \"encoding-type\": input.EncodingType\n          }), input.KeyMarker !== undefined && {\n            \"key-marker\": input.KeyMarker\n          }), input.MaxUploads !== undefined && {\n            \"max-uploads\": input.MaxUploads.toString()\n          }), input.Prefix !== undefined && {\n            prefix: input.Prefix\n          }), input.UploadIdMarker !== undefined && {\n            \"upload-id-marker\": input.UploadIdMarker\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListObjectsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign(__assign(__assign(__assign(__assign({}, input.Delimiter !== undefined && {\n            delimiter: input.Delimiter\n          }), input.EncodingType !== undefined && {\n            \"encoding-type\": input.EncodingType\n          }), input.Marker !== undefined && {\n            marker: input.Marker\n          }), input.MaxKeys !== undefined && {\n            \"max-keys\": input.MaxKeys.toString()\n          }), input.Prefix !== undefined && {\n            prefix: input.Prefix\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListObjectsV2Command = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign(__assign(__assign(__assign(__assign(__assign(__assign({\n            \"list-type\": \"2\"\n          }, input.Delimiter !== undefined && {\n            delimiter: input.Delimiter\n          }), input.EncodingType !== undefined && {\n            \"encoding-type\": input.EncodingType\n          }), input.MaxKeys !== undefined && {\n            \"max-keys\": input.MaxKeys.toString()\n          }), input.Prefix !== undefined && {\n            prefix: input.Prefix\n          }), input.ContinuationToken !== undefined && {\n            \"continuation-token\": input.ContinuationToken\n          }), input.FetchOwner !== undefined && {\n            \"fetch-owner\": input.FetchOwner.toString()\n          }), input.StartAfter !== undefined && {\n            \"start-after\": input.StartAfter\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListObjectVersionsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign(__assign(__assign(__assign(__assign(__assign({\n            versions: \"\"\n          }, input.Delimiter !== undefined && {\n            delimiter: input.Delimiter\n          }), input.EncodingType !== undefined && {\n            \"encoding-type\": input.EncodingType\n          }), input.KeyMarker !== undefined && {\n            \"key-marker\": input.KeyMarker\n          }), input.MaxKeys !== undefined && {\n            \"max-keys\": input.MaxKeys.toString()\n          }), input.Prefix !== undefined && {\n            prefix: input.Prefix\n          }), input.VersionIdMarker !== undefined && {\n            \"version-id-marker\": input.VersionIdMarker\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListPartsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign(__assign(__assign({\n            \"x-id\": \"ListParts\"\n          }, input.MaxParts !== undefined && {\n            \"max-parts\": input.MaxParts.toString()\n          }), input.PartNumberMarker !== undefined && {\n            \"part-number-marker\": input.PartNumberMarker\n          }), input.UploadId !== undefined && {\n            uploadId: input.UploadId\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketAccelerateConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            accelerate: \"\"\n          };\n          if (input.AccelerateConfiguration !== undefined) {\n            contents = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketAclCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ACL) && {\n            \"x-amz-acl\": input.ACL\n          }), isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.GrantFullControl) && {\n            \"x-amz-grant-full-control\": input.GrantFullControl\n          }), isSerializableHeaderValue(input.GrantRead) && {\n            \"x-amz-grant-read\": input.GrantRead\n          }), isSerializableHeaderValue(input.GrantReadACP) && {\n            \"x-amz-grant-read-acp\": input.GrantReadACP\n          }), isSerializableHeaderValue(input.GrantWrite) && {\n            \"x-amz-grant-write\": input.GrantWrite\n          }), isSerializableHeaderValue(input.GrantWriteACP) && {\n            \"x-amz-grant-write-acp\": input.GrantWriteACP\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            acl: \"\"\n          };\n          if (input.AccessControlPolicy !== undefined) {\n            contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign({\n            analytics: \"\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          if (input.AnalyticsConfiguration !== undefined) {\n            contents = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketCorsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            cors: \"\"\n          };\n          if (input.CORSConfiguration !== undefined) {\n            contents = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketEncryptionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            encryption: \"\"\n          };\n          if (input.ServerSideEncryptionConfiguration !== undefined) {\n            contents = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/xml\"\n          };\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign({\n            \"intelligent-tiering\": \"\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          if (input.IntelligentTieringConfiguration !== undefined) {\n            contents = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketInventoryConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign({\n            inventory: \"\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          if (input.InventoryConfiguration !== undefined) {\n            contents = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketLifecycleConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            lifecycle: \"\"\n          };\n          if (input.LifecycleConfiguration !== undefined) {\n            contents = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketLoggingCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            logging: \"\"\n          };\n          if (input.BucketLoggingStatus !== undefined) {\n            contents = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketMetricsConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = __assign({\n            metrics: \"\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          if (input.MetricsConfiguration !== undefined) {\n            contents = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketNotificationConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            notification: \"\"\n          };\n          if (input.NotificationConfiguration !== undefined) {\n            contents = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketOwnershipControlsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            ownershipControls: \"\"\n          };\n          if (input.OwnershipControls !== undefined) {\n            contents = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketPolicyCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign({\n            \"content-type\": \"text/plain\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess) && {\n            \"x-amz-confirm-remove-self-bucket-access\": input.ConfirmRemoveSelfBucketAccess.toString()\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            policy: \"\"\n          };\n          if (input.Policy !== undefined) {\n            contents = input.Policy;\n            body = contents;\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketReplicationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.Token) && {\n            \"x-amz-bucket-object-lock-token\": input.Token\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            replication: \"\"\n          };\n          if (input.ReplicationConfiguration !== undefined) {\n            contents = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketRequestPaymentCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            requestPayment: \"\"\n          };\n          if (input.RequestPaymentConfiguration !== undefined) {\n            contents = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketTaggingCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            tagging: \"\"\n          };\n          if (input.Tagging !== undefined) {\n            contents = serializeAws_restXmlTagging(input.Tagging, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketVersioningCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.MFA) && {\n            \"x-amz-mfa\": input.MFA\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            versioning: \"\"\n          };\n          if (input.VersioningConfiguration !== undefined) {\n            contents = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketWebsiteCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            website: \"\"\n          };\n          if (input.WebsiteConfiguration !== undefined) {\n            contents = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutObjectCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({\n            \"content-type\": \"application/octet-stream\"\n          }, isSerializableHeaderValue(input.ACL) && {\n            \"x-amz-acl\": input.ACL\n          }), isSerializableHeaderValue(input.CacheControl) && {\n            \"cache-control\": input.CacheControl\n          }), isSerializableHeaderValue(input.ContentDisposition) && {\n            \"content-disposition\": input.ContentDisposition\n          }), isSerializableHeaderValue(input.ContentEncoding) && {\n            \"content-encoding\": input.ContentEncoding\n          }), isSerializableHeaderValue(input.ContentLanguage) && {\n            \"content-language\": input.ContentLanguage\n          }), isSerializableHeaderValue(input.ContentLength) && {\n            \"content-length\": input.ContentLength.toString()\n          }), isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ContentType) && {\n            \"content-type\": input.ContentType\n          }), isSerializableHeaderValue(input.Expires) && {\n            expires: __dateToUtcString(input.Expires).toString()\n          }), isSerializableHeaderValue(input.GrantFullControl) && {\n            \"x-amz-grant-full-control\": input.GrantFullControl\n          }), isSerializableHeaderValue(input.GrantRead) && {\n            \"x-amz-grant-read\": input.GrantRead\n          }), isSerializableHeaderValue(input.GrantReadACP) && {\n            \"x-amz-grant-read-acp\": input.GrantReadACP\n          }), isSerializableHeaderValue(input.GrantWriteACP) && {\n            \"x-amz-grant-write-acp\": input.GrantWriteACP\n          }), isSerializableHeaderValue(input.ServerSideEncryption) && {\n            \"x-amz-server-side-encryption\": input.ServerSideEncryption\n          }), isSerializableHeaderValue(input.StorageClass) && {\n            \"x-amz-storage-class\": input.StorageClass\n          }), isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n            \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation\n          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey\n          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.SSEKMSKeyId) && {\n            \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId\n          }), isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n            \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext\n          }), isSerializableHeaderValue(input.BucketKeyEnabled) && {\n            \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled.toString()\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.Tagging) && {\n            \"x-amz-tagging\": input.Tagging\n          }), isSerializableHeaderValue(input.ObjectLockMode) && {\n            \"x-amz-object-lock-mode\": input.ObjectLockMode\n          }), isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n            \"x-amz-object-lock-retain-until-date\": (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString()\n          }), isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n            \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          }), input.Metadata !== undefined && Object.keys(input.Metadata).reduce(function (acc, suffix) {\n            var _a;\n            return __assign(__assign({}, acc), (_a = {}, _a[\"x-amz-meta-\" + suffix.toLowerCase()] = input.Metadata[suffix], _a));\n          }, {}));\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = {\n            \"x-id\": \"PutObject\"\n          };\n          if (input.Body !== undefined) {\n            contents = input.Body;\n            body = contents;\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutObjectAclCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ACL) && {\n            \"x-amz-acl\": input.ACL\n          }), isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.GrantFullControl) && {\n            \"x-amz-grant-full-control\": input.GrantFullControl\n          }), isSerializableHeaderValue(input.GrantRead) && {\n            \"x-amz-grant-read\": input.GrantRead\n          }), isSerializableHeaderValue(input.GrantReadACP) && {\n            \"x-amz-grant-read-acp\": input.GrantReadACP\n          }), isSerializableHeaderValue(input.GrantWrite) && {\n            \"x-amz-grant-write\": input.GrantWrite\n          }), isSerializableHeaderValue(input.GrantWriteACP) && {\n            \"x-amz-grant-write-acp\": input.GrantWriteACP\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign({\n            acl: \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          if (input.AccessControlPolicy !== undefined) {\n            contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutObjectLegalHoldCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign({\n            \"legal-hold\": \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          if (input.LegalHold !== undefined) {\n            contents = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutObjectLockConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.Token) && {\n            \"x-amz-bucket-object-lock-token\": input.Token\n          }), isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            \"object-lock\": \"\"\n          };\n          if (input.ObjectLockConfiguration !== undefined) {\n            contents = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutObjectRetentionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n            \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention.toString()\n          }), isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign({\n            retention: \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          if (input.Retention !== undefined) {\n            contents = serializeAws_restXmlObjectLockRetention(input.Retention, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutObjectTaggingCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign({\n            tagging: \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          if (input.Tagging !== undefined) {\n            contents = serializeAws_restXmlTagging(input.Tagging, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutPublicAccessBlockCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          query = {\n            publicAccessBlock: \"\"\n          };\n          if (input.PublicAccessBlockConfiguration !== undefined) {\n            contents = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlRestoreObjectCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign({\n            restore: \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          if (input.RestoreRequest !== undefined) {\n            contents = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlSelectObjectContentCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, bodyNode, node, node, node, node, node, node, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey\n          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = {\n            select: \"\",\n            \"select-type\": \"2\"\n          };\n          body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n          bodyNode = new __XmlNode(\"SelectObjectContentRequest\");\n          bodyNode.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n          if (input.Expression !== undefined) {\n            node = new __XmlNode(\"Expression\").addChildNode(new __XmlText(input.Expression)).withName(\"Expression\");\n            bodyNode.addChildNode(node);\n          }\n          if (input.ExpressionType !== undefined) {\n            node = new __XmlNode(\"ExpressionType\").addChildNode(new __XmlText(input.ExpressionType)).withName(\"ExpressionType\");\n            bodyNode.addChildNode(node);\n          }\n          if (input.InputSerialization !== undefined) {\n            node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\"InputSerialization\");\n            bodyNode.addChildNode(node);\n          }\n          if (input.OutputSerialization !== undefined) {\n            node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\"OutputSerialization\");\n            bodyNode.addChildNode(node);\n          }\n          if (input.RequestProgress !== undefined) {\n            node = serializeAws_restXmlRequestProgress(input.RequestProgress, context).withName(\"RequestProgress\");\n            bodyNode.addChildNode(node);\n          }\n          if (input.ScanRange !== undefined) {\n            node = serializeAws_restXmlScanRange(input.ScanRange, context).withName(\"ScanRange\");\n            bodyNode.addChildNode(node);\n          }\n          body += bodyNode.toString();\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlUploadPartCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign({\n            \"content-type\": \"application/octet-stream\"\n          }, isSerializableHeaderValue(input.ContentLength) && {\n            \"content-length\": input.ContentLength.toString()\n          }), isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey\n          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign(__assign({\n            \"x-id\": \"UploadPart\"\n          }, input.PartNumber !== undefined && {\n            partNumber: input.PartNumber.toString()\n          }), input.UploadId !== undefined && {\n            uploadId: input.UploadId\n          });\n          if (input.Body !== undefined) {\n            contents = input.Body;\n            body = contents;\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlUploadPartCopyCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.CopySource) && {\n            \"x-amz-copy-source\": input.CopySource\n          }), isSerializableHeaderValue(input.CopySourceIfMatch) && {\n            \"x-amz-copy-source-if-match\": input.CopySourceIfMatch\n          }), isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {\n            \"x-amz-copy-source-if-modified-since\": __dateToUtcString(input.CopySourceIfModifiedSince).toString()\n          }), isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {\n            \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch\n          }), isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {\n            \"x-amz-copy-source-if-unmodified-since\": __dateToUtcString(input.CopySourceIfUnmodifiedSince).toString()\n          }), isSerializableHeaderValue(input.CopySourceRange) && {\n            \"x-amz-copy-source-range\": input.CopySourceRange\n          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey\n          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {\n            \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {\n            \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey\n          }), isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {\n            \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          }), isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {\n            \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n          query = __assign(__assign({\n            \"x-id\": \"UploadPartCopy\"\n          }, input.PartNumber !== undefined && {\n            partNumber: input.PartNumber.toString()\n          }), input.UploadId !== undefined && {\n            uploadId: input.UploadId\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlAbortMultipartUploadCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlAbortMultipartUploadCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            RequestCharged: undefined\n          };\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlAbortMultipartUploadCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n    var _d;\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"NoSuchUpload\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.s3#NoSuchUpload\":\n              return [3 /*break*/, 2];\n          }\n          return [3 /*break*/, 4];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restXmlNoSuchUploadResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 5];\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlCompleteMultipartUploadCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlCompleteMultipartUploadCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Bucket: undefined,\n            BucketKeyEnabled: undefined,\n            ETag: undefined,\n            Expiration: undefined,\n            Key: undefined,\n            Location: undefined,\n            RequestCharged: undefined,\n            SSEKMSKeyId: undefined,\n            ServerSideEncryption: undefined,\n            VersionId: undefined\n          };\n          if (output.headers[\"x-amz-expiration\"] !== undefined) {\n            contents.Expiration = output.headers[\"x-amz-expiration\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n            contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n          }\n          if (output.headers[\"x-amz-version-id\"] !== undefined) {\n            contents.VersionId = output.headers[\"x-amz-version-id\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n            contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n            contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n          }\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data[\"Bucket\"] !== undefined) {\n            contents.Bucket = data[\"Bucket\"];\n          }\n          if (data[\"ETag\"] !== undefined) {\n            contents.ETag = data[\"ETag\"];\n          }\n          if (data[\"Key\"] !== undefined) {\n            contents.Key = data[\"Key\"];\n          }\n          if (data[\"Location\"] !== undefined) {\n            contents.Location = data[\"Location\"];\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlCompleteMultipartUploadCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlCopyObjectCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlCopyObjectCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            BucketKeyEnabled: undefined,\n            CopyObjectResult: undefined,\n            CopySourceVersionId: undefined,\n            Expiration: undefined,\n            RequestCharged: undefined,\n            SSECustomerAlgorithm: undefined,\n            SSECustomerKeyMD5: undefined,\n            SSEKMSEncryptionContext: undefined,\n            SSEKMSKeyId: undefined,\n            ServerSideEncryption: undefined,\n            VersionId: undefined\n          };\n          if (output.headers[\"x-amz-expiration\"] !== undefined) {\n            contents.Expiration = output.headers[\"x-amz-expiration\"];\n          }\n          if (output.headers[\"x-amz-copy-source-version-id\"] !== undefined) {\n            contents.CopySourceVersionId = output.headers[\"x-amz-copy-source-version-id\"];\n          }\n          if (output.headers[\"x-amz-version-id\"] !== undefined) {\n            contents.VersionId = output.headers[\"x-amz-version-id\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n            contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n            contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n            contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n            contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n            contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n            contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n          }\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.CopyObjectResult = deserializeAws_restXmlCopyObjectResult(data, context);\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlCopyObjectCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n    var _d;\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"ObjectNotInActiveTierError\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.s3#ObjectNotInActiveTierError\":\n              return [3 /*break*/, 2];\n          }\n          return [3 /*break*/, 4];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restXmlObjectNotInActiveTierErrorResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 5];\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlCreateBucketCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlCreateBucketCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Location: undefined\n          };\n          if (output.headers[\"location\"] !== undefined) {\n            contents.Location = output.headers[\"location\"];\n          }\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlCreateBucketCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n    var _e;\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"BucketAlreadyExists\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.s3#BucketAlreadyExists\":\n              return [3 /*break*/, 2];\n            case \"BucketAlreadyOwnedByYou\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.s3#BucketAlreadyOwnedByYou\":\n              return [3 /*break*/, 4];\n          }\n          return [3 /*break*/, 6];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restXmlBucketAlreadyExistsResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restXmlBucketAlreadyOwnedByYouResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlCreateMultipartUploadCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlCreateMultipartUploadCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            AbortDate: undefined,\n            AbortRuleId: undefined,\n            Bucket: undefined,\n            BucketKeyEnabled: undefined,\n            Key: undefined,\n            RequestCharged: undefined,\n            SSECustomerAlgorithm: undefined,\n            SSECustomerKeyMD5: undefined,\n            SSEKMSEncryptionContext: undefined,\n            SSEKMSKeyId: undefined,\n            ServerSideEncryption: undefined,\n            UploadId: undefined\n          };\n          if (output.headers[\"x-amz-abort-date\"] !== undefined) {\n            contents.AbortDate = new Date(output.headers[\"x-amz-abort-date\"]);\n          }\n          if (output.headers[\"x-amz-abort-rule-id\"] !== undefined) {\n            contents.AbortRuleId = output.headers[\"x-amz-abort-rule-id\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n            contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n            contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n            contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n            contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n            contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n            contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n          }\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data[\"Bucket\"] !== undefined) {\n            contents.Bucket = data[\"Bucket\"];\n          }\n          if (data[\"Key\"] !== undefined) {\n            contents.Key = data[\"Key\"];\n          }\n          if (data[\"UploadId\"] !== undefined) {\n            contents.UploadId = data[\"UploadId\"];\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlCreateMultipartUploadCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeleteBucketCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeleteBucketCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeleteBucketCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeleteBucketCorsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeleteBucketCorsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeleteBucketCorsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeleteBucketEncryptionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeleteBucketEncryptionCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeleteBucketEncryptionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeleteBucketLifecycleCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeleteBucketLifecycleCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeleteBucketLifecycleCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeleteBucketPolicyCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeleteBucketPolicyCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeleteBucketPolicyCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeleteBucketReplicationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeleteBucketReplicationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeleteBucketReplicationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeleteBucketTaggingCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeleteBucketTaggingCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeleteBucketTaggingCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeleteBucketWebsiteCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeleteBucketWebsiteCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeleteBucketWebsiteCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeleteObjectCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeleteObjectCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            DeleteMarker: undefined,\n            RequestCharged: undefined,\n            VersionId: undefined\n          };\n          if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n            contents.DeleteMarker = output.headers[\"x-amz-delete-marker\"] === \"true\";\n          }\n          if (output.headers[\"x-amz-version-id\"] !== undefined) {\n            contents.VersionId = output.headers[\"x-amz-version-id\"];\n          }\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeleteObjectCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeleteObjectsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeleteObjectsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Deleted: undefined,\n            Errors: undefined,\n            RequestCharged: undefined\n          };\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.Deleted === \"\") {\n            contents.Deleted = [];\n          }\n          if (data[\"Deleted\"] !== undefined) {\n            contents.Deleted = deserializeAws_restXmlDeletedObjects(__getArrayIfSingleItem(data[\"Deleted\"]), context);\n          }\n          if (data.Error === \"\") {\n            contents.Errors = [];\n          }\n          if (data[\"Error\"] !== undefined) {\n            contents.Errors = deserializeAws_restXmlErrors(__getArrayIfSingleItem(data[\"Error\"]), context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeleteObjectsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeleteObjectTaggingCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeleteObjectTaggingCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            VersionId: undefined\n          };\n          if (output.headers[\"x-amz-version-id\"] !== undefined) {\n            contents.VersionId = output.headers[\"x-amz-version-id\"];\n          }\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeleteObjectTaggingCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlDeletePublicAccessBlockCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlDeletePublicAccessBlockCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlDeletePublicAccessBlockCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Status: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data[\"Status\"] !== undefined) {\n            contents.Status = data[\"Status\"];\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketAclCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketAclCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Grants: undefined,\n            Owner: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.AccessControlList === \"\") {\n            contents.Grants = [];\n          }\n          if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n            contents.Grants = deserializeAws_restXmlGrants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n          }\n          if (data[\"Owner\"] !== undefined) {\n            contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketAclCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            AnalyticsConfiguration: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.AnalyticsConfiguration = deserializeAws_restXmlAnalyticsConfiguration(data, context);\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketCorsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketCorsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CORSRules: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.CORSRule === \"\") {\n            contents.CORSRules = [];\n          }\n          if (data[\"CORSRule\"] !== undefined) {\n            contents.CORSRules = deserializeAws_restXmlCORSRules(__getArrayIfSingleItem(data[\"CORSRule\"]), context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketCorsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketEncryptionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketEncryptionCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            ServerSideEncryptionConfiguration: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.ServerSideEncryptionConfiguration = deserializeAws_restXmlServerSideEncryptionConfiguration(data, context);\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketEncryptionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            IntelligentTieringConfiguration: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.IntelligentTieringConfiguration = deserializeAws_restXmlIntelligentTieringConfiguration(data, context);\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketInventoryConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketInventoryConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            InventoryConfiguration: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.InventoryConfiguration = deserializeAws_restXmlInventoryConfiguration(data, context);\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketInventoryConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Rules: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.Rule === \"\") {\n            contents.Rules = [];\n          }\n          if (data[\"Rule\"] !== undefined) {\n            contents.Rules = deserializeAws_restXmlLifecycleRules(__getArrayIfSingleItem(data[\"Rule\"]), context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketLocationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketLocationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            LocationConstraint: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data[\"LocationConstraint\"] !== undefined) {\n            contents.LocationConstraint = data[\"LocationConstraint\"];\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketLocationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketLoggingCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketLoggingCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            LoggingEnabled: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data[\"LoggingEnabled\"] !== undefined) {\n            contents.LoggingEnabled = deserializeAws_restXmlLoggingEnabled(data[\"LoggingEnabled\"], context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketLoggingCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketMetricsConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketMetricsConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            MetricsConfiguration: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.MetricsConfiguration = deserializeAws_restXmlMetricsConfiguration(data, context);\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketMetricsConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketNotificationConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketNotificationConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            LambdaFunctionConfigurations: undefined,\n            QueueConfigurations: undefined,\n            TopicConfigurations: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.CloudFunctionConfiguration === \"\") {\n            contents.LambdaFunctionConfigurations = [];\n          }\n          if (data[\"CloudFunctionConfiguration\"] !== undefined) {\n            contents.LambdaFunctionConfigurations = deserializeAws_restXmlLambdaFunctionConfigurationList(__getArrayIfSingleItem(data[\"CloudFunctionConfiguration\"]), context);\n          }\n          if (data.QueueConfiguration === \"\") {\n            contents.QueueConfigurations = [];\n          }\n          if (data[\"QueueConfiguration\"] !== undefined) {\n            contents.QueueConfigurations = deserializeAws_restXmlQueueConfigurationList(__getArrayIfSingleItem(data[\"QueueConfiguration\"]), context);\n          }\n          if (data.TopicConfiguration === \"\") {\n            contents.TopicConfigurations = [];\n          }\n          if (data[\"TopicConfiguration\"] !== undefined) {\n            contents.TopicConfigurations = deserializeAws_restXmlTopicConfigurationList(__getArrayIfSingleItem(data[\"TopicConfiguration\"]), context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketNotificationConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketOwnershipControlsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketOwnershipControlsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            OwnershipControls: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.OwnershipControls = deserializeAws_restXmlOwnershipControls(data, context);\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketOwnershipControlsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketPolicyCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketPolicyCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Policy: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data[\"Policy\"] !== undefined) {\n            contents.Policy = data[\"Policy\"];\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketPolicyCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketPolicyStatusCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketPolicyStatusCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            PolicyStatus: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.PolicyStatus = deserializeAws_restXmlPolicyStatus(data, context);\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketPolicyStatusCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketReplicationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketReplicationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            ReplicationConfiguration: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.ReplicationConfiguration = deserializeAws_restXmlReplicationConfiguration(data, context);\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketReplicationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketRequestPaymentCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketRequestPaymentCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Payer: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data[\"Payer\"] !== undefined) {\n            contents.Payer = data[\"Payer\"];\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketRequestPaymentCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketTaggingCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketTaggingCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            TagSet: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.TagSet === \"\") {\n            contents.TagSet = [];\n          }\n          if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n            contents.TagSet = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketTaggingCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketVersioningCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketVersioningCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            MFADelete: undefined,\n            Status: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data[\"MfaDelete\"] !== undefined) {\n            contents.MFADelete = data[\"MfaDelete\"];\n          }\n          if (data[\"Status\"] !== undefined) {\n            contents.Status = data[\"Status\"];\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketVersioningCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetBucketWebsiteCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetBucketWebsiteCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            ErrorDocument: undefined,\n            IndexDocument: undefined,\n            RedirectAllRequestsTo: undefined,\n            RoutingRules: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data[\"ErrorDocument\"] !== undefined) {\n            contents.ErrorDocument = deserializeAws_restXmlErrorDocument(data[\"ErrorDocument\"], context);\n          }\n          if (data[\"IndexDocument\"] !== undefined) {\n            contents.IndexDocument = deserializeAws_restXmlIndexDocument(data[\"IndexDocument\"], context);\n          }\n          if (data[\"RedirectAllRequestsTo\"] !== undefined) {\n            contents.RedirectAllRequestsTo = deserializeAws_restXmlRedirectAllRequestsTo(data[\"RedirectAllRequestsTo\"], context);\n          }\n          if (data.RoutingRules === \"\") {\n            contents.RoutingRules = [];\n          }\n          if (data[\"RoutingRules\"] !== undefined && data[\"RoutingRules\"][\"RoutingRule\"] !== undefined) {\n            contents.RoutingRules = deserializeAws_restXmlRoutingRules(__getArrayIfSingleItem(data[\"RoutingRules\"][\"RoutingRule\"]), context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetBucketWebsiteCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetObjectCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return [2 /*return*/, deserializeAws_restXmlGetObjectCommandError(output, context)];\n      }\n      contents = {\n        $metadata: deserializeMetadata(output),\n        AcceptRanges: undefined,\n        Body: undefined,\n        BucketKeyEnabled: undefined,\n        CacheControl: undefined,\n        ContentDisposition: undefined,\n        ContentEncoding: undefined,\n        ContentLanguage: undefined,\n        ContentLength: undefined,\n        ContentRange: undefined,\n        ContentType: undefined,\n        DeleteMarker: undefined,\n        ETag: undefined,\n        Expiration: undefined,\n        Expires: undefined,\n        LastModified: undefined,\n        Metadata: undefined,\n        MissingMeta: undefined,\n        ObjectLockLegalHoldStatus: undefined,\n        ObjectLockMode: undefined,\n        ObjectLockRetainUntilDate: undefined,\n        PartsCount: undefined,\n        ReplicationStatus: undefined,\n        RequestCharged: undefined,\n        Restore: undefined,\n        SSECustomerAlgorithm: undefined,\n        SSECustomerKeyMD5: undefined,\n        SSEKMSKeyId: undefined,\n        ServerSideEncryption: undefined,\n        StorageClass: undefined,\n        TagCount: undefined,\n        VersionId: undefined,\n        WebsiteRedirectLocation: undefined\n      };\n      if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n        contents.DeleteMarker = output.headers[\"x-amz-delete-marker\"] === \"true\";\n      }\n      if (output.headers[\"accept-ranges\"] !== undefined) {\n        contents.AcceptRanges = output.headers[\"accept-ranges\"];\n      }\n      if (output.headers[\"x-amz-expiration\"] !== undefined) {\n        contents.Expiration = output.headers[\"x-amz-expiration\"];\n      }\n      if (output.headers[\"x-amz-restore\"] !== undefined) {\n        contents.Restore = output.headers[\"x-amz-restore\"];\n      }\n      if (output.headers[\"last-modified\"] !== undefined) {\n        contents.LastModified = new Date(output.headers[\"last-modified\"]);\n      }\n      if (output.headers[\"content-length\"] !== undefined) {\n        contents.ContentLength = parseInt(output.headers[\"content-length\"], 10);\n      }\n      if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n      }\n      if (output.headers[\"x-amz-missing-meta\"] !== undefined) {\n        contents.MissingMeta = parseInt(output.headers[\"x-amz-missing-meta\"], 10);\n      }\n      if (output.headers[\"x-amz-version-id\"] !== undefined) {\n        contents.VersionId = output.headers[\"x-amz-version-id\"];\n      }\n      if (output.headers[\"cache-control\"] !== undefined) {\n        contents.CacheControl = output.headers[\"cache-control\"];\n      }\n      if (output.headers[\"content-disposition\"] !== undefined) {\n        contents.ContentDisposition = output.headers[\"content-disposition\"];\n      }\n      if (output.headers[\"content-encoding\"] !== undefined) {\n        contents.ContentEncoding = output.headers[\"content-encoding\"];\n      }\n      if (output.headers[\"content-language\"] !== undefined) {\n        contents.ContentLanguage = output.headers[\"content-language\"];\n      }\n      if (output.headers[\"content-range\"] !== undefined) {\n        contents.ContentRange = output.headers[\"content-range\"];\n      }\n      if (output.headers[\"content-type\"] !== undefined) {\n        contents.ContentType = output.headers[\"content-type\"];\n      }\n      if (output.headers[\"expires\"] !== undefined) {\n        contents.Expires = new Date(output.headers[\"expires\"]);\n      }\n      if (output.headers[\"x-amz-website-redirect-location\"] !== undefined) {\n        contents.WebsiteRedirectLocation = output.headers[\"x-amz-website-redirect-location\"];\n      }\n      if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n        contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n      }\n      if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n        contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n      }\n      if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n        contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n      }\n      if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n        contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n      }\n      if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n        contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n      }\n      if (output.headers[\"x-amz-storage-class\"] !== undefined) {\n        contents.StorageClass = output.headers[\"x-amz-storage-class\"];\n      }\n      if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n      }\n      if (output.headers[\"x-amz-replication-status\"] !== undefined) {\n        contents.ReplicationStatus = output.headers[\"x-amz-replication-status\"];\n      }\n      if (output.headers[\"x-amz-mp-parts-count\"] !== undefined) {\n        contents.PartsCount = parseInt(output.headers[\"x-amz-mp-parts-count\"], 10);\n      }\n      if (output.headers[\"x-amz-tagging-count\"] !== undefined) {\n        contents.TagCount = parseInt(output.headers[\"x-amz-tagging-count\"], 10);\n      }\n      if (output.headers[\"x-amz-object-lock-mode\"] !== undefined) {\n        contents.ObjectLockMode = output.headers[\"x-amz-object-lock-mode\"];\n      }\n      if (output.headers[\"x-amz-object-lock-retain-until-date\"] !== undefined) {\n        contents.ObjectLockRetainUntilDate = new Date(output.headers[\"x-amz-object-lock-retain-until-date\"]);\n      }\n      if (output.headers[\"x-amz-object-lock-legal-hold\"] !== undefined) {\n        contents.ObjectLockLegalHoldStatus = output.headers[\"x-amz-object-lock-legal-hold\"];\n      }\n      Object.keys(output.headers).forEach(function (header) {\n        if (contents.Metadata === undefined) {\n          contents.Metadata = {};\n        }\n        if (header.startsWith(\"x-amz-meta-\")) {\n          contents.Metadata[header.substring(11)] = output.headers[header];\n        }\n      });\n      data = output.body;\n      contents.Body = data;\n      return [2 /*return*/, Promise.resolve(contents)];\n    });\n  });\n};\nvar deserializeAws_restXmlGetObjectCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n    var _e;\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"InvalidObjectState\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.s3#InvalidObjectState\":\n              return [3 /*break*/, 2];\n            case \"NoSuchKey\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.s3#NoSuchKey\":\n              return [3 /*break*/, 4];\n          }\n          return [3 /*break*/, 6];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restXmlInvalidObjectStateResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetObjectAclCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetObjectAclCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Grants: undefined,\n            Owner: undefined,\n            RequestCharged: undefined\n          };\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.AccessControlList === \"\") {\n            contents.Grants = [];\n          }\n          if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n            contents.Grants = deserializeAws_restXmlGrants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n          }\n          if (data[\"Owner\"] !== undefined) {\n            contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetObjectAclCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n    var _d;\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"NoSuchKey\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.s3#NoSuchKey\":\n              return [3 /*break*/, 2];\n          }\n          return [3 /*break*/, 4];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 5];\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetObjectLegalHoldCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetObjectLegalHoldCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            LegalHold: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.LegalHold = deserializeAws_restXmlObjectLockLegalHold(data, context);\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetObjectLegalHoldCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetObjectLockConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetObjectLockConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            ObjectLockConfiguration: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.ObjectLockConfiguration = deserializeAws_restXmlObjectLockConfiguration(data, context);\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetObjectLockConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetObjectRetentionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetObjectRetentionCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Retention: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.Retention = deserializeAws_restXmlObjectLockRetention(data, context);\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetObjectRetentionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetObjectTaggingCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetObjectTaggingCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            TagSet: undefined,\n            VersionId: undefined\n          };\n          if (output.headers[\"x-amz-version-id\"] !== undefined) {\n            contents.VersionId = output.headers[\"x-amz-version-id\"];\n          }\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.TagSet === \"\") {\n            contents.TagSet = [];\n          }\n          if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n            contents.TagSet = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetObjectTaggingCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetObjectTorrentCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return [2 /*return*/, deserializeAws_restXmlGetObjectTorrentCommandError(output, context)];\n      }\n      contents = {\n        $metadata: deserializeMetadata(output),\n        Body: undefined,\n        RequestCharged: undefined\n      };\n      if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n      }\n      data = output.body;\n      contents.Body = data;\n      return [2 /*return*/, Promise.resolve(contents)];\n    });\n  });\n};\nvar deserializeAws_restXmlGetObjectTorrentCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlGetPublicAccessBlockCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlGetPublicAccessBlockCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            PublicAccessBlockConfiguration: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.PublicAccessBlockConfiguration = deserializeAws_restXmlPublicAccessBlockConfiguration(data, context);\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlGetPublicAccessBlockCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlHeadBucketCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlHeadBucketCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlHeadBucketCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n    var _d;\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"NoSuchBucket\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.s3#NoSuchBucket\":\n              return [3 /*break*/, 2];\n          }\n          return [3 /*break*/, 4];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 5];\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlHeadObjectCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlHeadObjectCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            AcceptRanges: undefined,\n            ArchiveStatus: undefined,\n            BucketKeyEnabled: undefined,\n            CacheControl: undefined,\n            ContentDisposition: undefined,\n            ContentEncoding: undefined,\n            ContentLanguage: undefined,\n            ContentLength: undefined,\n            ContentType: undefined,\n            DeleteMarker: undefined,\n            ETag: undefined,\n            Expiration: undefined,\n            Expires: undefined,\n            LastModified: undefined,\n            Metadata: undefined,\n            MissingMeta: undefined,\n            ObjectLockLegalHoldStatus: undefined,\n            ObjectLockMode: undefined,\n            ObjectLockRetainUntilDate: undefined,\n            PartsCount: undefined,\n            ReplicationStatus: undefined,\n            RequestCharged: undefined,\n            Restore: undefined,\n            SSECustomerAlgorithm: undefined,\n            SSECustomerKeyMD5: undefined,\n            SSEKMSKeyId: undefined,\n            ServerSideEncryption: undefined,\n            StorageClass: undefined,\n            VersionId: undefined,\n            WebsiteRedirectLocation: undefined\n          };\n          if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n            contents.DeleteMarker = output.headers[\"x-amz-delete-marker\"] === \"true\";\n          }\n          if (output.headers[\"accept-ranges\"] !== undefined) {\n            contents.AcceptRanges = output.headers[\"accept-ranges\"];\n          }\n          if (output.headers[\"x-amz-expiration\"] !== undefined) {\n            contents.Expiration = output.headers[\"x-amz-expiration\"];\n          }\n          if (output.headers[\"x-amz-restore\"] !== undefined) {\n            contents.Restore = output.headers[\"x-amz-restore\"];\n          }\n          if (output.headers[\"x-amz-archive-status\"] !== undefined) {\n            contents.ArchiveStatus = output.headers[\"x-amz-archive-status\"];\n          }\n          if (output.headers[\"last-modified\"] !== undefined) {\n            contents.LastModified = new Date(output.headers[\"last-modified\"]);\n          }\n          if (output.headers[\"content-length\"] !== undefined) {\n            contents.ContentLength = parseInt(output.headers[\"content-length\"], 10);\n          }\n          if (output.headers[\"etag\"] !== undefined) {\n            contents.ETag = output.headers[\"etag\"];\n          }\n          if (output.headers[\"x-amz-missing-meta\"] !== undefined) {\n            contents.MissingMeta = parseInt(output.headers[\"x-amz-missing-meta\"], 10);\n          }\n          if (output.headers[\"x-amz-version-id\"] !== undefined) {\n            contents.VersionId = output.headers[\"x-amz-version-id\"];\n          }\n          if (output.headers[\"cache-control\"] !== undefined) {\n            contents.CacheControl = output.headers[\"cache-control\"];\n          }\n          if (output.headers[\"content-disposition\"] !== undefined) {\n            contents.ContentDisposition = output.headers[\"content-disposition\"];\n          }\n          if (output.headers[\"content-encoding\"] !== undefined) {\n            contents.ContentEncoding = output.headers[\"content-encoding\"];\n          }\n          if (output.headers[\"content-language\"] !== undefined) {\n            contents.ContentLanguage = output.headers[\"content-language\"];\n          }\n          if (output.headers[\"content-type\"] !== undefined) {\n            contents.ContentType = output.headers[\"content-type\"];\n          }\n          if (output.headers[\"expires\"] !== undefined) {\n            contents.Expires = new Date(output.headers[\"expires\"]);\n          }\n          if (output.headers[\"x-amz-website-redirect-location\"] !== undefined) {\n            contents.WebsiteRedirectLocation = output.headers[\"x-amz-website-redirect-location\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n            contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n            contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n            contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n            contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n            contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n          }\n          if (output.headers[\"x-amz-storage-class\"] !== undefined) {\n            contents.StorageClass = output.headers[\"x-amz-storage-class\"];\n          }\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          if (output.headers[\"x-amz-replication-status\"] !== undefined) {\n            contents.ReplicationStatus = output.headers[\"x-amz-replication-status\"];\n          }\n          if (output.headers[\"x-amz-mp-parts-count\"] !== undefined) {\n            contents.PartsCount = parseInt(output.headers[\"x-amz-mp-parts-count\"], 10);\n          }\n          if (output.headers[\"x-amz-object-lock-mode\"] !== undefined) {\n            contents.ObjectLockMode = output.headers[\"x-amz-object-lock-mode\"];\n          }\n          if (output.headers[\"x-amz-object-lock-retain-until-date\"] !== undefined) {\n            contents.ObjectLockRetainUntilDate = new Date(output.headers[\"x-amz-object-lock-retain-until-date\"]);\n          }\n          if (output.headers[\"x-amz-object-lock-legal-hold\"] !== undefined) {\n            contents.ObjectLockLegalHoldStatus = output.headers[\"x-amz-object-lock-legal-hold\"];\n          }\n          Object.keys(output.headers).forEach(function (header) {\n            if (contents.Metadata === undefined) {\n              contents.Metadata = {};\n            }\n            if (header.startsWith(\"x-amz-meta-\")) {\n              contents.Metadata[header.substring(11)] = output.headers[header];\n            }\n          });\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlHeadObjectCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n    var _d;\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"NoSuchKey\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.s3#NoSuchKey\":\n              return [3 /*break*/, 2];\n          }\n          return [3 /*break*/, 4];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 5];\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            AnalyticsConfigurationList: undefined,\n            ContinuationToken: undefined,\n            IsTruncated: undefined,\n            NextContinuationToken: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.AnalyticsConfiguration === \"\") {\n            contents.AnalyticsConfigurationList = [];\n          }\n          if (data[\"AnalyticsConfiguration\"] !== undefined) {\n            contents.AnalyticsConfigurationList = deserializeAws_restXmlAnalyticsConfigurationList(__getArrayIfSingleItem(data[\"AnalyticsConfiguration\"]), context);\n          }\n          if (data[\"ContinuationToken\"] !== undefined) {\n            contents.ContinuationToken = data[\"ContinuationToken\"];\n          }\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n          if (data[\"NextContinuationToken\"] !== undefined) {\n            contents.NextContinuationToken = data[\"NextContinuationToken\"];\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            ContinuationToken: undefined,\n            IntelligentTieringConfigurationList: undefined,\n            IsTruncated: undefined,\n            NextContinuationToken: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data[\"ContinuationToken\"] !== undefined) {\n            contents.ContinuationToken = data[\"ContinuationToken\"];\n          }\n          if (data.IntelligentTieringConfiguration === \"\") {\n            contents.IntelligentTieringConfigurationList = [];\n          }\n          if (data[\"IntelligentTieringConfiguration\"] !== undefined) {\n            contents.IntelligentTieringConfigurationList = deserializeAws_restXmlIntelligentTieringConfigurationList(__getArrayIfSingleItem(data[\"IntelligentTieringConfiguration\"]), context);\n          }\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n          if (data[\"NextContinuationToken\"] !== undefined) {\n            contents.NextContinuationToken = data[\"NextContinuationToken\"];\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlListBucketInventoryConfigurationsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlListBucketInventoryConfigurationsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            ContinuationToken: undefined,\n            InventoryConfigurationList: undefined,\n            IsTruncated: undefined,\n            NextContinuationToken: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data[\"ContinuationToken\"] !== undefined) {\n            contents.ContinuationToken = data[\"ContinuationToken\"];\n          }\n          if (data.InventoryConfiguration === \"\") {\n            contents.InventoryConfigurationList = [];\n          }\n          if (data[\"InventoryConfiguration\"] !== undefined) {\n            contents.InventoryConfigurationList = deserializeAws_restXmlInventoryConfigurationList(__getArrayIfSingleItem(data[\"InventoryConfiguration\"]), context);\n          }\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n          if (data[\"NextContinuationToken\"] !== undefined) {\n            contents.NextContinuationToken = data[\"NextContinuationToken\"];\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlListBucketInventoryConfigurationsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlListBucketMetricsConfigurationsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlListBucketMetricsConfigurationsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            ContinuationToken: undefined,\n            IsTruncated: undefined,\n            MetricsConfigurationList: undefined,\n            NextContinuationToken: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data[\"ContinuationToken\"] !== undefined) {\n            contents.ContinuationToken = data[\"ContinuationToken\"];\n          }\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n          if (data.MetricsConfiguration === \"\") {\n            contents.MetricsConfigurationList = [];\n          }\n          if (data[\"MetricsConfiguration\"] !== undefined) {\n            contents.MetricsConfigurationList = deserializeAws_restXmlMetricsConfigurationList(__getArrayIfSingleItem(data[\"MetricsConfiguration\"]), context);\n          }\n          if (data[\"NextContinuationToken\"] !== undefined) {\n            contents.NextContinuationToken = data[\"NextContinuationToken\"];\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlListBucketMetricsConfigurationsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlListBucketsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlListBucketsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Buckets: undefined,\n            Owner: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.Buckets === \"\") {\n            contents.Buckets = [];\n          }\n          if (data[\"Buckets\"] !== undefined && data[\"Buckets\"][\"Bucket\"] !== undefined) {\n            contents.Buckets = deserializeAws_restXmlBuckets(__getArrayIfSingleItem(data[\"Buckets\"][\"Bucket\"]), context);\n          }\n          if (data[\"Owner\"] !== undefined) {\n            contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlListBucketsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlListMultipartUploadsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlListMultipartUploadsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Bucket: undefined,\n            CommonPrefixes: undefined,\n            Delimiter: undefined,\n            EncodingType: undefined,\n            IsTruncated: undefined,\n            KeyMarker: undefined,\n            MaxUploads: undefined,\n            NextKeyMarker: undefined,\n            NextUploadIdMarker: undefined,\n            Prefix: undefined,\n            UploadIdMarker: undefined,\n            Uploads: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data[\"Bucket\"] !== undefined) {\n            contents.Bucket = data[\"Bucket\"];\n          }\n          if (data.CommonPrefixes === \"\") {\n            contents.CommonPrefixes = [];\n          }\n          if (data[\"CommonPrefixes\"] !== undefined) {\n            contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n          }\n          if (data[\"Delimiter\"] !== undefined) {\n            contents.Delimiter = data[\"Delimiter\"];\n          }\n          if (data[\"EncodingType\"] !== undefined) {\n            contents.EncodingType = data[\"EncodingType\"];\n          }\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n          if (data[\"KeyMarker\"] !== undefined) {\n            contents.KeyMarker = data[\"KeyMarker\"];\n          }\n          if (data[\"MaxUploads\"] !== undefined) {\n            contents.MaxUploads = parseInt(data[\"MaxUploads\"]);\n          }\n          if (data[\"NextKeyMarker\"] !== undefined) {\n            contents.NextKeyMarker = data[\"NextKeyMarker\"];\n          }\n          if (data[\"NextUploadIdMarker\"] !== undefined) {\n            contents.NextUploadIdMarker = data[\"NextUploadIdMarker\"];\n          }\n          if (data[\"Prefix\"] !== undefined) {\n            contents.Prefix = data[\"Prefix\"];\n          }\n          if (data[\"UploadIdMarker\"] !== undefined) {\n            contents.UploadIdMarker = data[\"UploadIdMarker\"];\n          }\n          if (data.Upload === \"\") {\n            contents.Uploads = [];\n          }\n          if (data[\"Upload\"] !== undefined) {\n            contents.Uploads = deserializeAws_restXmlMultipartUploadList(__getArrayIfSingleItem(data[\"Upload\"]), context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlListMultipartUploadsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlListObjectsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlListObjectsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CommonPrefixes: undefined,\n            Contents: undefined,\n            Delimiter: undefined,\n            EncodingType: undefined,\n            IsTruncated: undefined,\n            Marker: undefined,\n            MaxKeys: undefined,\n            Name: undefined,\n            NextMarker: undefined,\n            Prefix: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.CommonPrefixes === \"\") {\n            contents.CommonPrefixes = [];\n          }\n          if (data[\"CommonPrefixes\"] !== undefined) {\n            contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n          }\n          if (data.Contents === \"\") {\n            contents.Contents = [];\n          }\n          if (data[\"Contents\"] !== undefined) {\n            contents.Contents = deserializeAws_restXmlObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n          }\n          if (data[\"Delimiter\"] !== undefined) {\n            contents.Delimiter = data[\"Delimiter\"];\n          }\n          if (data[\"EncodingType\"] !== undefined) {\n            contents.EncodingType = data[\"EncodingType\"];\n          }\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n          if (data[\"Marker\"] !== undefined) {\n            contents.Marker = data[\"Marker\"];\n          }\n          if (data[\"MaxKeys\"] !== undefined) {\n            contents.MaxKeys = parseInt(data[\"MaxKeys\"]);\n          }\n          if (data[\"Name\"] !== undefined) {\n            contents.Name = data[\"Name\"];\n          }\n          if (data[\"NextMarker\"] !== undefined) {\n            contents.NextMarker = data[\"NextMarker\"];\n          }\n          if (data[\"Prefix\"] !== undefined) {\n            contents.Prefix = data[\"Prefix\"];\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlListObjectsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n    var _d;\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"NoSuchBucket\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.s3#NoSuchBucket\":\n              return [3 /*break*/, 2];\n          }\n          return [3 /*break*/, 4];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 5];\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlListObjectsV2Command = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlListObjectsV2CommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CommonPrefixes: undefined,\n            Contents: undefined,\n            ContinuationToken: undefined,\n            Delimiter: undefined,\n            EncodingType: undefined,\n            IsTruncated: undefined,\n            KeyCount: undefined,\n            MaxKeys: undefined,\n            Name: undefined,\n            NextContinuationToken: undefined,\n            Prefix: undefined,\n            StartAfter: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.CommonPrefixes === \"\") {\n            contents.CommonPrefixes = [];\n          }\n          if (data[\"CommonPrefixes\"] !== undefined) {\n            contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n          }\n          if (data.Contents === \"\") {\n            contents.Contents = [];\n          }\n          if (data[\"Contents\"] !== undefined) {\n            contents.Contents = deserializeAws_restXmlObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n          }\n          if (data[\"ContinuationToken\"] !== undefined) {\n            contents.ContinuationToken = data[\"ContinuationToken\"];\n          }\n          if (data[\"Delimiter\"] !== undefined) {\n            contents.Delimiter = data[\"Delimiter\"];\n          }\n          if (data[\"EncodingType\"] !== undefined) {\n            contents.EncodingType = data[\"EncodingType\"];\n          }\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n          if (data[\"KeyCount\"] !== undefined) {\n            contents.KeyCount = parseInt(data[\"KeyCount\"]);\n          }\n          if (data[\"MaxKeys\"] !== undefined) {\n            contents.MaxKeys = parseInt(data[\"MaxKeys\"]);\n          }\n          if (data[\"Name\"] !== undefined) {\n            contents.Name = data[\"Name\"];\n          }\n          if (data[\"NextContinuationToken\"] !== undefined) {\n            contents.NextContinuationToken = data[\"NextContinuationToken\"];\n          }\n          if (data[\"Prefix\"] !== undefined) {\n            contents.Prefix = data[\"Prefix\"];\n          }\n          if (data[\"StartAfter\"] !== undefined) {\n            contents.StartAfter = data[\"StartAfter\"];\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlListObjectsV2CommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n    var _d;\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"NoSuchBucket\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.s3#NoSuchBucket\":\n              return [3 /*break*/, 2];\n          }\n          return [3 /*break*/, 4];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 5];\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlListObjectVersionsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlListObjectVersionsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CommonPrefixes: undefined,\n            DeleteMarkers: undefined,\n            Delimiter: undefined,\n            EncodingType: undefined,\n            IsTruncated: undefined,\n            KeyMarker: undefined,\n            MaxKeys: undefined,\n            Name: undefined,\n            NextKeyMarker: undefined,\n            NextVersionIdMarker: undefined,\n            Prefix: undefined,\n            VersionIdMarker: undefined,\n            Versions: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.CommonPrefixes === \"\") {\n            contents.CommonPrefixes = [];\n          }\n          if (data[\"CommonPrefixes\"] !== undefined) {\n            contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n          }\n          if (data.DeleteMarker === \"\") {\n            contents.DeleteMarkers = [];\n          }\n          if (data[\"DeleteMarker\"] !== undefined) {\n            contents.DeleteMarkers = deserializeAws_restXmlDeleteMarkers(__getArrayIfSingleItem(data[\"DeleteMarker\"]), context);\n          }\n          if (data[\"Delimiter\"] !== undefined) {\n            contents.Delimiter = data[\"Delimiter\"];\n          }\n          if (data[\"EncodingType\"] !== undefined) {\n            contents.EncodingType = data[\"EncodingType\"];\n          }\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n          if (data[\"KeyMarker\"] !== undefined) {\n            contents.KeyMarker = data[\"KeyMarker\"];\n          }\n          if (data[\"MaxKeys\"] !== undefined) {\n            contents.MaxKeys = parseInt(data[\"MaxKeys\"]);\n          }\n          if (data[\"Name\"] !== undefined) {\n            contents.Name = data[\"Name\"];\n          }\n          if (data[\"NextKeyMarker\"] !== undefined) {\n            contents.NextKeyMarker = data[\"NextKeyMarker\"];\n          }\n          if (data[\"NextVersionIdMarker\"] !== undefined) {\n            contents.NextVersionIdMarker = data[\"NextVersionIdMarker\"];\n          }\n          if (data[\"Prefix\"] !== undefined) {\n            contents.Prefix = data[\"Prefix\"];\n          }\n          if (data[\"VersionIdMarker\"] !== undefined) {\n            contents.VersionIdMarker = data[\"VersionIdMarker\"];\n          }\n          if (data.Version === \"\") {\n            contents.Versions = [];\n          }\n          if (data[\"Version\"] !== undefined) {\n            contents.Versions = deserializeAws_restXmlObjectVersionList(__getArrayIfSingleItem(data[\"Version\"]), context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlListObjectVersionsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlListPartsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlListPartsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            AbortDate: undefined,\n            AbortRuleId: undefined,\n            Bucket: undefined,\n            Initiator: undefined,\n            IsTruncated: undefined,\n            Key: undefined,\n            MaxParts: undefined,\n            NextPartNumberMarker: undefined,\n            Owner: undefined,\n            PartNumberMarker: undefined,\n            Parts: undefined,\n            RequestCharged: undefined,\n            StorageClass: undefined,\n            UploadId: undefined\n          };\n          if (output.headers[\"x-amz-abort-date\"] !== undefined) {\n            contents.AbortDate = new Date(output.headers[\"x-amz-abort-date\"]);\n          }\n          if (output.headers[\"x-amz-abort-rule-id\"] !== undefined) {\n            contents.AbortRuleId = output.headers[\"x-amz-abort-rule-id\"];\n          }\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data[\"Bucket\"] !== undefined) {\n            contents.Bucket = data[\"Bucket\"];\n          }\n          if (data[\"Initiator\"] !== undefined) {\n            contents.Initiator = deserializeAws_restXmlInitiator(data[\"Initiator\"], context);\n          }\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n          if (data[\"Key\"] !== undefined) {\n            contents.Key = data[\"Key\"];\n          }\n          if (data[\"MaxParts\"] !== undefined) {\n            contents.MaxParts = parseInt(data[\"MaxParts\"]);\n          }\n          if (data[\"NextPartNumberMarker\"] !== undefined) {\n            contents.NextPartNumberMarker = data[\"NextPartNumberMarker\"];\n          }\n          if (data[\"Owner\"] !== undefined) {\n            contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n          }\n          if (data[\"PartNumberMarker\"] !== undefined) {\n            contents.PartNumberMarker = data[\"PartNumberMarker\"];\n          }\n          if (data.Part === \"\") {\n            contents.Parts = [];\n          }\n          if (data[\"Part\"] !== undefined) {\n            contents.Parts = deserializeAws_restXmlParts(__getArrayIfSingleItem(data[\"Part\"]), context);\n          }\n          if (data[\"StorageClass\"] !== undefined) {\n            contents.StorageClass = data[\"StorageClass\"];\n          }\n          if (data[\"UploadId\"] !== undefined) {\n            contents.UploadId = data[\"UploadId\"];\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlListPartsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketAclCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketAclCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketAclCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketCorsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketCorsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketCorsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketEncryptionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketEncryptionCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketEncryptionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketInventoryConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketInventoryConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketInventoryConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketLoggingCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketLoggingCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketLoggingCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketMetricsConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketMetricsConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketMetricsConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketNotificationConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketNotificationConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketNotificationConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketOwnershipControlsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketOwnershipControlsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketOwnershipControlsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketPolicyCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketPolicyCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketPolicyCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketReplicationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketReplicationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketReplicationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketRequestPaymentCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketRequestPaymentCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketRequestPaymentCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketTaggingCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketTaggingCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketTaggingCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketVersioningCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketVersioningCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketVersioningCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutBucketWebsiteCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutBucketWebsiteCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutBucketWebsiteCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutObjectCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutObjectCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            BucketKeyEnabled: undefined,\n            ETag: undefined,\n            Expiration: undefined,\n            RequestCharged: undefined,\n            SSECustomerAlgorithm: undefined,\n            SSECustomerKeyMD5: undefined,\n            SSEKMSEncryptionContext: undefined,\n            SSEKMSKeyId: undefined,\n            ServerSideEncryption: undefined,\n            VersionId: undefined\n          };\n          if (output.headers[\"x-amz-expiration\"] !== undefined) {\n            contents.Expiration = output.headers[\"x-amz-expiration\"];\n          }\n          if (output.headers[\"etag\"] !== undefined) {\n            contents.ETag = output.headers[\"etag\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n            contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n          }\n          if (output.headers[\"x-amz-version-id\"] !== undefined) {\n            contents.VersionId = output.headers[\"x-amz-version-id\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n            contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n            contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n            contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n            contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n            contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n          }\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutObjectCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutObjectAclCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutObjectAclCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            RequestCharged: undefined\n          };\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutObjectAclCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n    var _d;\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"NoSuchKey\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.s3#NoSuchKey\":\n              return [3 /*break*/, 2];\n          }\n          return [3 /*break*/, 4];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 5];\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutObjectLegalHoldCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutObjectLegalHoldCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            RequestCharged: undefined\n          };\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutObjectLegalHoldCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutObjectLockConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutObjectLockConfigurationCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            RequestCharged: undefined\n          };\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutObjectLockConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutObjectRetentionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutObjectRetentionCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            RequestCharged: undefined\n          };\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutObjectRetentionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutObjectTaggingCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutObjectTaggingCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            VersionId: undefined\n          };\n          if (output.headers[\"x-amz-version-id\"] !== undefined) {\n            contents.VersionId = output.headers[\"x-amz-version-id\"];\n          }\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutObjectTaggingCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlPutPublicAccessBlockCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlPutPublicAccessBlockCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlPutPublicAccessBlockCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlRestoreObjectCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlRestoreObjectCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            RequestCharged: undefined,\n            RestoreOutputPath: undefined\n          };\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          if (output.headers[\"x-amz-restore-output-path\"] !== undefined) {\n            contents.RestoreOutputPath = output.headers[\"x-amz-restore-output-path\"];\n          }\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlRestoreObjectCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n    var _d;\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"ObjectAlreadyInActiveTierError\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.s3#ObjectAlreadyInActiveTierError\":\n              return [3 /*break*/, 2];\n          }\n          return [3 /*break*/, 4];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 5];\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlSelectObjectContentCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return [2 /*return*/, deserializeAws_restXmlSelectObjectContentCommandError(output, context)];\n      }\n      contents = {\n        $metadata: deserializeMetadata(output),\n        Payload: undefined\n      };\n      data = context.eventStreamMarshaller.deserialize(output.body, function (event) {\n        return __awaiter(void 0, void 0, void 0, function () {\n          var eventName, eventHeaders, eventMessage, parsedEvent;\n          var _a;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                eventName = Object.keys(event)[0];\n                eventHeaders = Object.entries(event[eventName].headers).reduce(function (accummulator, curr) {\n                  accummulator[curr[0]] = curr[1].value;\n                  return accummulator;\n                }, {});\n                eventMessage = {\n                  headers: eventHeaders,\n                  body: event[eventName].body\n                };\n                parsedEvent = (_a = {}, _a[eventName] = eventMessage, _a);\n                return [4 /*yield*/, deserializeAws_restXmlSelectObjectContentEventStream_event(parsedEvent, context)];\n              case 1:\n                return [2 /*return*/, _b.sent()];\n            }\n          });\n        });\n      });\n      contents.Payload = data;\n      return [2 /*return*/, Promise.resolve(contents)];\n    });\n  });\n};\nvar deserializeAws_restXmlSelectObjectContentCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlUploadPartCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlUploadPartCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            BucketKeyEnabled: undefined,\n            ETag: undefined,\n            RequestCharged: undefined,\n            SSECustomerAlgorithm: undefined,\n            SSECustomerKeyMD5: undefined,\n            SSEKMSKeyId: undefined,\n            ServerSideEncryption: undefined\n          };\n          if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n            contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n          }\n          if (output.headers[\"etag\"] !== undefined) {\n            contents.ETag = output.headers[\"etag\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n            contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n            contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n            contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n            contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n          }\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlUploadPartCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlUploadPartCopyCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restXmlUploadPartCopyCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            BucketKeyEnabled: undefined,\n            CopyPartResult: undefined,\n            CopySourceVersionId: undefined,\n            RequestCharged: undefined,\n            SSECustomerAlgorithm: undefined,\n            SSECustomerKeyMD5: undefined,\n            SSEKMSKeyId: undefined,\n            ServerSideEncryption: undefined\n          };\n          if (output.headers[\"x-amz-copy-source-version-id\"] !== undefined) {\n            contents.CopySourceVersionId = output.headers[\"x-amz-copy-source-version-id\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n            contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n            contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n            contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n            contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n          }\n          if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n            contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n          }\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.CopyPartResult = deserializeAws_restXmlCopyPartResult(data, context);\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlUploadPartCopyCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlSelectObjectContentEventStream_event = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, _b, _c, _d, _e;\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          if (!(output[\"Records\"] !== undefined)) return [3 /*break*/, 2];\n          _a = {};\n          return [4 /*yield*/, deserializeAws_restXmlRecordsEvent_event(output[\"Records\"], context)];\n        case 1:\n          return [2 /*return*/, (_a.Records = _f.sent(), _a)];\n        case 2:\n          if (!(output[\"Stats\"] !== undefined)) return [3 /*break*/, 4];\n          _b = {};\n          return [4 /*yield*/, deserializeAws_restXmlStatsEvent_event(output[\"Stats\"], context)];\n        case 3:\n          return [2 /*return*/, (_b.Stats = _f.sent(), _b)];\n        case 4:\n          if (!(output[\"Progress\"] !== undefined)) return [3 /*break*/, 6];\n          _c = {};\n          return [4 /*yield*/, deserializeAws_restXmlProgressEvent_event(output[\"Progress\"], context)];\n        case 5:\n          return [2 /*return*/, (_c.Progress = _f.sent(), _c)];\n        case 6:\n          if (!(output[\"Cont\"] !== undefined)) return [3 /*break*/, 8];\n          _d = {};\n          return [4 /*yield*/, deserializeAws_restXmlContinuationEvent_event(output[\"Cont\"], context)];\n        case 7:\n          return [2 /*return*/, (_d.Cont = _f.sent(), _d)];\n        case 8:\n          if (!(output[\"End\"] !== undefined)) return [3 /*break*/, 10];\n          _e = {};\n          return [4 /*yield*/, deserializeAws_restXmlEndEvent_event(output[\"End\"], context)];\n        case 9:\n          return [2 /*return*/, (_e.End = _f.sent(), _e)];\n        case 10:\n          return [2 /*return*/, {\n            $unknown: output\n          }];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlContinuationEvent_event = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      contents = {};\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restXmlEndEvent_event = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      contents = {};\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restXmlProgressEvent_event = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, _a;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          contents = {};\n          _a = contents;\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          _a.Details = _b.sent();\n          return [2 /*return*/, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlRecordsEvent_event = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      contents = {};\n      contents.Payload = output.body;\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restXmlStatsEvent_event = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, _a;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          contents = {};\n          _a = contents;\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          _a.Details = _b.sent();\n          return [2 /*return*/, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restXmlBucketAlreadyExistsResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"BucketAlreadyExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput)\n      };\n      data = parsedOutput.body;\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restXmlBucketAlreadyOwnedByYouResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"BucketAlreadyOwnedByYou\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput)\n      };\n      data = parsedOutput.body;\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restXmlInvalidObjectStateResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidObjectState\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        AccessTier: undefined,\n        StorageClass: undefined\n      };\n      data = parsedOutput.body;\n      if (data[\"AccessTier\"] !== undefined) {\n        contents.AccessTier = data[\"AccessTier\"];\n      }\n      if (data[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = data[\"StorageClass\"];\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restXmlNoSuchBucketResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"NoSuchBucket\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput)\n      };\n      data = parsedOutput.body;\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restXmlNoSuchKeyResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"NoSuchKey\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput)\n      };\n      data = parsedOutput.body;\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restXmlNoSuchUploadResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"NoSuchUpload\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput)\n      };\n      data = parsedOutput.body;\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ObjectAlreadyInActiveTierError\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput)\n      };\n      data = parsedOutput.body;\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restXmlObjectNotInActiveTierErrorResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ObjectNotInActiveTierError\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput)\n      };\n      data = parsedOutput.body;\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar serializeAws_restXmlAbortIncompleteMultipartUpload = function (input, context) {\n  var bodyNode = new __XmlNode(\"AbortIncompleteMultipartUpload\");\n  if (input.DaysAfterInitiation !== undefined && input.DaysAfterInitiation !== null) {\n    var node = new __XmlNode(\"DaysAfterInitiation\").addChildNode(new __XmlText(String(input.DaysAfterInitiation))).withName(\"DaysAfterInitiation\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlAccelerateConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"AccelerateConfiguration\");\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"BucketAccelerateStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlAccessControlPolicy = function (input, context) {\n  var bodyNode = new __XmlNode(\"AccessControlPolicy\");\n  if (input.Grants !== undefined && input.Grants !== null) {\n    var nodes = serializeAws_restXmlGrants(input.Grants, context);\n    var containerNode_1 = new __XmlNode(\"AccessControlList\");\n    nodes.map(function (node) {\n      containerNode_1.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode_1);\n  }\n  if (input.Owner !== undefined && input.Owner !== null) {\n    var node = serializeAws_restXmlOwner(input.Owner, context).withName(\"Owner\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlAccessControlTranslation = function (input, context) {\n  var bodyNode = new __XmlNode(\"AccessControlTranslation\");\n  if (input.Owner !== undefined && input.Owner !== null) {\n    var node = new __XmlNode(\"OwnerOverride\").addChildNode(new __XmlText(input.Owner)).withName(\"Owner\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlAllowedHeaders = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = new __XmlNode(\"AllowedHeader\").addChildNode(new __XmlText(entry));\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlAllowedMethods = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = new __XmlNode(\"AllowedMethod\").addChildNode(new __XmlText(entry));\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlAllowedOrigins = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = new __XmlNode(\"AllowedOrigin\").addChildNode(new __XmlText(entry));\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlAnalyticsAndOperator = function (input, context) {\n  var bodyNode = new __XmlNode(\"AnalyticsAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    var nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlAnalyticsConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"AnalyticsConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    var node = new __XmlNode(\"AnalyticsId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlAnalyticsFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClassAnalysis !== undefined && input.StorageClassAnalysis !== null) {\n    var node = serializeAws_restXmlStorageClassAnalysis(input.StorageClassAnalysis, context).withName(\"StorageClassAnalysis\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlAnalyticsExportDestination = function (input, context) {\n  var bodyNode = new __XmlNode(\"AnalyticsExportDestination\");\n  if (input.S3BucketDestination !== undefined && input.S3BucketDestination !== null) {\n    var node = serializeAws_restXmlAnalyticsS3BucketDestination(input.S3BucketDestination, context).withName(\"S3BucketDestination\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlAnalyticsFilter = function (input, context) {\n  var bodyNode = new __XmlNode(\"AnalyticsFilter\");\n  AnalyticsFilter.visit(input, {\n    Prefix: function (value) {\n      var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: function (value) {\n      var node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: function (value) {\n      var node = serializeAws_restXmlAnalyticsAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: function (name, value) {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    }\n  });\n  return bodyNode;\n};\nvar serializeAws_restXmlAnalyticsS3BucketDestination = function (input, context) {\n  var bodyNode = new __XmlNode(\"AnalyticsS3BucketDestination\");\n  if (input.Format !== undefined && input.Format !== null) {\n    var node = new __XmlNode(\"AnalyticsS3ExportFileFormat\").addChildNode(new __XmlText(input.Format)).withName(\"Format\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BucketAccountId !== undefined && input.BucketAccountId !== null) {\n    var node = new __XmlNode(\"AccountId\").addChildNode(new __XmlText(input.BucketAccountId)).withName(\"BucketAccountId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Bucket !== undefined && input.Bucket !== null) {\n    var node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.Bucket)).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlBucketLifecycleConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"BucketLifecycleConfiguration\");\n  if (input.Rules !== undefined && input.Rules !== null) {\n    var nodes = serializeAws_restXmlLifecycleRules(input.Rules, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlBucketLoggingStatus = function (input, context) {\n  var bodyNode = new __XmlNode(\"BucketLoggingStatus\");\n  if (input.LoggingEnabled !== undefined && input.LoggingEnabled !== null) {\n    var node = serializeAws_restXmlLoggingEnabled(input.LoggingEnabled, context).withName(\"LoggingEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlCompletedMultipartUpload = function (input, context) {\n  var bodyNode = new __XmlNode(\"CompletedMultipartUpload\");\n  if (input.Parts !== undefined && input.Parts !== null) {\n    var nodes = serializeAws_restXmlCompletedPartList(input.Parts, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Part\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlCompletedPart = function (input, context) {\n  var bodyNode = new __XmlNode(\"CompletedPart\");\n  if (input.ETag !== undefined && input.ETag !== null) {\n    var node = new __XmlNode(\"ETag\").addChildNode(new __XmlText(input.ETag)).withName(\"ETag\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.PartNumber !== undefined && input.PartNumber !== null) {\n    var node = new __XmlNode(\"PartNumber\").addChildNode(new __XmlText(String(input.PartNumber))).withName(\"PartNumber\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlCompletedPartList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlCompletedPart(entry, context);\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlCondition = function (input, context) {\n  var bodyNode = new __XmlNode(\"Condition\");\n  if (input.HttpErrorCodeReturnedEquals !== undefined && input.HttpErrorCodeReturnedEquals !== null) {\n    var node = new __XmlNode(\"HttpErrorCodeReturnedEquals\").addChildNode(new __XmlText(input.HttpErrorCodeReturnedEquals)).withName(\"HttpErrorCodeReturnedEquals\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KeyPrefixEquals !== undefined && input.KeyPrefixEquals !== null) {\n    var node = new __XmlNode(\"KeyPrefixEquals\").addChildNode(new __XmlText(input.KeyPrefixEquals)).withName(\"KeyPrefixEquals\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlCORSConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"CORSConfiguration\");\n  if (input.CORSRules !== undefined && input.CORSRules !== null) {\n    var nodes = serializeAws_restXmlCORSRules(input.CORSRules, context);\n    nodes.map(function (node) {\n      node = node.withName(\"CORSRule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlCORSRule = function (input, context) {\n  var bodyNode = new __XmlNode(\"CORSRule\");\n  if (input.AllowedHeaders !== undefined && input.AllowedHeaders !== null) {\n    var nodes = serializeAws_restXmlAllowedHeaders(input.AllowedHeaders, context);\n    nodes.map(function (node) {\n      node = node.withName(\"AllowedHeader\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.AllowedMethods !== undefined && input.AllowedMethods !== null) {\n    var nodes = serializeAws_restXmlAllowedMethods(input.AllowedMethods, context);\n    nodes.map(function (node) {\n      node = node.withName(\"AllowedMethod\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.AllowedOrigins !== undefined && input.AllowedOrigins !== null) {\n    var nodes = serializeAws_restXmlAllowedOrigins(input.AllowedOrigins, context);\n    nodes.map(function (node) {\n      node = node.withName(\"AllowedOrigin\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.ExposeHeaders !== undefined && input.ExposeHeaders !== null) {\n    var nodes = serializeAws_restXmlExposeHeaders(input.ExposeHeaders, context);\n    nodes.map(function (node) {\n      node = node.withName(\"ExposeHeader\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.MaxAgeSeconds !== undefined && input.MaxAgeSeconds !== null) {\n    var node = new __XmlNode(\"MaxAgeSeconds\").addChildNode(new __XmlText(String(input.MaxAgeSeconds))).withName(\"MaxAgeSeconds\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlCORSRules = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlCORSRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlCreateBucketConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"CreateBucketConfiguration\");\n  if (input.LocationConstraint !== undefined && input.LocationConstraint !== null) {\n    var node = new __XmlNode(\"BucketLocationConstraint\").addChildNode(new __XmlText(input.LocationConstraint)).withName(\"LocationConstraint\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlCSVInput = function (input, context) {\n  var bodyNode = new __XmlNode(\"CSVInput\");\n  if (input.FileHeaderInfo !== undefined && input.FileHeaderInfo !== null) {\n    var node = new __XmlNode(\"FileHeaderInfo\").addChildNode(new __XmlText(input.FileHeaderInfo)).withName(\"FileHeaderInfo\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Comments !== undefined && input.Comments !== null) {\n    var node = new __XmlNode(\"Comments\").addChildNode(new __XmlText(input.Comments)).withName(\"Comments\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteEscapeCharacter !== undefined && input.QuoteEscapeCharacter !== null) {\n    var node = new __XmlNode(\"QuoteEscapeCharacter\").addChildNode(new __XmlText(input.QuoteEscapeCharacter)).withName(\"QuoteEscapeCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n    var node = new __XmlNode(\"RecordDelimiter\").addChildNode(new __XmlText(input.RecordDelimiter)).withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.FieldDelimiter !== undefined && input.FieldDelimiter !== null) {\n    var node = new __XmlNode(\"FieldDelimiter\").addChildNode(new __XmlText(input.FieldDelimiter)).withName(\"FieldDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteCharacter !== undefined && input.QuoteCharacter !== null) {\n    var node = new __XmlNode(\"QuoteCharacter\").addChildNode(new __XmlText(input.QuoteCharacter)).withName(\"QuoteCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AllowQuotedRecordDelimiter !== undefined && input.AllowQuotedRecordDelimiter !== null) {\n    var node = new __XmlNode(\"AllowQuotedRecordDelimiter\").addChildNode(new __XmlText(String(input.AllowQuotedRecordDelimiter))).withName(\"AllowQuotedRecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlCSVOutput = function (input, context) {\n  var bodyNode = new __XmlNode(\"CSVOutput\");\n  if (input.QuoteFields !== undefined && input.QuoteFields !== null) {\n    var node = new __XmlNode(\"QuoteFields\").addChildNode(new __XmlText(input.QuoteFields)).withName(\"QuoteFields\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteEscapeCharacter !== undefined && input.QuoteEscapeCharacter !== null) {\n    var node = new __XmlNode(\"QuoteEscapeCharacter\").addChildNode(new __XmlText(input.QuoteEscapeCharacter)).withName(\"QuoteEscapeCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n    var node = new __XmlNode(\"RecordDelimiter\").addChildNode(new __XmlText(input.RecordDelimiter)).withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.FieldDelimiter !== undefined && input.FieldDelimiter !== null) {\n    var node = new __XmlNode(\"FieldDelimiter\").addChildNode(new __XmlText(input.FieldDelimiter)).withName(\"FieldDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteCharacter !== undefined && input.QuoteCharacter !== null) {\n    var node = new __XmlNode(\"QuoteCharacter\").addChildNode(new __XmlText(input.QuoteCharacter)).withName(\"QuoteCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlDefaultRetention = function (input, context) {\n  var bodyNode = new __XmlNode(\"DefaultRetention\");\n  if (input.Mode !== undefined && input.Mode !== null) {\n    var node = new __XmlNode(\"ObjectLockRetentionMode\").addChildNode(new __XmlText(input.Mode)).withName(\"Mode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days !== undefined && input.Days !== null) {\n    var node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Years !== undefined && input.Years !== null) {\n    var node = new __XmlNode(\"Years\").addChildNode(new __XmlText(String(input.Years))).withName(\"Years\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlDelete = function (input, context) {\n  var bodyNode = new __XmlNode(\"Delete\");\n  if (input.Objects !== undefined && input.Objects !== null) {\n    var nodes = serializeAws_restXmlObjectIdentifierList(input.Objects, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Object\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Quiet !== undefined && input.Quiet !== null) {\n    var node = new __XmlNode(\"Quiet\").addChildNode(new __XmlText(String(input.Quiet))).withName(\"Quiet\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlDeleteMarkerReplication = function (input, context) {\n  var bodyNode = new __XmlNode(\"DeleteMarkerReplication\");\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"DeleteMarkerReplicationStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlDestination = function (input, context) {\n  var bodyNode = new __XmlNode(\"Destination\");\n  if (input.Bucket !== undefined && input.Bucket !== null) {\n    var node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.Bucket)).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Account !== undefined && input.Account !== null) {\n    var node = new __XmlNode(\"AccountId\").addChildNode(new __XmlText(input.Account)).withName(\"Account\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    var node = new __XmlNode(\"StorageClass\").addChildNode(new __XmlText(input.StorageClass)).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessControlTranslation !== undefined && input.AccessControlTranslation !== null) {\n    var node = serializeAws_restXmlAccessControlTranslation(input.AccessControlTranslation, context).withName(\"AccessControlTranslation\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.EncryptionConfiguration !== undefined && input.EncryptionConfiguration !== null) {\n    var node = serializeAws_restXmlEncryptionConfiguration(input.EncryptionConfiguration, context).withName(\"EncryptionConfiguration\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplicationTime !== undefined && input.ReplicationTime !== null) {\n    var node = serializeAws_restXmlReplicationTime(input.ReplicationTime, context).withName(\"ReplicationTime\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Metrics !== undefined && input.Metrics !== null) {\n    var node = serializeAws_restXmlMetrics(input.Metrics, context).withName(\"Metrics\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlEncryption = function (input, context) {\n  var bodyNode = new __XmlNode(\"Encryption\");\n  if (input.EncryptionType !== undefined && input.EncryptionType !== null) {\n    var node = new __XmlNode(\"ServerSideEncryption\").addChildNode(new __XmlText(input.EncryptionType)).withName(\"EncryptionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSKeyId !== undefined && input.KMSKeyId !== null) {\n    var node = new __XmlNode(\"SSEKMSKeyId\").addChildNode(new __XmlText(input.KMSKeyId)).withName(\"KMSKeyId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSContext !== undefined && input.KMSContext !== null) {\n    var node = new __XmlNode(\"KMSContext\").addChildNode(new __XmlText(input.KMSContext)).withName(\"KMSContext\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlEncryptionConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"EncryptionConfiguration\");\n  if (input.ReplicaKmsKeyID !== undefined && input.ReplicaKmsKeyID !== null) {\n    var node = new __XmlNode(\"ReplicaKmsKeyID\").addChildNode(new __XmlText(input.ReplicaKmsKeyID)).withName(\"ReplicaKmsKeyID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlErrorDocument = function (input, context) {\n  var bodyNode = new __XmlNode(\"ErrorDocument\");\n  if (input.Key !== undefined && input.Key !== null) {\n    var node = new __XmlNode(\"ObjectKey\").addChildNode(new __XmlText(input.Key)).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlEventList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = new __XmlNode(\"Event\").addChildNode(new __XmlText(entry));\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlExistingObjectReplication = function (input, context) {\n  var bodyNode = new __XmlNode(\"ExistingObjectReplication\");\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"ExistingObjectReplicationStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlExposeHeaders = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = new __XmlNode(\"ExposeHeader\").addChildNode(new __XmlText(entry));\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlFilterRule = function (input, context) {\n  var bodyNode = new __XmlNode(\"FilterRule\");\n  if (input.Name !== undefined && input.Name !== null) {\n    var node = new __XmlNode(\"FilterRuleName\").addChildNode(new __XmlText(input.Name)).withName(\"Name\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value !== undefined && input.Value !== null) {\n    var node = new __XmlNode(\"FilterRuleValue\").addChildNode(new __XmlText(input.Value)).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlFilterRuleList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlFilterRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlGlacierJobParameters = function (input, context) {\n  var bodyNode = new __XmlNode(\"GlacierJobParameters\");\n  if (input.Tier !== undefined && input.Tier !== null) {\n    var node = new __XmlNode(\"Tier\").addChildNode(new __XmlText(input.Tier)).withName(\"Tier\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlGrant = function (input, context) {\n  var bodyNode = new __XmlNode(\"Grant\");\n  if (input.Grantee !== undefined && input.Grantee !== null) {\n    var node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Permission !== undefined && input.Permission !== null) {\n    var node = new __XmlNode(\"Permission\").addChildNode(new __XmlText(input.Permission)).withName(\"Permission\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlGrantee = function (input, context) {\n  var bodyNode = new __XmlNode(\"Grantee\");\n  if (input.DisplayName !== undefined && input.DisplayName !== null) {\n    var node = new __XmlNode(\"DisplayName\").addChildNode(new __XmlText(input.DisplayName)).withName(\"DisplayName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.EmailAddress !== undefined && input.EmailAddress !== null) {\n    var node = new __XmlNode(\"EmailAddress\").addChildNode(new __XmlText(input.EmailAddress)).withName(\"EmailAddress\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID !== undefined && input.ID !== null) {\n    var node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.URI !== undefined && input.URI !== null) {\n    var node = new __XmlNode(\"URI\").addChildNode(new __XmlText(input.URI)).withName(\"URI\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Type !== undefined && input.Type !== null) {\n    bodyNode.addAttribute(\"xsi:type\", input.Type);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlGrants = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlGrant(entry, context);\n    return node.withName(\"Grant\");\n  });\n};\nvar serializeAws_restXmlIndexDocument = function (input, context) {\n  var bodyNode = new __XmlNode(\"IndexDocument\");\n  if (input.Suffix !== undefined && input.Suffix !== null) {\n    var node = new __XmlNode(\"Suffix\").addChildNode(new __XmlText(input.Suffix)).withName(\"Suffix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlInputSerialization = function (input, context) {\n  var bodyNode = new __XmlNode(\"InputSerialization\");\n  if (input.CSV !== undefined && input.CSV !== null) {\n    var node = serializeAws_restXmlCSVInput(input.CSV, context).withName(\"CSV\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.CompressionType !== undefined && input.CompressionType !== null) {\n    var node = new __XmlNode(\"CompressionType\").addChildNode(new __XmlText(input.CompressionType)).withName(\"CompressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.JSON !== undefined && input.JSON !== null) {\n    var node = serializeAws_restXmlJSONInput(input.JSON, context).withName(\"JSON\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Parquet !== undefined && input.Parquet !== null) {\n    var node = serializeAws_restXmlParquetInput(input.Parquet, context).withName(\"Parquet\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlIntelligentTieringAndOperator = function (input, context) {\n  var bodyNode = new __XmlNode(\"IntelligentTieringAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    var nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlIntelligentTieringConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"IntelligentTieringConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    var node = new __XmlNode(\"IntelligentTieringId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlIntelligentTieringFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"IntelligentTieringStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tierings !== undefined && input.Tierings !== null) {\n    var nodes = serializeAws_restXmlTieringList(input.Tierings, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Tiering\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlIntelligentTieringFilter = function (input, context) {\n  var bodyNode = new __XmlNode(\"IntelligentTieringFilter\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tag !== undefined && input.Tag !== null) {\n    var node = serializeAws_restXmlTag(input.Tag, context).withName(\"Tag\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.And !== undefined && input.And !== null) {\n    var node = serializeAws_restXmlIntelligentTieringAndOperator(input.And, context).withName(\"And\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlInventoryConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"InventoryConfiguration\");\n  if (input.Destination !== undefined && input.Destination !== null) {\n    var node = serializeAws_restXmlInventoryDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IsEnabled !== undefined && input.IsEnabled !== null) {\n    var node = new __XmlNode(\"IsEnabled\").addChildNode(new __XmlText(String(input.IsEnabled))).withName(\"IsEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlInventoryFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Id !== undefined && input.Id !== null) {\n    var node = new __XmlNode(\"InventoryId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IncludedObjectVersions !== undefined && input.IncludedObjectVersions !== null) {\n    var node = new __XmlNode(\"InventoryIncludedObjectVersions\").addChildNode(new __XmlText(input.IncludedObjectVersions)).withName(\"IncludedObjectVersions\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OptionalFields !== undefined && input.OptionalFields !== null) {\n    var nodes = serializeAws_restXmlInventoryOptionalFields(input.OptionalFields, context);\n    var containerNode_2 = new __XmlNode(\"OptionalFields\");\n    nodes.map(function (node) {\n      containerNode_2.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode_2);\n  }\n  if (input.Schedule !== undefined && input.Schedule !== null) {\n    var node = serializeAws_restXmlInventorySchedule(input.Schedule, context).withName(\"Schedule\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlInventoryDestination = function (input, context) {\n  var bodyNode = new __XmlNode(\"InventoryDestination\");\n  if (input.S3BucketDestination !== undefined && input.S3BucketDestination !== null) {\n    var node = serializeAws_restXmlInventoryS3BucketDestination(input.S3BucketDestination, context).withName(\"S3BucketDestination\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlInventoryEncryption = function (input, context) {\n  var bodyNode = new __XmlNode(\"InventoryEncryption\");\n  if (input.SSES3 !== undefined && input.SSES3 !== null) {\n    var node = serializeAws_restXmlSSES3(input.SSES3, context).withName(\"SSE-S3\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SSEKMS !== undefined && input.SSEKMS !== null) {\n    var node = serializeAws_restXmlSSEKMS(input.SSEKMS, context).withName(\"SSE-KMS\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlInventoryFilter = function (input, context) {\n  var bodyNode = new __XmlNode(\"InventoryFilter\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlInventoryOptionalFields = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = new __XmlNode(\"InventoryOptionalField\").addChildNode(new __XmlText(entry));\n    return node.withName(\"Field\");\n  });\n};\nvar serializeAws_restXmlInventoryS3BucketDestination = function (input, context) {\n  var bodyNode = new __XmlNode(\"InventoryS3BucketDestination\");\n  if (input.AccountId !== undefined && input.AccountId !== null) {\n    var node = new __XmlNode(\"AccountId\").addChildNode(new __XmlText(input.AccountId)).withName(\"AccountId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Bucket !== undefined && input.Bucket !== null) {\n    var node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.Bucket)).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Format !== undefined && input.Format !== null) {\n    var node = new __XmlNode(\"InventoryFormat\").addChildNode(new __XmlText(input.Format)).withName(\"Format\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Encryption !== undefined && input.Encryption !== null) {\n    var node = serializeAws_restXmlInventoryEncryption(input.Encryption, context).withName(\"Encryption\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlInventorySchedule = function (input, context) {\n  var bodyNode = new __XmlNode(\"InventorySchedule\");\n  if (input.Frequency !== undefined && input.Frequency !== null) {\n    var node = new __XmlNode(\"InventoryFrequency\").addChildNode(new __XmlText(input.Frequency)).withName(\"Frequency\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlJSONInput = function (input, context) {\n  var bodyNode = new __XmlNode(\"JSONInput\");\n  if (input.Type !== undefined && input.Type !== null) {\n    var node = new __XmlNode(\"JSONType\").addChildNode(new __XmlText(input.Type)).withName(\"Type\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlJSONOutput = function (input, context) {\n  var bodyNode = new __XmlNode(\"JSONOutput\");\n  if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n    var node = new __XmlNode(\"RecordDelimiter\").addChildNode(new __XmlText(input.RecordDelimiter)).withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlLambdaFunctionConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"LambdaFunctionConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    var node = new __XmlNode(\"NotificationId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.LambdaFunctionArn !== undefined && input.LambdaFunctionArn !== null) {\n    var node = new __XmlNode(\"LambdaFunctionArn\").addChildNode(new __XmlText(input.LambdaFunctionArn)).withName(\"CloudFunction\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events !== undefined && input.Events !== null) {\n    var nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlLambdaFunctionConfigurationList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlLifecycleExpiration = function (input, context) {\n  var bodyNode = new __XmlNode(\"LifecycleExpiration\");\n  if (input.Date !== undefined && input.Date !== null) {\n    var node = new __XmlNode(\"Date\").addChildNode(new __XmlText(input.Date.toISOString().split(\".\")[0] + \"Z\")).withName(\"Date\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days !== undefined && input.Days !== null) {\n    var node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpiredObjectDeleteMarker !== undefined && input.ExpiredObjectDeleteMarker !== null) {\n    var node = new __XmlNode(\"ExpiredObjectDeleteMarker\").addChildNode(new __XmlText(String(input.ExpiredObjectDeleteMarker))).withName(\"ExpiredObjectDeleteMarker\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlLifecycleRule = function (input, context) {\n  var bodyNode = new __XmlNode(\"LifecycleRule\");\n  if (input.Expiration !== undefined && input.Expiration !== null) {\n    var node = serializeAws_restXmlLifecycleExpiration(input.Expiration, context).withName(\"Expiration\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID !== undefined && input.ID !== null) {\n    var node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlLifecycleRuleFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"ExpirationStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Transitions !== undefined && input.Transitions !== null) {\n    var nodes = serializeAws_restXmlTransitionList(input.Transitions, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Transition\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.NoncurrentVersionTransitions !== undefined && input.NoncurrentVersionTransitions !== null) {\n    var nodes = serializeAws_restXmlNoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);\n    nodes.map(function (node) {\n      node = node.withName(\"NoncurrentVersionTransition\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.NoncurrentVersionExpiration !== undefined && input.NoncurrentVersionExpiration !== null) {\n    var node = serializeAws_restXmlNoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName(\"NoncurrentVersionExpiration\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AbortIncompleteMultipartUpload !== undefined && input.AbortIncompleteMultipartUpload !== null) {\n    var node = serializeAws_restXmlAbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload, context).withName(\"AbortIncompleteMultipartUpload\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlLifecycleRuleAndOperator = function (input, context) {\n  var bodyNode = new __XmlNode(\"LifecycleRuleAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    var nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlLifecycleRuleFilter = function (input, context) {\n  var bodyNode = new __XmlNode(\"LifecycleRuleFilter\");\n  LifecycleRuleFilter.visit(input, {\n    Prefix: function (value) {\n      var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: function (value) {\n      var node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: function (value) {\n      var node = serializeAws_restXmlLifecycleRuleAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: function (name, value) {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    }\n  });\n  return bodyNode;\n};\nvar serializeAws_restXmlLifecycleRules = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlLifecycleRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlLoggingEnabled = function (input, context) {\n  var bodyNode = new __XmlNode(\"LoggingEnabled\");\n  if (input.TargetBucket !== undefined && input.TargetBucket !== null) {\n    var node = new __XmlNode(\"TargetBucket\").addChildNode(new __XmlText(input.TargetBucket)).withName(\"TargetBucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.TargetGrants !== undefined && input.TargetGrants !== null) {\n    var nodes = serializeAws_restXmlTargetGrants(input.TargetGrants, context);\n    var containerNode_3 = new __XmlNode(\"TargetGrants\");\n    nodes.map(function (node) {\n      containerNode_3.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode_3);\n  }\n  if (input.TargetPrefix !== undefined && input.TargetPrefix !== null) {\n    var node = new __XmlNode(\"TargetPrefix\").addChildNode(new __XmlText(input.TargetPrefix)).withName(\"TargetPrefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlMetadataEntry = function (input, context) {\n  var bodyNode = new __XmlNode(\"MetadataEntry\");\n  if (input.Name !== undefined && input.Name !== null) {\n    var node = new __XmlNode(\"MetadataKey\").addChildNode(new __XmlText(input.Name)).withName(\"Name\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value !== undefined && input.Value !== null) {\n    var node = new __XmlNode(\"MetadataValue\").addChildNode(new __XmlText(input.Value)).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlMetrics = function (input, context) {\n  var bodyNode = new __XmlNode(\"Metrics\");\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"MetricsStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.EventThreshold !== undefined && input.EventThreshold !== null) {\n    var node = serializeAws_restXmlReplicationTimeValue(input.EventThreshold, context).withName(\"EventThreshold\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlMetricsAndOperator = function (input, context) {\n  var bodyNode = new __XmlNode(\"MetricsAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    var nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlMetricsConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"MetricsConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    var node = new __XmlNode(\"MetricsId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlMetricsFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlMetricsFilter = function (input, context) {\n  var bodyNode = new __XmlNode(\"MetricsFilter\");\n  MetricsFilter.visit(input, {\n    Prefix: function (value) {\n      var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: function (value) {\n      var node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: function (value) {\n      var node = serializeAws_restXmlMetricsAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: function (name, value) {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    }\n  });\n  return bodyNode;\n};\nvar serializeAws_restXmlNoncurrentVersionExpiration = function (input, context) {\n  var bodyNode = new __XmlNode(\"NoncurrentVersionExpiration\");\n  if (input.NoncurrentDays !== undefined && input.NoncurrentDays !== null) {\n    var node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.NoncurrentDays))).withName(\"NoncurrentDays\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlNoncurrentVersionTransition = function (input, context) {\n  var bodyNode = new __XmlNode(\"NoncurrentVersionTransition\");\n  if (input.NoncurrentDays !== undefined && input.NoncurrentDays !== null) {\n    var node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.NoncurrentDays))).withName(\"NoncurrentDays\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    var node = new __XmlNode(\"TransitionStorageClass\").addChildNode(new __XmlText(input.StorageClass)).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlNoncurrentVersionTransitionList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlNoncurrentVersionTransition(entry, context);\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlNotificationConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"NotificationConfiguration\");\n  if (input.TopicConfigurations !== undefined && input.TopicConfigurations !== null) {\n    var nodes = serializeAws_restXmlTopicConfigurationList(input.TopicConfigurations, context);\n    nodes.map(function (node) {\n      node = node.withName(\"TopicConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.QueueConfigurations !== undefined && input.QueueConfigurations !== null) {\n    var nodes = serializeAws_restXmlQueueConfigurationList(input.QueueConfigurations, context);\n    nodes.map(function (node) {\n      node = node.withName(\"QueueConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.LambdaFunctionConfigurations !== undefined && input.LambdaFunctionConfigurations !== null) {\n    var nodes = serializeAws_restXmlLambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);\n    nodes.map(function (node) {\n      node = node.withName(\"CloudFunctionConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlNotificationConfigurationFilter = function (input, context) {\n  var bodyNode = new __XmlNode(\"NotificationConfigurationFilter\");\n  if (input.Key !== undefined && input.Key !== null) {\n    var node = serializeAws_restXmlS3KeyFilter(input.Key, context).withName(\"S3Key\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlObjectIdentifier = function (input, context) {\n  var bodyNode = new __XmlNode(\"ObjectIdentifier\");\n  if (input.Key !== undefined && input.Key !== null) {\n    var node = new __XmlNode(\"ObjectKey\").addChildNode(new __XmlText(input.Key)).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.VersionId !== undefined && input.VersionId !== null) {\n    var node = new __XmlNode(\"ObjectVersionId\").addChildNode(new __XmlText(input.VersionId)).withName(\"VersionId\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlObjectIdentifierList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlObjectIdentifier(entry, context);\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlObjectLockConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"ObjectLockConfiguration\");\n  if (input.ObjectLockEnabled !== undefined && input.ObjectLockEnabled !== null) {\n    var node = new __XmlNode(\"ObjectLockEnabled\").addChildNode(new __XmlText(input.ObjectLockEnabled)).withName(\"ObjectLockEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Rule !== undefined && input.Rule !== null) {\n    var node = serializeAws_restXmlObjectLockRule(input.Rule, context).withName(\"Rule\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlObjectLockLegalHold = function (input, context) {\n  var bodyNode = new __XmlNode(\"ObjectLockLegalHold\");\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"ObjectLockLegalHoldStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlObjectLockRetention = function (input, context) {\n  var bodyNode = new __XmlNode(\"ObjectLockRetention\");\n  if (input.Mode !== undefined && input.Mode !== null) {\n    var node = new __XmlNode(\"ObjectLockRetentionMode\").addChildNode(new __XmlText(input.Mode)).withName(\"Mode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RetainUntilDate !== undefined && input.RetainUntilDate !== null) {\n    var node = new __XmlNode(\"Date\").addChildNode(new __XmlText(input.RetainUntilDate.toISOString().split(\".\")[0] + \"Z\")).withName(\"RetainUntilDate\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlObjectLockRule = function (input, context) {\n  var bodyNode = new __XmlNode(\"ObjectLockRule\");\n  if (input.DefaultRetention !== undefined && input.DefaultRetention !== null) {\n    var node = serializeAws_restXmlDefaultRetention(input.DefaultRetention, context).withName(\"DefaultRetention\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlOutputLocation = function (input, context) {\n  var bodyNode = new __XmlNode(\"OutputLocation\");\n  if (input.S3 !== undefined && input.S3 !== null) {\n    var node = serializeAws_restXmlS3Location(input.S3, context).withName(\"S3\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlOutputSerialization = function (input, context) {\n  var bodyNode = new __XmlNode(\"OutputSerialization\");\n  if (input.CSV !== undefined && input.CSV !== null) {\n    var node = serializeAws_restXmlCSVOutput(input.CSV, context).withName(\"CSV\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.JSON !== undefined && input.JSON !== null) {\n    var node = serializeAws_restXmlJSONOutput(input.JSON, context).withName(\"JSON\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlOwner = function (input, context) {\n  var bodyNode = new __XmlNode(\"Owner\");\n  if (input.DisplayName !== undefined && input.DisplayName !== null) {\n    var node = new __XmlNode(\"DisplayName\").addChildNode(new __XmlText(input.DisplayName)).withName(\"DisplayName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID !== undefined && input.ID !== null) {\n    var node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlOwnershipControls = function (input, context) {\n  var bodyNode = new __XmlNode(\"OwnershipControls\");\n  if (input.Rules !== undefined && input.Rules !== null) {\n    var nodes = serializeAws_restXmlOwnershipControlsRules(input.Rules, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlOwnershipControlsRule = function (input, context) {\n  var bodyNode = new __XmlNode(\"OwnershipControlsRule\");\n  if (input.ObjectOwnership !== undefined && input.ObjectOwnership !== null) {\n    var node = new __XmlNode(\"ObjectOwnership\").addChildNode(new __XmlText(input.ObjectOwnership)).withName(\"ObjectOwnership\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlOwnershipControlsRules = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlOwnershipControlsRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlParquetInput = function (input, context) {\n  var bodyNode = new __XmlNode(\"ParquetInput\");\n  return bodyNode;\n};\nvar serializeAws_restXmlPublicAccessBlockConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"PublicAccessBlockConfiguration\");\n  if (input.BlockPublicAcls !== undefined && input.BlockPublicAcls !== null) {\n    var node = new __XmlNode(\"Setting\").addChildNode(new __XmlText(String(input.BlockPublicAcls))).withName(\"BlockPublicAcls\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IgnorePublicAcls !== undefined && input.IgnorePublicAcls !== null) {\n    var node = new __XmlNode(\"Setting\").addChildNode(new __XmlText(String(input.IgnorePublicAcls))).withName(\"IgnorePublicAcls\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BlockPublicPolicy !== undefined && input.BlockPublicPolicy !== null) {\n    var node = new __XmlNode(\"Setting\").addChildNode(new __XmlText(String(input.BlockPublicPolicy))).withName(\"BlockPublicPolicy\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RestrictPublicBuckets !== undefined && input.RestrictPublicBuckets !== null) {\n    var node = new __XmlNode(\"Setting\").addChildNode(new __XmlText(String(input.RestrictPublicBuckets))).withName(\"RestrictPublicBuckets\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlQueueConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"QueueConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    var node = new __XmlNode(\"NotificationId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QueueArn !== undefined && input.QueueArn !== null) {\n    var node = new __XmlNode(\"QueueArn\").addChildNode(new __XmlText(input.QueueArn)).withName(\"Queue\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events !== undefined && input.Events !== null) {\n    var nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlQueueConfigurationList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlQueueConfiguration(entry, context);\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlRedirect = function (input, context) {\n  var bodyNode = new __XmlNode(\"Redirect\");\n  if (input.HostName !== undefined && input.HostName !== null) {\n    var node = new __XmlNode(\"HostName\").addChildNode(new __XmlText(input.HostName)).withName(\"HostName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.HttpRedirectCode !== undefined && input.HttpRedirectCode !== null) {\n    var node = new __XmlNode(\"HttpRedirectCode\").addChildNode(new __XmlText(input.HttpRedirectCode)).withName(\"HttpRedirectCode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Protocol !== undefined && input.Protocol !== null) {\n    var node = new __XmlNode(\"Protocol\").addChildNode(new __XmlText(input.Protocol)).withName(\"Protocol\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplaceKeyPrefixWith !== undefined && input.ReplaceKeyPrefixWith !== null) {\n    var node = new __XmlNode(\"ReplaceKeyPrefixWith\").addChildNode(new __XmlText(input.ReplaceKeyPrefixWith)).withName(\"ReplaceKeyPrefixWith\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplaceKeyWith !== undefined && input.ReplaceKeyWith !== null) {\n    var node = new __XmlNode(\"ReplaceKeyWith\").addChildNode(new __XmlText(input.ReplaceKeyWith)).withName(\"ReplaceKeyWith\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlRedirectAllRequestsTo = function (input, context) {\n  var bodyNode = new __XmlNode(\"RedirectAllRequestsTo\");\n  if (input.HostName !== undefined && input.HostName !== null) {\n    var node = new __XmlNode(\"HostName\").addChildNode(new __XmlText(input.HostName)).withName(\"HostName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Protocol !== undefined && input.Protocol !== null) {\n    var node = new __XmlNode(\"Protocol\").addChildNode(new __XmlText(input.Protocol)).withName(\"Protocol\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlReplicaModifications = function (input, context) {\n  var bodyNode = new __XmlNode(\"ReplicaModifications\");\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"ReplicaModificationsStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlReplicationConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"ReplicationConfiguration\");\n  if (input.Role !== undefined && input.Role !== null) {\n    var node = new __XmlNode(\"Role\").addChildNode(new __XmlText(input.Role)).withName(\"Role\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Rules !== undefined && input.Rules !== null) {\n    var nodes = serializeAws_restXmlReplicationRules(input.Rules, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlReplicationRule = function (input, context) {\n  var bodyNode = new __XmlNode(\"ReplicationRule\");\n  if (input.ID !== undefined && input.ID !== null) {\n    var node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Priority !== undefined && input.Priority !== null) {\n    var node = new __XmlNode(\"Priority\").addChildNode(new __XmlText(String(input.Priority))).withName(\"Priority\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlReplicationRuleFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"ReplicationRuleStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SourceSelectionCriteria !== undefined && input.SourceSelectionCriteria !== null) {\n    var node = serializeAws_restXmlSourceSelectionCriteria(input.SourceSelectionCriteria, context).withName(\"SourceSelectionCriteria\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExistingObjectReplication !== undefined && input.ExistingObjectReplication !== null) {\n    var node = serializeAws_restXmlExistingObjectReplication(input.ExistingObjectReplication, context).withName(\"ExistingObjectReplication\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Destination !== undefined && input.Destination !== null) {\n    var node = serializeAws_restXmlDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.DeleteMarkerReplication !== undefined && input.DeleteMarkerReplication !== null) {\n    var node = serializeAws_restXmlDeleteMarkerReplication(input.DeleteMarkerReplication, context).withName(\"DeleteMarkerReplication\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlReplicationRuleAndOperator = function (input, context) {\n  var bodyNode = new __XmlNode(\"ReplicationRuleAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    var nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlReplicationRuleFilter = function (input, context) {\n  var bodyNode = new __XmlNode(\"ReplicationRuleFilter\");\n  ReplicationRuleFilter.visit(input, {\n    Prefix: function (value) {\n      var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: function (value) {\n      var node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: function (value) {\n      var node = serializeAws_restXmlReplicationRuleAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: function (name, value) {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    }\n  });\n  return bodyNode;\n};\nvar serializeAws_restXmlReplicationRules = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlReplicationRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlReplicationTime = function (input, context) {\n  var bodyNode = new __XmlNode(\"ReplicationTime\");\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"ReplicationTimeStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Time !== undefined && input.Time !== null) {\n    var node = serializeAws_restXmlReplicationTimeValue(input.Time, context).withName(\"Time\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlReplicationTimeValue = function (input, context) {\n  var bodyNode = new __XmlNode(\"ReplicationTimeValue\");\n  if (input.Minutes !== undefined && input.Minutes !== null) {\n    var node = new __XmlNode(\"Minutes\").addChildNode(new __XmlText(String(input.Minutes))).withName(\"Minutes\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlRequestPaymentConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"RequestPaymentConfiguration\");\n  if (input.Payer !== undefined && input.Payer !== null) {\n    var node = new __XmlNode(\"Payer\").addChildNode(new __XmlText(input.Payer)).withName(\"Payer\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlRequestProgress = function (input, context) {\n  var bodyNode = new __XmlNode(\"RequestProgress\");\n  if (input.Enabled !== undefined && input.Enabled !== null) {\n    var node = new __XmlNode(\"EnableRequestProgress\").addChildNode(new __XmlText(String(input.Enabled))).withName(\"Enabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlRestoreRequest = function (input, context) {\n  var bodyNode = new __XmlNode(\"RestoreRequest\");\n  if (input.Days !== undefined && input.Days !== null) {\n    var node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.GlacierJobParameters !== undefined && input.GlacierJobParameters !== null) {\n    var node = serializeAws_restXmlGlacierJobParameters(input.GlacierJobParameters, context).withName(\"GlacierJobParameters\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Type !== undefined && input.Type !== null) {\n    var node = new __XmlNode(\"RestoreRequestType\").addChildNode(new __XmlText(input.Type)).withName(\"Type\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tier !== undefined && input.Tier !== null) {\n    var node = new __XmlNode(\"Tier\").addChildNode(new __XmlText(input.Tier)).withName(\"Tier\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Description !== undefined && input.Description !== null) {\n    var node = new __XmlNode(\"Description\").addChildNode(new __XmlText(input.Description)).withName(\"Description\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SelectParameters !== undefined && input.SelectParameters !== null) {\n    var node = serializeAws_restXmlSelectParameters(input.SelectParameters, context).withName(\"SelectParameters\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputLocation !== undefined && input.OutputLocation !== null) {\n    var node = serializeAws_restXmlOutputLocation(input.OutputLocation, context).withName(\"OutputLocation\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlRoutingRule = function (input, context) {\n  var bodyNode = new __XmlNode(\"RoutingRule\");\n  if (input.Condition !== undefined && input.Condition !== null) {\n    var node = serializeAws_restXmlCondition(input.Condition, context).withName(\"Condition\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Redirect !== undefined && input.Redirect !== null) {\n    var node = serializeAws_restXmlRedirect(input.Redirect, context).withName(\"Redirect\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlRoutingRules = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlRoutingRule(entry, context);\n    return node.withName(\"RoutingRule\");\n  });\n};\nvar serializeAws_restXmlS3KeyFilter = function (input, context) {\n  var bodyNode = new __XmlNode(\"S3KeyFilter\");\n  if (input.FilterRules !== undefined && input.FilterRules !== null) {\n    var nodes = serializeAws_restXmlFilterRuleList(input.FilterRules, context);\n    nodes.map(function (node) {\n      node = node.withName(\"FilterRule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlS3Location = function (input, context) {\n  var bodyNode = new __XmlNode(\"S3Location\");\n  if (input.BucketName !== undefined && input.BucketName !== null) {\n    var node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.BucketName)).withName(\"BucketName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"LocationPrefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Encryption !== undefined && input.Encryption !== null) {\n    var node = serializeAws_restXmlEncryption(input.Encryption, context).withName(\"Encryption\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.CannedACL !== undefined && input.CannedACL !== null) {\n    var node = new __XmlNode(\"ObjectCannedACL\").addChildNode(new __XmlText(input.CannedACL)).withName(\"CannedACL\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessControlList !== undefined && input.AccessControlList !== null) {\n    var nodes = serializeAws_restXmlGrants(input.AccessControlList, context);\n    var containerNode_4 = new __XmlNode(\"AccessControlList\");\n    nodes.map(function (node) {\n      containerNode_4.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode_4);\n  }\n  if (input.Tagging !== undefined && input.Tagging !== null) {\n    var node = serializeAws_restXmlTagging(input.Tagging, context).withName(\"Tagging\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.UserMetadata !== undefined && input.UserMetadata !== null) {\n    var nodes = serializeAws_restXmlUserMetadata(input.UserMetadata, context);\n    var containerNode_5 = new __XmlNode(\"UserMetadata\");\n    nodes.map(function (node) {\n      containerNode_5.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode_5);\n  }\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    var node = new __XmlNode(\"StorageClass\").addChildNode(new __XmlText(input.StorageClass)).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlScanRange = function (input, context) {\n  var bodyNode = new __XmlNode(\"ScanRange\");\n  if (input.Start !== undefined && input.Start !== null) {\n    var node = new __XmlNode(\"Start\").addChildNode(new __XmlText(String(input.Start))).withName(\"Start\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.End !== undefined && input.End !== null) {\n    var node = new __XmlNode(\"End\").addChildNode(new __XmlText(String(input.End))).withName(\"End\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlSelectParameters = function (input, context) {\n  var bodyNode = new __XmlNode(\"SelectParameters\");\n  if (input.InputSerialization !== undefined && input.InputSerialization !== null) {\n    var node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\"InputSerialization\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpressionType !== undefined && input.ExpressionType !== null) {\n    var node = new __XmlNode(\"ExpressionType\").addChildNode(new __XmlText(input.ExpressionType)).withName(\"ExpressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Expression !== undefined && input.Expression !== null) {\n    var node = new __XmlNode(\"Expression\").addChildNode(new __XmlText(input.Expression)).withName(\"Expression\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputSerialization !== undefined && input.OutputSerialization !== null) {\n    var node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\"OutputSerialization\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlServerSideEncryptionByDefault = function (input, context) {\n  var bodyNode = new __XmlNode(\"ServerSideEncryptionByDefault\");\n  if (input.SSEAlgorithm !== undefined && input.SSEAlgorithm !== null) {\n    var node = new __XmlNode(\"ServerSideEncryption\").addChildNode(new __XmlText(input.SSEAlgorithm)).withName(\"SSEAlgorithm\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSMasterKeyID !== undefined && input.KMSMasterKeyID !== null) {\n    var node = new __XmlNode(\"SSEKMSKeyId\").addChildNode(new __XmlText(input.KMSMasterKeyID)).withName(\"KMSMasterKeyID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlServerSideEncryptionConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"ServerSideEncryptionConfiguration\");\n  if (input.Rules !== undefined && input.Rules !== null) {\n    var nodes = serializeAws_restXmlServerSideEncryptionRules(input.Rules, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlServerSideEncryptionRule = function (input, context) {\n  var bodyNode = new __XmlNode(\"ServerSideEncryptionRule\");\n  if (input.ApplyServerSideEncryptionByDefault !== undefined && input.ApplyServerSideEncryptionByDefault !== null) {\n    var node = serializeAws_restXmlServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault, context).withName(\"ApplyServerSideEncryptionByDefault\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BucketKeyEnabled !== undefined && input.BucketKeyEnabled !== null) {\n    var node = new __XmlNode(\"BucketKeyEnabled\").addChildNode(new __XmlText(String(input.BucketKeyEnabled))).withName(\"BucketKeyEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlServerSideEncryptionRules = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlServerSideEncryptionRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlSourceSelectionCriteria = function (input, context) {\n  var bodyNode = new __XmlNode(\"SourceSelectionCriteria\");\n  if (input.SseKmsEncryptedObjects !== undefined && input.SseKmsEncryptedObjects !== null) {\n    var node = serializeAws_restXmlSseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName(\"SseKmsEncryptedObjects\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplicaModifications !== undefined && input.ReplicaModifications !== null) {\n    var node = serializeAws_restXmlReplicaModifications(input.ReplicaModifications, context).withName(\"ReplicaModifications\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlSSEKMS = function (input, context) {\n  var bodyNode = new __XmlNode(\"SSE-KMS\");\n  if (input.KeyId !== undefined && input.KeyId !== null) {\n    var node = new __XmlNode(\"SSEKMSKeyId\").addChildNode(new __XmlText(input.KeyId)).withName(\"KeyId\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlSseKmsEncryptedObjects = function (input, context) {\n  var bodyNode = new __XmlNode(\"SseKmsEncryptedObjects\");\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"SseKmsEncryptedObjectsStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlSSES3 = function (input, context) {\n  var bodyNode = new __XmlNode(\"SSE-S3\");\n  return bodyNode;\n};\nvar serializeAws_restXmlStorageClassAnalysis = function (input, context) {\n  var bodyNode = new __XmlNode(\"StorageClassAnalysis\");\n  if (input.DataExport !== undefined && input.DataExport !== null) {\n    var node = serializeAws_restXmlStorageClassAnalysisDataExport(input.DataExport, context).withName(\"DataExport\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlStorageClassAnalysisDataExport = function (input, context) {\n  var bodyNode = new __XmlNode(\"StorageClassAnalysisDataExport\");\n  if (input.OutputSchemaVersion !== undefined && input.OutputSchemaVersion !== null) {\n    var node = new __XmlNode(\"StorageClassAnalysisSchemaVersion\").addChildNode(new __XmlText(input.OutputSchemaVersion)).withName(\"OutputSchemaVersion\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Destination !== undefined && input.Destination !== null) {\n    var node = serializeAws_restXmlAnalyticsExportDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlTag = function (input, context) {\n  var bodyNode = new __XmlNode(\"Tag\");\n  if (input.Key !== undefined && input.Key !== null) {\n    var node = new __XmlNode(\"ObjectKey\").addChildNode(new __XmlText(input.Key)).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value !== undefined && input.Value !== null) {\n    var node = new __XmlNode(\"Value\").addChildNode(new __XmlText(input.Value)).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlTagging = function (input, context) {\n  var bodyNode = new __XmlNode(\"Tagging\");\n  if (input.TagSet !== undefined && input.TagSet !== null) {\n    var nodes = serializeAws_restXmlTagSet(input.TagSet, context);\n    var containerNode_6 = new __XmlNode(\"TagSet\");\n    nodes.map(function (node) {\n      containerNode_6.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode_6);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlTagSet = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlTag(entry, context);\n    return node.withName(\"Tag\");\n  });\n};\nvar serializeAws_restXmlTargetGrant = function (input, context) {\n  var bodyNode = new __XmlNode(\"TargetGrant\");\n  if (input.Grantee !== undefined && input.Grantee !== null) {\n    var node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Permission !== undefined && input.Permission !== null) {\n    var node = new __XmlNode(\"BucketLogsPermission\").addChildNode(new __XmlText(input.Permission)).withName(\"Permission\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlTargetGrants = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlTargetGrant(entry, context);\n    return node.withName(\"Grant\");\n  });\n};\nvar serializeAws_restXmlTiering = function (input, context) {\n  var bodyNode = new __XmlNode(\"Tiering\");\n  if (input.Days !== undefined && input.Days !== null) {\n    var node = new __XmlNode(\"IntelligentTieringDays\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessTier !== undefined && input.AccessTier !== null) {\n    var node = new __XmlNode(\"IntelligentTieringAccessTier\").addChildNode(new __XmlText(input.AccessTier)).withName(\"AccessTier\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlTieringList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlTiering(entry, context);\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlTopicConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"TopicConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    var node = new __XmlNode(\"NotificationId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.TopicArn !== undefined && input.TopicArn !== null) {\n    var node = new __XmlNode(\"TopicArn\").addChildNode(new __XmlText(input.TopicArn)).withName(\"Topic\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events !== undefined && input.Events !== null) {\n    var nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlTopicConfigurationList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlTopicConfiguration(entry, context);\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlTransition = function (input, context) {\n  var bodyNode = new __XmlNode(\"Transition\");\n  if (input.Date !== undefined && input.Date !== null) {\n    var node = new __XmlNode(\"Date\").addChildNode(new __XmlText(input.Date.toISOString().split(\".\")[0] + \"Z\")).withName(\"Date\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days !== undefined && input.Days !== null) {\n    var node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    var node = new __XmlNode(\"TransitionStorageClass\").addChildNode(new __XmlText(input.StorageClass)).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlTransitionList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlTransition(entry, context);\n    return node.withName(\"member\");\n  });\n};\nvar serializeAws_restXmlUserMetadata = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    var node = serializeAws_restXmlMetadataEntry(entry, context);\n    return node.withName(\"MetadataEntry\");\n  });\n};\nvar serializeAws_restXmlVersioningConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"VersioningConfiguration\");\n  if (input.MFADelete !== undefined && input.MFADelete !== null) {\n    var node = new __XmlNode(\"MFADelete\").addChildNode(new __XmlText(input.MFADelete)).withName(\"MfaDelete\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"BucketVersioningStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nvar serializeAws_restXmlWebsiteConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"WebsiteConfiguration\");\n  if (input.ErrorDocument !== undefined && input.ErrorDocument !== null) {\n    var node = serializeAws_restXmlErrorDocument(input.ErrorDocument, context).withName(\"ErrorDocument\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IndexDocument !== undefined && input.IndexDocument !== null) {\n    var node = serializeAws_restXmlIndexDocument(input.IndexDocument, context).withName(\"IndexDocument\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RedirectAllRequestsTo !== undefined && input.RedirectAllRequestsTo !== null) {\n    var node = serializeAws_restXmlRedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName(\"RedirectAllRequestsTo\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RoutingRules !== undefined && input.RoutingRules !== null) {\n    var nodes = serializeAws_restXmlRoutingRules(input.RoutingRules, context);\n    var containerNode_7 = new __XmlNode(\"RoutingRules\");\n    nodes.map(function (node) {\n      containerNode_7.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode_7);\n  }\n  return bodyNode;\n};\nvar deserializeAws_restXmlAbortIncompleteMultipartUpload = function (output, context) {\n  var contents = {\n    DaysAfterInitiation: undefined\n  };\n  if (output[\"DaysAfterInitiation\"] !== undefined) {\n    contents.DaysAfterInitiation = parseInt(output[\"DaysAfterInitiation\"]);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlAccessControlTranslation = function (output, context) {\n  var contents = {\n    Owner: undefined\n  };\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = output[\"Owner\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlAllowedHeaders = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar deserializeAws_restXmlAllowedMethods = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar deserializeAws_restXmlAllowedOrigins = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar deserializeAws_restXmlAnalyticsAndOperator = function (output, context) {\n  var contents = {\n    Prefix: undefined,\n    Tags: undefined\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlAnalyticsConfiguration = function (output, context) {\n  var contents = {\n    Id: undefined,\n    Filter: undefined,\n    StorageClassAnalysis: undefined\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlAnalyticsFilter(output[\"Filter\"], context);\n  }\n  if (output[\"StorageClassAnalysis\"] !== undefined) {\n    contents.StorageClassAnalysis = deserializeAws_restXmlStorageClassAnalysis(output[\"StorageClassAnalysis\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlAnalyticsConfigurationList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlAnalyticsConfiguration(entry, context);\n  });\n};\nvar deserializeAws_restXmlAnalyticsExportDestination = function (output, context) {\n  var contents = {\n    S3BucketDestination: undefined\n  };\n  if (output[\"S3BucketDestination\"] !== undefined) {\n    contents.S3BucketDestination = deserializeAws_restXmlAnalyticsS3BucketDestination(output[\"S3BucketDestination\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlAnalyticsFilter = function (output, context) {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"]\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context)\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlAnalyticsAndOperator(output[\"And\"], context)\n    };\n  }\n  return {\n    $unknown: Object.entries(output)[0]\n  };\n};\nvar deserializeAws_restXmlAnalyticsS3BucketDestination = function (output, context) {\n  var contents = {\n    Format: undefined,\n    BucketAccountId: undefined,\n    Bucket: undefined,\n    Prefix: undefined\n  };\n  if (output[\"Format\"] !== undefined) {\n    contents.Format = output[\"Format\"];\n  }\n  if (output[\"BucketAccountId\"] !== undefined) {\n    contents.BucketAccountId = output[\"BucketAccountId\"];\n  }\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = output[\"Bucket\"];\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlBucket = function (output, context) {\n  var contents = {\n    Name: undefined,\n    CreationDate: undefined\n  };\n  if (output[\"Name\"] !== undefined) {\n    contents.Name = output[\"Name\"];\n  }\n  if (output[\"CreationDate\"] !== undefined) {\n    contents.CreationDate = new Date(output[\"CreationDate\"]);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlBuckets = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlBucket(entry, context);\n  });\n};\nvar deserializeAws_restXmlCommonPrefix = function (output, context) {\n  var contents = {\n    Prefix: undefined\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlCommonPrefixList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlCommonPrefix(entry, context);\n  });\n};\nvar deserializeAws_restXmlCondition = function (output, context) {\n  var contents = {\n    HttpErrorCodeReturnedEquals: undefined,\n    KeyPrefixEquals: undefined\n  };\n  if (output[\"HttpErrorCodeReturnedEquals\"] !== undefined) {\n    contents.HttpErrorCodeReturnedEquals = output[\"HttpErrorCodeReturnedEquals\"];\n  }\n  if (output[\"KeyPrefixEquals\"] !== undefined) {\n    contents.KeyPrefixEquals = output[\"KeyPrefixEquals\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlCopyObjectResult = function (output, context) {\n  var contents = {\n    ETag: undefined,\n    LastModified: undefined\n  };\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlCopyPartResult = function (output, context) {\n  var contents = {\n    ETag: undefined,\n    LastModified: undefined\n  };\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlCORSRule = function (output, context) {\n  var contents = {\n    AllowedHeaders: undefined,\n    AllowedMethods: undefined,\n    AllowedOrigins: undefined,\n    ExposeHeaders: undefined,\n    MaxAgeSeconds: undefined\n  };\n  if (output.AllowedHeader === \"\") {\n    contents.AllowedHeaders = [];\n  }\n  if (output[\"AllowedHeader\"] !== undefined) {\n    contents.AllowedHeaders = deserializeAws_restXmlAllowedHeaders(__getArrayIfSingleItem(output[\"AllowedHeader\"]), context);\n  }\n  if (output.AllowedMethod === \"\") {\n    contents.AllowedMethods = [];\n  }\n  if (output[\"AllowedMethod\"] !== undefined) {\n    contents.AllowedMethods = deserializeAws_restXmlAllowedMethods(__getArrayIfSingleItem(output[\"AllowedMethod\"]), context);\n  }\n  if (output.AllowedOrigin === \"\") {\n    contents.AllowedOrigins = [];\n  }\n  if (output[\"AllowedOrigin\"] !== undefined) {\n    contents.AllowedOrigins = deserializeAws_restXmlAllowedOrigins(__getArrayIfSingleItem(output[\"AllowedOrigin\"]), context);\n  }\n  if (output.ExposeHeader === \"\") {\n    contents.ExposeHeaders = [];\n  }\n  if (output[\"ExposeHeader\"] !== undefined) {\n    contents.ExposeHeaders = deserializeAws_restXmlExposeHeaders(__getArrayIfSingleItem(output[\"ExposeHeader\"]), context);\n  }\n  if (output[\"MaxAgeSeconds\"] !== undefined) {\n    contents.MaxAgeSeconds = parseInt(output[\"MaxAgeSeconds\"]);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlCORSRules = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlCORSRule(entry, context);\n  });\n};\nvar deserializeAws_restXmlDefaultRetention = function (output, context) {\n  var contents = {\n    Mode: undefined,\n    Days: undefined,\n    Years: undefined\n  };\n  if (output[\"Mode\"] !== undefined) {\n    contents.Mode = output[\"Mode\"];\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n  if (output[\"Years\"] !== undefined) {\n    contents.Years = parseInt(output[\"Years\"]);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlDeletedObject = function (output, context) {\n  var contents = {\n    Key: undefined,\n    VersionId: undefined,\n    DeleteMarker: undefined,\n    DeleteMarkerVersionId: undefined\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n  if (output[\"DeleteMarker\"] !== undefined) {\n    contents.DeleteMarker = output[\"DeleteMarker\"] == \"true\";\n  }\n  if (output[\"DeleteMarkerVersionId\"] !== undefined) {\n    contents.DeleteMarkerVersionId = output[\"DeleteMarkerVersionId\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlDeletedObjects = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlDeletedObject(entry, context);\n  });\n};\nvar deserializeAws_restXmlDeleteMarkerEntry = function (output, context) {\n  var contents = {\n    Owner: undefined,\n    Key: undefined,\n    VersionId: undefined,\n    IsLatest: undefined,\n    LastModified: undefined\n  };\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n  if (output[\"IsLatest\"] !== undefined) {\n    contents.IsLatest = output[\"IsLatest\"] == \"true\";\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlDeleteMarkerReplication = function (output, context) {\n  var contents = {\n    Status: undefined\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlDeleteMarkers = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlDeleteMarkerEntry(entry, context);\n  });\n};\nvar deserializeAws_restXmlDestination = function (output, context) {\n  var contents = {\n    Bucket: undefined,\n    Account: undefined,\n    StorageClass: undefined,\n    AccessControlTranslation: undefined,\n    EncryptionConfiguration: undefined,\n    ReplicationTime: undefined,\n    Metrics: undefined\n  };\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = output[\"Bucket\"];\n  }\n  if (output[\"Account\"] !== undefined) {\n    contents.Account = output[\"Account\"];\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  if (output[\"AccessControlTranslation\"] !== undefined) {\n    contents.AccessControlTranslation = deserializeAws_restXmlAccessControlTranslation(output[\"AccessControlTranslation\"], context);\n  }\n  if (output[\"EncryptionConfiguration\"] !== undefined) {\n    contents.EncryptionConfiguration = deserializeAws_restXmlEncryptionConfiguration(output[\"EncryptionConfiguration\"], context);\n  }\n  if (output[\"ReplicationTime\"] !== undefined) {\n    contents.ReplicationTime = deserializeAws_restXmlReplicationTime(output[\"ReplicationTime\"], context);\n  }\n  if (output[\"Metrics\"] !== undefined) {\n    contents.Metrics = deserializeAws_restXmlMetrics(output[\"Metrics\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlEncryptionConfiguration = function (output, context) {\n  var contents = {\n    ReplicaKmsKeyID: undefined\n  };\n  if (output[\"ReplicaKmsKeyID\"] !== undefined) {\n    contents.ReplicaKmsKeyID = output[\"ReplicaKmsKeyID\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXml_Error = function (output, context) {\n  var contents = {\n    Key: undefined,\n    VersionId: undefined,\n    Code: undefined,\n    Message: undefined\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n  if (output[\"Code\"] !== undefined) {\n    contents.Code = output[\"Code\"];\n  }\n  if (output[\"Message\"] !== undefined) {\n    contents.Message = output[\"Message\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlErrorDocument = function (output, context) {\n  var contents = {\n    Key: undefined\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlErrors = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXml_Error(entry, context);\n  });\n};\nvar deserializeAws_restXmlEventList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar deserializeAws_restXmlExistingObjectReplication = function (output, context) {\n  var contents = {\n    Status: undefined\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlExposeHeaders = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar deserializeAws_restXmlFilterRule = function (output, context) {\n  var contents = {\n    Name: undefined,\n    Value: undefined\n  };\n  if (output[\"Name\"] !== undefined) {\n    contents.Name = output[\"Name\"];\n  }\n  if (output[\"Value\"] !== undefined) {\n    contents.Value = output[\"Value\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlFilterRuleList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlFilterRule(entry, context);\n  });\n};\nvar deserializeAws_restXmlGrant = function (output, context) {\n  var contents = {\n    Grantee: undefined,\n    Permission: undefined\n  };\n  if (output[\"Grantee\"] !== undefined) {\n    contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n  }\n  if (output[\"Permission\"] !== undefined) {\n    contents.Permission = output[\"Permission\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlGrantee = function (output, context) {\n  var contents = {\n    DisplayName: undefined,\n    EmailAddress: undefined,\n    ID: undefined,\n    URI: undefined,\n    Type: undefined\n  };\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = output[\"DisplayName\"];\n  }\n  if (output[\"EmailAddress\"] !== undefined) {\n    contents.EmailAddress = output[\"EmailAddress\"];\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  if (output[\"URI\"] !== undefined) {\n    contents.URI = output[\"URI\"];\n  }\n  if (output[\"xsi:type\"] !== undefined) {\n    contents.Type = output[\"xsi:type\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlGrants = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlGrant(entry, context);\n  });\n};\nvar deserializeAws_restXmlIndexDocument = function (output, context) {\n  var contents = {\n    Suffix: undefined\n  };\n  if (output[\"Suffix\"] !== undefined) {\n    contents.Suffix = output[\"Suffix\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlInitiator = function (output, context) {\n  var contents = {\n    ID: undefined,\n    DisplayName: undefined\n  };\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = output[\"DisplayName\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlIntelligentTieringAndOperator = function (output, context) {\n  var contents = {\n    Prefix: undefined,\n    Tags: undefined\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlIntelligentTieringConfiguration = function (output, context) {\n  var contents = {\n    Id: undefined,\n    Filter: undefined,\n    Status: undefined,\n    Tierings: undefined\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlIntelligentTieringFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output.Tiering === \"\") {\n    contents.Tierings = [];\n  }\n  if (output[\"Tiering\"] !== undefined) {\n    contents.Tierings = deserializeAws_restXmlTieringList(__getArrayIfSingleItem(output[\"Tiering\"]), context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlIntelligentTieringConfigurationList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlIntelligentTieringConfiguration(entry, context);\n  });\n};\nvar deserializeAws_restXmlIntelligentTieringFilter = function (output, context) {\n  var contents = {\n    Prefix: undefined,\n    Tag: undefined,\n    And: undefined\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tag = deserializeAws_restXmlTag(output[\"Tag\"], context);\n  }\n  if (output[\"And\"] !== undefined) {\n    contents.And = deserializeAws_restXmlIntelligentTieringAndOperator(output[\"And\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlInventoryConfiguration = function (output, context) {\n  var contents = {\n    Destination: undefined,\n    IsEnabled: undefined,\n    Filter: undefined,\n    Id: undefined,\n    IncludedObjectVersions: undefined,\n    OptionalFields: undefined,\n    Schedule: undefined\n  };\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlInventoryDestination(output[\"Destination\"], context);\n  }\n  if (output[\"IsEnabled\"] !== undefined) {\n    contents.IsEnabled = output[\"IsEnabled\"] == \"true\";\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlInventoryFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"IncludedObjectVersions\"] !== undefined) {\n    contents.IncludedObjectVersions = output[\"IncludedObjectVersions\"];\n  }\n  if (output.OptionalFields === \"\") {\n    contents.OptionalFields = [];\n  }\n  if (output[\"OptionalFields\"] !== undefined && output[\"OptionalFields\"][\"Field\"] !== undefined) {\n    contents.OptionalFields = deserializeAws_restXmlInventoryOptionalFields(__getArrayIfSingleItem(output[\"OptionalFields\"][\"Field\"]), context);\n  }\n  if (output[\"Schedule\"] !== undefined) {\n    contents.Schedule = deserializeAws_restXmlInventorySchedule(output[\"Schedule\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlInventoryConfigurationList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlInventoryConfiguration(entry, context);\n  });\n};\nvar deserializeAws_restXmlInventoryDestination = function (output, context) {\n  var contents = {\n    S3BucketDestination: undefined\n  };\n  if (output[\"S3BucketDestination\"] !== undefined) {\n    contents.S3BucketDestination = deserializeAws_restXmlInventoryS3BucketDestination(output[\"S3BucketDestination\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlInventoryEncryption = function (output, context) {\n  var contents = {\n    SSES3: undefined,\n    SSEKMS: undefined\n  };\n  if (output[\"SSE-S3\"] !== undefined) {\n    contents.SSES3 = deserializeAws_restXmlSSES3(output[\"SSE-S3\"], context);\n  }\n  if (output[\"SSE-KMS\"] !== undefined) {\n    contents.SSEKMS = deserializeAws_restXmlSSEKMS(output[\"SSE-KMS\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlInventoryFilter = function (output, context) {\n  var contents = {\n    Prefix: undefined\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlInventoryOptionalFields = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar deserializeAws_restXmlInventoryS3BucketDestination = function (output, context) {\n  var contents = {\n    AccountId: undefined,\n    Bucket: undefined,\n    Format: undefined,\n    Prefix: undefined,\n    Encryption: undefined\n  };\n  if (output[\"AccountId\"] !== undefined) {\n    contents.AccountId = output[\"AccountId\"];\n  }\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = output[\"Bucket\"];\n  }\n  if (output[\"Format\"] !== undefined) {\n    contents.Format = output[\"Format\"];\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output[\"Encryption\"] !== undefined) {\n    contents.Encryption = deserializeAws_restXmlInventoryEncryption(output[\"Encryption\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlInventorySchedule = function (output, context) {\n  var contents = {\n    Frequency: undefined\n  };\n  if (output[\"Frequency\"] !== undefined) {\n    contents.Frequency = output[\"Frequency\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlLambdaFunctionConfiguration = function (output, context) {\n  var contents = {\n    Id: undefined,\n    LambdaFunctionArn: undefined,\n    Events: undefined,\n    Filter: undefined\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"CloudFunction\"] !== undefined) {\n    contents.LambdaFunctionArn = output[\"CloudFunction\"];\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  }\n  if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlLambdaFunctionConfigurationList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n  });\n};\nvar deserializeAws_restXmlLifecycleExpiration = function (output, context) {\n  var contents = {\n    Date: undefined,\n    Days: undefined,\n    ExpiredObjectDeleteMarker: undefined\n  };\n  if (output[\"Date\"] !== undefined) {\n    contents.Date = new Date(output[\"Date\"]);\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n  if (output[\"ExpiredObjectDeleteMarker\"] !== undefined) {\n    contents.ExpiredObjectDeleteMarker = output[\"ExpiredObjectDeleteMarker\"] == \"true\";\n  }\n  return contents;\n};\nvar deserializeAws_restXmlLifecycleRule = function (output, context) {\n  var contents = {\n    Expiration: undefined,\n    ID: undefined,\n    Prefix: undefined,\n    Filter: undefined,\n    Status: undefined,\n    Transitions: undefined,\n    NoncurrentVersionTransitions: undefined,\n    NoncurrentVersionExpiration: undefined,\n    AbortIncompleteMultipartUpload: undefined\n  };\n  if (output[\"Expiration\"] !== undefined) {\n    contents.Expiration = deserializeAws_restXmlLifecycleExpiration(output[\"Expiration\"], context);\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlLifecycleRuleFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output.Transition === \"\") {\n    contents.Transitions = [];\n  }\n  if (output[\"Transition\"] !== undefined) {\n    contents.Transitions = deserializeAws_restXmlTransitionList(__getArrayIfSingleItem(output[\"Transition\"]), context);\n  }\n  if (output.NoncurrentVersionTransition === \"\") {\n    contents.NoncurrentVersionTransitions = [];\n  }\n  if (output[\"NoncurrentVersionTransition\"] !== undefined) {\n    contents.NoncurrentVersionTransitions = deserializeAws_restXmlNoncurrentVersionTransitionList(__getArrayIfSingleItem(output[\"NoncurrentVersionTransition\"]), context);\n  }\n  if (output[\"NoncurrentVersionExpiration\"] !== undefined) {\n    contents.NoncurrentVersionExpiration = deserializeAws_restXmlNoncurrentVersionExpiration(output[\"NoncurrentVersionExpiration\"], context);\n  }\n  if (output[\"AbortIncompleteMultipartUpload\"] !== undefined) {\n    contents.AbortIncompleteMultipartUpload = deserializeAws_restXmlAbortIncompleteMultipartUpload(output[\"AbortIncompleteMultipartUpload\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlLifecycleRuleAndOperator = function (output, context) {\n  var contents = {\n    Prefix: undefined,\n    Tags: undefined\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlLifecycleRuleFilter = function (output, context) {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"]\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context)\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlLifecycleRuleAndOperator(output[\"And\"], context)\n    };\n  }\n  return {\n    $unknown: Object.entries(output)[0]\n  };\n};\nvar deserializeAws_restXmlLifecycleRules = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlLifecycleRule(entry, context);\n  });\n};\nvar deserializeAws_restXmlLoggingEnabled = function (output, context) {\n  var contents = {\n    TargetBucket: undefined,\n    TargetGrants: undefined,\n    TargetPrefix: undefined\n  };\n  if (output[\"TargetBucket\"] !== undefined) {\n    contents.TargetBucket = output[\"TargetBucket\"];\n  }\n  if (output.TargetGrants === \"\") {\n    contents.TargetGrants = [];\n  }\n  if (output[\"TargetGrants\"] !== undefined && output[\"TargetGrants\"][\"Grant\"] !== undefined) {\n    contents.TargetGrants = deserializeAws_restXmlTargetGrants(__getArrayIfSingleItem(output[\"TargetGrants\"][\"Grant\"]), context);\n  }\n  if (output[\"TargetPrefix\"] !== undefined) {\n    contents.TargetPrefix = output[\"TargetPrefix\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlMetrics = function (output, context) {\n  var contents = {\n    Status: undefined,\n    EventThreshold: undefined\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output[\"EventThreshold\"] !== undefined) {\n    contents.EventThreshold = deserializeAws_restXmlReplicationTimeValue(output[\"EventThreshold\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlMetricsAndOperator = function (output, context) {\n  var contents = {\n    Prefix: undefined,\n    Tags: undefined\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlMetricsConfiguration = function (output, context) {\n  var contents = {\n    Id: undefined,\n    Filter: undefined\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlMetricsFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlMetricsConfigurationList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlMetricsConfiguration(entry, context);\n  });\n};\nvar deserializeAws_restXmlMetricsFilter = function (output, context) {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"]\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context)\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlMetricsAndOperator(output[\"And\"], context)\n    };\n  }\n  return {\n    $unknown: Object.entries(output)[0]\n  };\n};\nvar deserializeAws_restXmlMultipartUpload = function (output, context) {\n  var contents = {\n    UploadId: undefined,\n    Key: undefined,\n    Initiated: undefined,\n    StorageClass: undefined,\n    Owner: undefined,\n    Initiator: undefined\n  };\n  if (output[\"UploadId\"] !== undefined) {\n    contents.UploadId = output[\"UploadId\"];\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"Initiated\"] !== undefined) {\n    contents.Initiated = new Date(output[\"Initiated\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  if (output[\"Initiator\"] !== undefined) {\n    contents.Initiator = deserializeAws_restXmlInitiator(output[\"Initiator\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlMultipartUploadList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlMultipartUpload(entry, context);\n  });\n};\nvar deserializeAws_restXmlNoncurrentVersionExpiration = function (output, context) {\n  var contents = {\n    NoncurrentDays: undefined\n  };\n  if (output[\"NoncurrentDays\"] !== undefined) {\n    contents.NoncurrentDays = parseInt(output[\"NoncurrentDays\"]);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlNoncurrentVersionTransition = function (output, context) {\n  var contents = {\n    NoncurrentDays: undefined,\n    StorageClass: undefined\n  };\n  if (output[\"NoncurrentDays\"] !== undefined) {\n    contents.NoncurrentDays = parseInt(output[\"NoncurrentDays\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlNoncurrentVersionTransitionList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlNoncurrentVersionTransition(entry, context);\n  });\n};\nvar deserializeAws_restXmlNotificationConfigurationFilter = function (output, context) {\n  var contents = {\n    Key: undefined\n  };\n  if (output[\"S3Key\"] !== undefined) {\n    contents.Key = deserializeAws_restXmlS3KeyFilter(output[\"S3Key\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXml_Object = function (output, context) {\n  var contents = {\n    Key: undefined,\n    LastModified: undefined,\n    ETag: undefined,\n    Size: undefined,\n    StorageClass: undefined,\n    Owner: undefined\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = parseInt(output[\"Size\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlObjectList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXml_Object(entry, context);\n  });\n};\nvar deserializeAws_restXmlObjectLockConfiguration = function (output, context) {\n  var contents = {\n    ObjectLockEnabled: undefined,\n    Rule: undefined\n  };\n  if (output[\"ObjectLockEnabled\"] !== undefined) {\n    contents.ObjectLockEnabled = output[\"ObjectLockEnabled\"];\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rule = deserializeAws_restXmlObjectLockRule(output[\"Rule\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlObjectLockLegalHold = function (output, context) {\n  var contents = {\n    Status: undefined\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlObjectLockRetention = function (output, context) {\n  var contents = {\n    Mode: undefined,\n    RetainUntilDate: undefined\n  };\n  if (output[\"Mode\"] !== undefined) {\n    contents.Mode = output[\"Mode\"];\n  }\n  if (output[\"RetainUntilDate\"] !== undefined) {\n    contents.RetainUntilDate = new Date(output[\"RetainUntilDate\"]);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlObjectLockRule = function (output, context) {\n  var contents = {\n    DefaultRetention: undefined\n  };\n  if (output[\"DefaultRetention\"] !== undefined) {\n    contents.DefaultRetention = deserializeAws_restXmlDefaultRetention(output[\"DefaultRetention\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlObjectVersion = function (output, context) {\n  var contents = {\n    ETag: undefined,\n    Size: undefined,\n    StorageClass: undefined,\n    Key: undefined,\n    VersionId: undefined,\n    IsLatest: undefined,\n    LastModified: undefined,\n    Owner: undefined\n  };\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = parseInt(output[\"Size\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n  if (output[\"IsLatest\"] !== undefined) {\n    contents.IsLatest = output[\"IsLatest\"] == \"true\";\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlObjectVersionList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlObjectVersion(entry, context);\n  });\n};\nvar deserializeAws_restXmlOwner = function (output, context) {\n  var contents = {\n    DisplayName: undefined,\n    ID: undefined\n  };\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = output[\"DisplayName\"];\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlOwnershipControls = function (output, context) {\n  var contents = {\n    Rules: undefined\n  };\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlOwnershipControlsRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlOwnershipControlsRule = function (output, context) {\n  var contents = {\n    ObjectOwnership: undefined\n  };\n  if (output[\"ObjectOwnership\"] !== undefined) {\n    contents.ObjectOwnership = output[\"ObjectOwnership\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlOwnershipControlsRules = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlOwnershipControlsRule(entry, context);\n  });\n};\nvar deserializeAws_restXmlPart = function (output, context) {\n  var contents = {\n    PartNumber: undefined,\n    LastModified: undefined,\n    ETag: undefined,\n    Size: undefined\n  };\n  if (output[\"PartNumber\"] !== undefined) {\n    contents.PartNumber = parseInt(output[\"PartNumber\"]);\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = parseInt(output[\"Size\"]);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlParts = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlPart(entry, context);\n  });\n};\nvar deserializeAws_restXmlPolicyStatus = function (output, context) {\n  var contents = {\n    IsPublic: undefined\n  };\n  if (output[\"IsPublic\"] !== undefined) {\n    contents.IsPublic = output[\"IsPublic\"] == \"true\";\n  }\n  return contents;\n};\nvar deserializeAws_restXmlPublicAccessBlockConfiguration = function (output, context) {\n  var contents = {\n    BlockPublicAcls: undefined,\n    IgnorePublicAcls: undefined,\n    BlockPublicPolicy: undefined,\n    RestrictPublicBuckets: undefined\n  };\n  if (output[\"BlockPublicAcls\"] !== undefined) {\n    contents.BlockPublicAcls = output[\"BlockPublicAcls\"] == \"true\";\n  }\n  if (output[\"IgnorePublicAcls\"] !== undefined) {\n    contents.IgnorePublicAcls = output[\"IgnorePublicAcls\"] == \"true\";\n  }\n  if (output[\"BlockPublicPolicy\"] !== undefined) {\n    contents.BlockPublicPolicy = output[\"BlockPublicPolicy\"] == \"true\";\n  }\n  if (output[\"RestrictPublicBuckets\"] !== undefined) {\n    contents.RestrictPublicBuckets = output[\"RestrictPublicBuckets\"] == \"true\";\n  }\n  return contents;\n};\nvar deserializeAws_restXmlQueueConfiguration = function (output, context) {\n  var contents = {\n    Id: undefined,\n    QueueArn: undefined,\n    Events: undefined,\n    Filter: undefined\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Queue\"] !== undefined) {\n    contents.QueueArn = output[\"Queue\"];\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  }\n  if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlQueueConfigurationList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlQueueConfiguration(entry, context);\n  });\n};\nvar deserializeAws_restXmlRedirect = function (output, context) {\n  var contents = {\n    HostName: undefined,\n    HttpRedirectCode: undefined,\n    Protocol: undefined,\n    ReplaceKeyPrefixWith: undefined,\n    ReplaceKeyWith: undefined\n  };\n  if (output[\"HostName\"] !== undefined) {\n    contents.HostName = output[\"HostName\"];\n  }\n  if (output[\"HttpRedirectCode\"] !== undefined) {\n    contents.HttpRedirectCode = output[\"HttpRedirectCode\"];\n  }\n  if (output[\"Protocol\"] !== undefined) {\n    contents.Protocol = output[\"Protocol\"];\n  }\n  if (output[\"ReplaceKeyPrefixWith\"] !== undefined) {\n    contents.ReplaceKeyPrefixWith = output[\"ReplaceKeyPrefixWith\"];\n  }\n  if (output[\"ReplaceKeyWith\"] !== undefined) {\n    contents.ReplaceKeyWith = output[\"ReplaceKeyWith\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlRedirectAllRequestsTo = function (output, context) {\n  var contents = {\n    HostName: undefined,\n    Protocol: undefined\n  };\n  if (output[\"HostName\"] !== undefined) {\n    contents.HostName = output[\"HostName\"];\n  }\n  if (output[\"Protocol\"] !== undefined) {\n    contents.Protocol = output[\"Protocol\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlReplicaModifications = function (output, context) {\n  var contents = {\n    Status: undefined\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlReplicationConfiguration = function (output, context) {\n  var contents = {\n    Role: undefined,\n    Rules: undefined\n  };\n  if (output[\"Role\"] !== undefined) {\n    contents.Role = output[\"Role\"];\n  }\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlReplicationRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlReplicationRule = function (output, context) {\n  var contents = {\n    ID: undefined,\n    Priority: undefined,\n    Prefix: undefined,\n    Filter: undefined,\n    Status: undefined,\n    SourceSelectionCriteria: undefined,\n    ExistingObjectReplication: undefined,\n    Destination: undefined,\n    DeleteMarkerReplication: undefined\n  };\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  if (output[\"Priority\"] !== undefined) {\n    contents.Priority = parseInt(output[\"Priority\"]);\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlReplicationRuleFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output[\"SourceSelectionCriteria\"] !== undefined) {\n    contents.SourceSelectionCriteria = deserializeAws_restXmlSourceSelectionCriteria(output[\"SourceSelectionCriteria\"], context);\n  }\n  if (output[\"ExistingObjectReplication\"] !== undefined) {\n    contents.ExistingObjectReplication = deserializeAws_restXmlExistingObjectReplication(output[\"ExistingObjectReplication\"], context);\n  }\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlDestination(output[\"Destination\"], context);\n  }\n  if (output[\"DeleteMarkerReplication\"] !== undefined) {\n    contents.DeleteMarkerReplication = deserializeAws_restXmlDeleteMarkerReplication(output[\"DeleteMarkerReplication\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlReplicationRuleAndOperator = function (output, context) {\n  var contents = {\n    Prefix: undefined,\n    Tags: undefined\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlReplicationRuleFilter = function (output, context) {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"]\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context)\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlReplicationRuleAndOperator(output[\"And\"], context)\n    };\n  }\n  return {\n    $unknown: Object.entries(output)[0]\n  };\n};\nvar deserializeAws_restXmlReplicationRules = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlReplicationRule(entry, context);\n  });\n};\nvar deserializeAws_restXmlReplicationTime = function (output, context) {\n  var contents = {\n    Status: undefined,\n    Time: undefined\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output[\"Time\"] !== undefined) {\n    contents.Time = deserializeAws_restXmlReplicationTimeValue(output[\"Time\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlReplicationTimeValue = function (output, context) {\n  var contents = {\n    Minutes: undefined\n  };\n  if (output[\"Minutes\"] !== undefined) {\n    contents.Minutes = parseInt(output[\"Minutes\"]);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlRoutingRule = function (output, context) {\n  var contents = {\n    Condition: undefined,\n    Redirect: undefined\n  };\n  if (output[\"Condition\"] !== undefined) {\n    contents.Condition = deserializeAws_restXmlCondition(output[\"Condition\"], context);\n  }\n  if (output[\"Redirect\"] !== undefined) {\n    contents.Redirect = deserializeAws_restXmlRedirect(output[\"Redirect\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlRoutingRules = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlRoutingRule(entry, context);\n  });\n};\nvar deserializeAws_restXmlS3KeyFilter = function (output, context) {\n  var contents = {\n    FilterRules: undefined\n  };\n  if (output.FilterRule === \"\") {\n    contents.FilterRules = [];\n  }\n  if (output[\"FilterRule\"] !== undefined) {\n    contents.FilterRules = deserializeAws_restXmlFilterRuleList(__getArrayIfSingleItem(output[\"FilterRule\"]), context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlServerSideEncryptionByDefault = function (output, context) {\n  var contents = {\n    SSEAlgorithm: undefined,\n    KMSMasterKeyID: undefined\n  };\n  if (output[\"SSEAlgorithm\"] !== undefined) {\n    contents.SSEAlgorithm = output[\"SSEAlgorithm\"];\n  }\n  if (output[\"KMSMasterKeyID\"] !== undefined) {\n    contents.KMSMasterKeyID = output[\"KMSMasterKeyID\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlServerSideEncryptionConfiguration = function (output, context) {\n  var contents = {\n    Rules: undefined\n  };\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlServerSideEncryptionRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlServerSideEncryptionRule = function (output, context) {\n  var contents = {\n    ApplyServerSideEncryptionByDefault: undefined,\n    BucketKeyEnabled: undefined\n  };\n  if (output[\"ApplyServerSideEncryptionByDefault\"] !== undefined) {\n    contents.ApplyServerSideEncryptionByDefault = deserializeAws_restXmlServerSideEncryptionByDefault(output[\"ApplyServerSideEncryptionByDefault\"], context);\n  }\n  if (output[\"BucketKeyEnabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output[\"BucketKeyEnabled\"] == \"true\";\n  }\n  return contents;\n};\nvar deserializeAws_restXmlServerSideEncryptionRules = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlServerSideEncryptionRule(entry, context);\n  });\n};\nvar deserializeAws_restXmlSourceSelectionCriteria = function (output, context) {\n  var contents = {\n    SseKmsEncryptedObjects: undefined,\n    ReplicaModifications: undefined\n  };\n  if (output[\"SseKmsEncryptedObjects\"] !== undefined) {\n    contents.SseKmsEncryptedObjects = deserializeAws_restXmlSseKmsEncryptedObjects(output[\"SseKmsEncryptedObjects\"], context);\n  }\n  if (output[\"ReplicaModifications\"] !== undefined) {\n    contents.ReplicaModifications = deserializeAws_restXmlReplicaModifications(output[\"ReplicaModifications\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlSSEKMS = function (output, context) {\n  var contents = {\n    KeyId: undefined\n  };\n  if (output[\"KeyId\"] !== undefined) {\n    contents.KeyId = output[\"KeyId\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlSseKmsEncryptedObjects = function (output, context) {\n  var contents = {\n    Status: undefined\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlSSES3 = function (output, context) {\n  var contents = {};\n  return contents;\n};\nvar deserializeAws_restXmlStorageClassAnalysis = function (output, context) {\n  var contents = {\n    DataExport: undefined\n  };\n  if (output[\"DataExport\"] !== undefined) {\n    contents.DataExport = deserializeAws_restXmlStorageClassAnalysisDataExport(output[\"DataExport\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlStorageClassAnalysisDataExport = function (output, context) {\n  var contents = {\n    OutputSchemaVersion: undefined,\n    Destination: undefined\n  };\n  if (output[\"OutputSchemaVersion\"] !== undefined) {\n    contents.OutputSchemaVersion = output[\"OutputSchemaVersion\"];\n  }\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlAnalyticsExportDestination(output[\"Destination\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlTag = function (output, context) {\n  var contents = {\n    Key: undefined,\n    Value: undefined\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"Value\"] !== undefined) {\n    contents.Value = output[\"Value\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlTagSet = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlTag(entry, context);\n  });\n};\nvar deserializeAws_restXmlTargetGrant = function (output, context) {\n  var contents = {\n    Grantee: undefined,\n    Permission: undefined\n  };\n  if (output[\"Grantee\"] !== undefined) {\n    contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n  }\n  if (output[\"Permission\"] !== undefined) {\n    contents.Permission = output[\"Permission\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlTargetGrants = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlTargetGrant(entry, context);\n  });\n};\nvar deserializeAws_restXmlTiering = function (output, context) {\n  var contents = {\n    Days: undefined,\n    AccessTier: undefined\n  };\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n  if (output[\"AccessTier\"] !== undefined) {\n    contents.AccessTier = output[\"AccessTier\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlTieringList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlTiering(entry, context);\n  });\n};\nvar deserializeAws_restXmlTopicConfiguration = function (output, context) {\n  var contents = {\n    Id: undefined,\n    TopicArn: undefined,\n    Events: undefined,\n    Filter: undefined\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Topic\"] !== undefined) {\n    contents.TopicArn = output[\"Topic\"];\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  }\n  if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\nvar deserializeAws_restXmlTopicConfigurationList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlTopicConfiguration(entry, context);\n  });\n};\nvar deserializeAws_restXmlTransition = function (output, context) {\n  var contents = {\n    Date: undefined,\n    Days: undefined,\n    StorageClass: undefined\n  };\n  if (output[\"Date\"] !== undefined) {\n    contents.Date = new Date(output[\"Date\"]);\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  return contents;\n};\nvar deserializeAws_restXmlTransitionList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restXmlTransition(entry, context);\n  });\n};\nvar deserializeMetadata = function (output) {\n  var _a;\n  return {\n    httpStatusCode: output.statusCode,\n    requestId: (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"]\n  };\n};\n// Collect low-level response body stream to Uint8Array.\nvar collectBody = function (streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n// Encode Uint8Array data into string with utf-8.\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\nvar isSerializableHeaderValue = function (value) {\n  return value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n};\nvar decodeEscapedXML = function (str) {\n  return str.replace(/&amp;/g, \"&\").replace(/&apos;/g, \"'\").replace(/&quot;/g, '\"').replace(/&gt;/g, \">\").replace(/&lt;/g, \"<\");\n};\nvar parseBody = function (streamBody, context) {\n  return collectBodyString(streamBody, context).then(function (encoded) {\n    if (encoded.length) {\n      var parsedObj = xmlParse(encoded, {\n        attributeNamePrefix: \"\",\n        ignoreAttributes: false,\n        parseNodeValue: false,\n        tagValueProcessor: function (val, tagName) {\n          return decodeEscapedXML(val);\n        }\n      });\n      var textNodeName = \"#text\";\n      var key = Object.keys(parsedObj)[0];\n      var parsedObjToReturn = parsedObj[key];\n      if (parsedObjToReturn[textNodeName]) {\n        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n        delete parsedObjToReturn[textNodeName];\n      }\n      return __getValueFromTextNode(parsedObjToReturn);\n    }\n    return {};\n  });\n};\nvar loadRestXmlErrorCode = function (output, data) {\n  if (data.Code !== undefined) {\n    return data.Code;\n  }\n  if (output.statusCode == 404) {\n    return \"NotFound\";\n  }\n  return \"\";\n};","map":{"version":3,"names":["AnalyticsFilter","LifecycleRuleFilter","MetricsFilter","ReplicationRuleFilter","HttpRequest","__HttpRequest","dateToUtcString","__dateToUtcString","extendedEncodeURIComponent","__extendedEncodeURIComponent","getArrayIfSingleItem","__getArrayIfSingleItem","getValueFromTextNode","__getValueFromTextNode","XmlNode","__XmlNode","XmlText","__XmlText","parse","xmlParse","serializeAws_restXmlAbortMultipartUploadCommand","input","context","__awaiter","headers","__assign","isSerializableHeaderValue","RequestPayer","ExpectedBucketOwner","resolvedPath","Bucket","undefined","labelValue","length","Error","replace","Key","split","map","segment","join","query","UploadId","uploadId","endpoint","_a","_c","sent","hostname","_b","protocol","port","method","path","body","serializeAws_restXmlCompleteMultipartUploadCommand","MultipartUpload","contents","serializeAws_restXmlCompletedMultipartUpload","addAttribute","toString","serializeAws_restXmlCopyObjectCommand","ACL","CacheControl","ContentDisposition","ContentEncoding","ContentLanguage","ContentType","CopySource","CopySourceIfMatch","CopySourceIfModifiedSince","CopySourceIfNoneMatch","CopySourceIfUnmodifiedSince","Expires","expires","GrantFullControl","GrantRead","GrantReadACP","GrantWriteACP","MetadataDirective","TaggingDirective","ServerSideEncryption","StorageClass","WebsiteRedirectLocation","SSECustomerAlgorithm","SSECustomerKey","SSECustomerKeyMD5","SSEKMSKeyId","SSEKMSEncryptionContext","BucketKeyEnabled","CopySourceSSECustomerAlgorithm","CopySourceSSECustomerKey","CopySourceSSECustomerKeyMD5","Tagging","ObjectLockMode","ObjectLockRetainUntilDate","toISOString","ObjectLockLegalHoldStatus","ExpectedSourceBucketOwner","Metadata","Object","keys","reduce","acc","suffix","toLowerCase","serializeAws_restXmlCreateBucketCommand","GrantWrite","ObjectLockEnabledForBucket","CreateBucketConfiguration","serializeAws_restXmlCreateBucketConfiguration","serializeAws_restXmlCreateMultipartUploadCommand","uploads","serializeAws_restXmlDeleteBucketCommand","serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand","analytics","Id","id","serializeAws_restXmlDeleteBucketCorsCommand","cors","serializeAws_restXmlDeleteBucketEncryptionCommand","encryption","serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand","serializeAws_restXmlDeleteBucketInventoryConfigurationCommand","inventory","serializeAws_restXmlDeleteBucketLifecycleCommand","lifecycle","serializeAws_restXmlDeleteBucketMetricsConfigurationCommand","metrics","serializeAws_restXmlDeleteBucketOwnershipControlsCommand","ownershipControls","serializeAws_restXmlDeleteBucketPolicyCommand","policy","serializeAws_restXmlDeleteBucketReplicationCommand","replication","serializeAws_restXmlDeleteBucketTaggingCommand","tagging","serializeAws_restXmlDeleteBucketWebsiteCommand","website","serializeAws_restXmlDeleteObjectCommand","MFA","BypassGovernanceRetention","VersionId","versionId","serializeAws_restXmlDeleteObjectsCommand","delete","Delete","serializeAws_restXmlDelete","serializeAws_restXmlDeleteObjectTaggingCommand","serializeAws_restXmlDeletePublicAccessBlockCommand","publicAccessBlock","serializeAws_restXmlGetBucketAccelerateConfigurationCommand","accelerate","serializeAws_restXmlGetBucketAclCommand","acl","serializeAws_restXmlGetBucketAnalyticsConfigurationCommand","serializeAws_restXmlGetBucketCorsCommand","serializeAws_restXmlGetBucketEncryptionCommand","serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand","serializeAws_restXmlGetBucketInventoryConfigurationCommand","serializeAws_restXmlGetBucketLifecycleConfigurationCommand","serializeAws_restXmlGetBucketLocationCommand","location","serializeAws_restXmlGetBucketLoggingCommand","logging","serializeAws_restXmlGetBucketMetricsConfigurationCommand","serializeAws_restXmlGetBucketNotificationConfigurationCommand","notification","serializeAws_restXmlGetBucketOwnershipControlsCommand","serializeAws_restXmlGetBucketPolicyCommand","serializeAws_restXmlGetBucketPolicyStatusCommand","policyStatus","serializeAws_restXmlGetBucketReplicationCommand","serializeAws_restXmlGetBucketRequestPaymentCommand","requestPayment","serializeAws_restXmlGetBucketTaggingCommand","serializeAws_restXmlGetBucketVersioningCommand","versioning","serializeAws_restXmlGetBucketWebsiteCommand","serializeAws_restXmlGetObjectCommand","IfMatch","IfModifiedSince","IfNoneMatch","IfUnmodifiedSince","Range","range","ResponseCacheControl","ResponseContentDisposition","ResponseContentEncoding","ResponseContentLanguage","ResponseContentType","ResponseExpires","PartNumber","partNumber","serializeAws_restXmlGetObjectAclCommand","serializeAws_restXmlGetObjectLegalHoldCommand","serializeAws_restXmlGetObjectLockConfigurationCommand","serializeAws_restXmlGetObjectRetentionCommand","retention","serializeAws_restXmlGetObjectTaggingCommand","serializeAws_restXmlGetObjectTorrentCommand","torrent","serializeAws_restXmlGetPublicAccessBlockCommand","serializeAws_restXmlHeadBucketCommand","serializeAws_restXmlHeadObjectCommand","serializeAws_restXmlListBucketAnalyticsConfigurationsCommand","ContinuationToken","serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand","serializeAws_restXmlListBucketInventoryConfigurationsCommand","serializeAws_restXmlListBucketMetricsConfigurationsCommand","serializeAws_restXmlListBucketsCommand","serializeAws_restXmlListMultipartUploadsCommand","Delimiter","delimiter","EncodingType","KeyMarker","MaxUploads","Prefix","prefix","UploadIdMarker","serializeAws_restXmlListObjectsCommand","Marker","marker","MaxKeys","serializeAws_restXmlListObjectsV2Command","FetchOwner","StartAfter","serializeAws_restXmlListObjectVersionsCommand","versions","VersionIdMarker","serializeAws_restXmlListPartsCommand","MaxParts","PartNumberMarker","serializeAws_restXmlPutBucketAccelerateConfigurationCommand","AccelerateConfiguration","serializeAws_restXmlAccelerateConfiguration","serializeAws_restXmlPutBucketAclCommand","ContentMD5","AccessControlPolicy","serializeAws_restXmlAccessControlPolicy","serializeAws_restXmlPutBucketAnalyticsConfigurationCommand","AnalyticsConfiguration","serializeAws_restXmlAnalyticsConfiguration","serializeAws_restXmlPutBucketCorsCommand","CORSConfiguration","serializeAws_restXmlCORSConfiguration","serializeAws_restXmlPutBucketEncryptionCommand","ServerSideEncryptionConfiguration","serializeAws_restXmlServerSideEncryptionConfiguration","serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand","IntelligentTieringConfiguration","serializeAws_restXmlIntelligentTieringConfiguration","serializeAws_restXmlPutBucketInventoryConfigurationCommand","InventoryConfiguration","serializeAws_restXmlInventoryConfiguration","serializeAws_restXmlPutBucketLifecycleConfigurationCommand","LifecycleConfiguration","serializeAws_restXmlBucketLifecycleConfiguration","serializeAws_restXmlPutBucketLoggingCommand","BucketLoggingStatus","serializeAws_restXmlBucketLoggingStatus","serializeAws_restXmlPutBucketMetricsConfigurationCommand","MetricsConfiguration","serializeAws_restXmlMetricsConfiguration","serializeAws_restXmlPutBucketNotificationConfigurationCommand","NotificationConfiguration","serializeAws_restXmlNotificationConfiguration","serializeAws_restXmlPutBucketOwnershipControlsCommand","OwnershipControls","serializeAws_restXmlOwnershipControls","serializeAws_restXmlPutBucketPolicyCommand","ConfirmRemoveSelfBucketAccess","Policy","serializeAws_restXmlPutBucketReplicationCommand","Token","ReplicationConfiguration","serializeAws_restXmlReplicationConfiguration","serializeAws_restXmlPutBucketRequestPaymentCommand","RequestPaymentConfiguration","serializeAws_restXmlRequestPaymentConfiguration","serializeAws_restXmlPutBucketTaggingCommand","serializeAws_restXmlTagging","serializeAws_restXmlPutBucketVersioningCommand","VersioningConfiguration","serializeAws_restXmlVersioningConfiguration","serializeAws_restXmlPutBucketWebsiteCommand","WebsiteConfiguration","serializeAws_restXmlWebsiteConfiguration","serializeAws_restXmlPutObjectCommand","ContentLength","Body","serializeAws_restXmlPutObjectAclCommand","serializeAws_restXmlPutObjectLegalHoldCommand","LegalHold","serializeAws_restXmlObjectLockLegalHold","serializeAws_restXmlPutObjectLockConfigurationCommand","ObjectLockConfiguration","serializeAws_restXmlObjectLockConfiguration","serializeAws_restXmlPutObjectRetentionCommand","Retention","serializeAws_restXmlObjectLockRetention","serializeAws_restXmlPutObjectTaggingCommand","serializeAws_restXmlPutPublicAccessBlockCommand","PublicAccessBlockConfiguration","serializeAws_restXmlPublicAccessBlockConfiguration","serializeAws_restXmlRestoreObjectCommand","restore","RestoreRequest","serializeAws_restXmlRestoreRequest","serializeAws_restXmlSelectObjectContentCommand","select","bodyNode","Expression","node","addChildNode","withName","ExpressionType","InputSerialization","serializeAws_restXmlInputSerialization","OutputSerialization","serializeAws_restXmlOutputSerialization","RequestProgress","serializeAws_restXmlRequestProgress","ScanRange","serializeAws_restXmlScanRange","serializeAws_restXmlUploadPartCommand","serializeAws_restXmlUploadPartCopyCommand","CopySourceRange","deserializeAws_restXmlAbortMultipartUploadCommand","output","statusCode","deserializeAws_restXmlAbortMultipartUploadCommandError","$metadata","deserializeMetadata","RequestCharged","collectBody","Promise","resolve","parseBody","parsedOutput","apply","concat","_d","_e","errorCode","loadRestXmlErrorCode","deserializeAws_restXmlNoSuchUploadResponse","response","name","parsedBody","code","Code","message","Message","$fault","reject","assign","deserializeAws_restXmlCompleteMultipartUploadCommand","deserializeAws_restXmlCompleteMultipartUploadCommandError","ETag","Expiration","Location","data","deserializeAws_restXmlCopyObjectCommand","deserializeAws_restXmlCopyObjectCommandError","CopyObjectResult","CopySourceVersionId","deserializeAws_restXmlCopyObjectResult","deserializeAws_restXmlObjectNotInActiveTierErrorResponse","deserializeAws_restXmlCreateBucketCommand","deserializeAws_restXmlCreateBucketCommandError","_f","deserializeAws_restXmlBucketAlreadyExistsResponse","deserializeAws_restXmlBucketAlreadyOwnedByYouResponse","deserializeAws_restXmlCreateMultipartUploadCommand","deserializeAws_restXmlCreateMultipartUploadCommandError","AbortDate","AbortRuleId","Date","deserializeAws_restXmlDeleteBucketCommand","deserializeAws_restXmlDeleteBucketCommandError","deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand","deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError","deserializeAws_restXmlDeleteBucketCorsCommand","deserializeAws_restXmlDeleteBucketCorsCommandError","deserializeAws_restXmlDeleteBucketEncryptionCommand","deserializeAws_restXmlDeleteBucketEncryptionCommandError","deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand","deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError","deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand","deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError","deserializeAws_restXmlDeleteBucketLifecycleCommand","deserializeAws_restXmlDeleteBucketLifecycleCommandError","deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand","deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError","deserializeAws_restXmlDeleteBucketOwnershipControlsCommand","deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError","deserializeAws_restXmlDeleteBucketPolicyCommand","deserializeAws_restXmlDeleteBucketPolicyCommandError","deserializeAws_restXmlDeleteBucketReplicationCommand","deserializeAws_restXmlDeleteBucketReplicationCommandError","deserializeAws_restXmlDeleteBucketTaggingCommand","deserializeAws_restXmlDeleteBucketTaggingCommandError","deserializeAws_restXmlDeleteBucketWebsiteCommand","deserializeAws_restXmlDeleteBucketWebsiteCommandError","deserializeAws_restXmlDeleteObjectCommand","deserializeAws_restXmlDeleteObjectCommandError","DeleteMarker","deserializeAws_restXmlDeleteObjectsCommand","deserializeAws_restXmlDeleteObjectsCommandError","Deleted","Errors","deserializeAws_restXmlDeletedObjects","deserializeAws_restXmlErrors","deserializeAws_restXmlDeleteObjectTaggingCommand","deserializeAws_restXmlDeleteObjectTaggingCommandError","deserializeAws_restXmlDeletePublicAccessBlockCommand","deserializeAws_restXmlDeletePublicAccessBlockCommandError","deserializeAws_restXmlGetBucketAccelerateConfigurationCommand","deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError","Status","deserializeAws_restXmlGetBucketAclCommand","deserializeAws_restXmlGetBucketAclCommandError","Grants","Owner","AccessControlList","deserializeAws_restXmlGrants","deserializeAws_restXmlOwner","deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand","deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError","deserializeAws_restXmlAnalyticsConfiguration","deserializeAws_restXmlGetBucketCorsCommand","deserializeAws_restXmlGetBucketCorsCommandError","CORSRules","CORSRule","deserializeAws_restXmlCORSRules","deserializeAws_restXmlGetBucketEncryptionCommand","deserializeAws_restXmlGetBucketEncryptionCommandError","deserializeAws_restXmlServerSideEncryptionConfiguration","deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand","deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError","deserializeAws_restXmlIntelligentTieringConfiguration","deserializeAws_restXmlGetBucketInventoryConfigurationCommand","deserializeAws_restXmlGetBucketInventoryConfigurationCommandError","deserializeAws_restXmlInventoryConfiguration","deserializeAws_restXmlGetBucketLifecycleConfigurationCommand","deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError","Rules","Rule","deserializeAws_restXmlLifecycleRules","deserializeAws_restXmlGetBucketLocationCommand","deserializeAws_restXmlGetBucketLocationCommandError","LocationConstraint","deserializeAws_restXmlGetBucketLoggingCommand","deserializeAws_restXmlGetBucketLoggingCommandError","LoggingEnabled","deserializeAws_restXmlLoggingEnabled","deserializeAws_restXmlGetBucketMetricsConfigurationCommand","deserializeAws_restXmlGetBucketMetricsConfigurationCommandError","deserializeAws_restXmlMetricsConfiguration","deserializeAws_restXmlGetBucketNotificationConfigurationCommand","deserializeAws_restXmlGetBucketNotificationConfigurationCommandError","LambdaFunctionConfigurations","QueueConfigurations","TopicConfigurations","CloudFunctionConfiguration","deserializeAws_restXmlLambdaFunctionConfigurationList","QueueConfiguration","deserializeAws_restXmlQueueConfigurationList","TopicConfiguration","deserializeAws_restXmlTopicConfigurationList","deserializeAws_restXmlGetBucketOwnershipControlsCommand","deserializeAws_restXmlGetBucketOwnershipControlsCommandError","deserializeAws_restXmlOwnershipControls","deserializeAws_restXmlGetBucketPolicyCommand","deserializeAws_restXmlGetBucketPolicyCommandError","deserializeAws_restXmlGetBucketPolicyStatusCommand","deserializeAws_restXmlGetBucketPolicyStatusCommandError","PolicyStatus","deserializeAws_restXmlPolicyStatus","deserializeAws_restXmlGetBucketReplicationCommand","deserializeAws_restXmlGetBucketReplicationCommandError","deserializeAws_restXmlReplicationConfiguration","deserializeAws_restXmlGetBucketRequestPaymentCommand","deserializeAws_restXmlGetBucketRequestPaymentCommandError","Payer","deserializeAws_restXmlGetBucketTaggingCommand","deserializeAws_restXmlGetBucketTaggingCommandError","TagSet","deserializeAws_restXmlTagSet","deserializeAws_restXmlGetBucketVersioningCommand","deserializeAws_restXmlGetBucketVersioningCommandError","MFADelete","deserializeAws_restXmlGetBucketWebsiteCommand","deserializeAws_restXmlGetBucketWebsiteCommandError","ErrorDocument","IndexDocument","RedirectAllRequestsTo","RoutingRules","deserializeAws_restXmlErrorDocument","deserializeAws_restXmlIndexDocument","deserializeAws_restXmlRedirectAllRequestsTo","deserializeAws_restXmlRoutingRules","deserializeAws_restXmlGetObjectCommand","deserializeAws_restXmlGetObjectCommandError","AcceptRanges","ContentRange","LastModified","MissingMeta","PartsCount","ReplicationStatus","Restore","TagCount","parseInt","forEach","header","startsWith","substring","deserializeAws_restXmlInvalidObjectStateResponse","deserializeAws_restXmlNoSuchKeyResponse","deserializeAws_restXmlGetObjectAclCommand","deserializeAws_restXmlGetObjectAclCommandError","deserializeAws_restXmlGetObjectLegalHoldCommand","deserializeAws_restXmlGetObjectLegalHoldCommandError","deserializeAws_restXmlObjectLockLegalHold","deserializeAws_restXmlGetObjectLockConfigurationCommand","deserializeAws_restXmlGetObjectLockConfigurationCommandError","deserializeAws_restXmlObjectLockConfiguration","deserializeAws_restXmlGetObjectRetentionCommand","deserializeAws_restXmlGetObjectRetentionCommandError","deserializeAws_restXmlObjectLockRetention","deserializeAws_restXmlGetObjectTaggingCommand","deserializeAws_restXmlGetObjectTaggingCommandError","deserializeAws_restXmlGetObjectTorrentCommand","deserializeAws_restXmlGetObjectTorrentCommandError","deserializeAws_restXmlGetPublicAccessBlockCommand","deserializeAws_restXmlGetPublicAccessBlockCommandError","deserializeAws_restXmlPublicAccessBlockConfiguration","deserializeAws_restXmlHeadBucketCommand","deserializeAws_restXmlHeadBucketCommandError","deserializeAws_restXmlNoSuchBucketResponse","deserializeAws_restXmlHeadObjectCommand","deserializeAws_restXmlHeadObjectCommandError","ArchiveStatus","deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand","deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError","AnalyticsConfigurationList","IsTruncated","NextContinuationToken","deserializeAws_restXmlAnalyticsConfigurationList","deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand","deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError","IntelligentTieringConfigurationList","deserializeAws_restXmlIntelligentTieringConfigurationList","deserializeAws_restXmlListBucketInventoryConfigurationsCommand","deserializeAws_restXmlListBucketInventoryConfigurationsCommandError","InventoryConfigurationList","deserializeAws_restXmlInventoryConfigurationList","deserializeAws_restXmlListBucketMetricsConfigurationsCommand","deserializeAws_restXmlListBucketMetricsConfigurationsCommandError","MetricsConfigurationList","deserializeAws_restXmlMetricsConfigurationList","deserializeAws_restXmlListBucketsCommand","deserializeAws_restXmlListBucketsCommandError","Buckets","deserializeAws_restXmlBuckets","deserializeAws_restXmlListMultipartUploadsCommand","deserializeAws_restXmlListMultipartUploadsCommandError","CommonPrefixes","NextKeyMarker","NextUploadIdMarker","Uploads","deserializeAws_restXmlCommonPrefixList","Upload","deserializeAws_restXmlMultipartUploadList","deserializeAws_restXmlListObjectsCommand","deserializeAws_restXmlListObjectsCommandError","Contents","Name","NextMarker","deserializeAws_restXmlObjectList","deserializeAws_restXmlListObjectsV2Command","deserializeAws_restXmlListObjectsV2CommandError","KeyCount","deserializeAws_restXmlListObjectVersionsCommand","deserializeAws_restXmlListObjectVersionsCommandError","DeleteMarkers","NextVersionIdMarker","Versions","deserializeAws_restXmlDeleteMarkers","Version","deserializeAws_restXmlObjectVersionList","deserializeAws_restXmlListPartsCommand","deserializeAws_restXmlListPartsCommandError","Initiator","NextPartNumberMarker","Parts","deserializeAws_restXmlInitiator","Part","deserializeAws_restXmlParts","deserializeAws_restXmlPutBucketAccelerateConfigurationCommand","deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError","deserializeAws_restXmlPutBucketAclCommand","deserializeAws_restXmlPutBucketAclCommandError","deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand","deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError","deserializeAws_restXmlPutBucketCorsCommand","deserializeAws_restXmlPutBucketCorsCommandError","deserializeAws_restXmlPutBucketEncryptionCommand","deserializeAws_restXmlPutBucketEncryptionCommandError","deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand","deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError","deserializeAws_restXmlPutBucketInventoryConfigurationCommand","deserializeAws_restXmlPutBucketInventoryConfigurationCommandError","deserializeAws_restXmlPutBucketLifecycleConfigurationCommand","deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError","deserializeAws_restXmlPutBucketLoggingCommand","deserializeAws_restXmlPutBucketLoggingCommandError","deserializeAws_restXmlPutBucketMetricsConfigurationCommand","deserializeAws_restXmlPutBucketMetricsConfigurationCommandError","deserializeAws_restXmlPutBucketNotificationConfigurationCommand","deserializeAws_restXmlPutBucketNotificationConfigurationCommandError","deserializeAws_restXmlPutBucketOwnershipControlsCommand","deserializeAws_restXmlPutBucketOwnershipControlsCommandError","deserializeAws_restXmlPutBucketPolicyCommand","deserializeAws_restXmlPutBucketPolicyCommandError","deserializeAws_restXmlPutBucketReplicationCommand","deserializeAws_restXmlPutBucketReplicationCommandError","deserializeAws_restXmlPutBucketRequestPaymentCommand","deserializeAws_restXmlPutBucketRequestPaymentCommandError","deserializeAws_restXmlPutBucketTaggingCommand","deserializeAws_restXmlPutBucketTaggingCommandError","deserializeAws_restXmlPutBucketVersioningCommand","deserializeAws_restXmlPutBucketVersioningCommandError","deserializeAws_restXmlPutBucketWebsiteCommand","deserializeAws_restXmlPutBucketWebsiteCommandError","deserializeAws_restXmlPutObjectCommand","deserializeAws_restXmlPutObjectCommandError","deserializeAws_restXmlPutObjectAclCommand","deserializeAws_restXmlPutObjectAclCommandError","deserializeAws_restXmlPutObjectLegalHoldCommand","deserializeAws_restXmlPutObjectLegalHoldCommandError","deserializeAws_restXmlPutObjectLockConfigurationCommand","deserializeAws_restXmlPutObjectLockConfigurationCommandError","deserializeAws_restXmlPutObjectRetentionCommand","deserializeAws_restXmlPutObjectRetentionCommandError","deserializeAws_restXmlPutObjectTaggingCommand","deserializeAws_restXmlPutObjectTaggingCommandError","deserializeAws_restXmlPutPublicAccessBlockCommand","deserializeAws_restXmlPutPublicAccessBlockCommandError","deserializeAws_restXmlRestoreObjectCommand","deserializeAws_restXmlRestoreObjectCommandError","RestoreOutputPath","deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse","deserializeAws_restXmlSelectObjectContentCommand","deserializeAws_restXmlSelectObjectContentCommandError","Payload","eventStreamMarshaller","deserialize","event","eventName","eventHeaders","entries","accummulator","curr","value","eventMessage","parsedEvent","deserializeAws_restXmlSelectObjectContentEventStream_event","deserializeAws_restXmlUploadPartCommand","deserializeAws_restXmlUploadPartCommandError","deserializeAws_restXmlUploadPartCopyCommand","deserializeAws_restXmlUploadPartCopyCommandError","CopyPartResult","deserializeAws_restXmlCopyPartResult","deserializeAws_restXmlRecordsEvent_event","Records","deserializeAws_restXmlStatsEvent_event","Stats","deserializeAws_restXmlProgressEvent_event","Progress","deserializeAws_restXmlContinuationEvent_event","Cont","deserializeAws_restXmlEndEvent_event","End","$unknown","Details","AccessTier","serializeAws_restXmlAbortIncompleteMultipartUpload","DaysAfterInitiation","String","nodes","serializeAws_restXmlGrants","containerNode_1","serializeAws_restXmlOwner","serializeAws_restXmlAccessControlTranslation","serializeAws_restXmlAllowedHeaders","filter","e","entry","serializeAws_restXmlAllowedMethods","serializeAws_restXmlAllowedOrigins","serializeAws_restXmlAnalyticsAndOperator","Tags","serializeAws_restXmlTagSet","Filter","serializeAws_restXmlAnalyticsFilter","StorageClassAnalysis","serializeAws_restXmlStorageClassAnalysis","serializeAws_restXmlAnalyticsExportDestination","S3BucketDestination","serializeAws_restXmlAnalyticsS3BucketDestination","visit","Tag","serializeAws_restXmlTag","And","_","Format","BucketAccountId","serializeAws_restXmlLifecycleRules","serializeAws_restXmlLoggingEnabled","serializeAws_restXmlCompletedPartList","serializeAws_restXmlCompletedPart","serializeAws_restXmlCondition","HttpErrorCodeReturnedEquals","KeyPrefixEquals","serializeAws_restXmlCORSRules","serializeAws_restXmlCORSRule","AllowedHeaders","AllowedMethods","AllowedOrigins","ExposeHeaders","serializeAws_restXmlExposeHeaders","MaxAgeSeconds","serializeAws_restXmlCSVInput","FileHeaderInfo","Comments","QuoteEscapeCharacter","RecordDelimiter","FieldDelimiter","QuoteCharacter","AllowQuotedRecordDelimiter","serializeAws_restXmlCSVOutput","QuoteFields","serializeAws_restXmlDefaultRetention","Mode","Days","Years","Objects","serializeAws_restXmlObjectIdentifierList","Quiet","serializeAws_restXmlDeleteMarkerReplication","serializeAws_restXmlDestination","Account","AccessControlTranslation","EncryptionConfiguration","serializeAws_restXmlEncryptionConfiguration","ReplicationTime","serializeAws_restXmlReplicationTime","Metrics","serializeAws_restXmlMetrics","serializeAws_restXmlEncryption","EncryptionType","KMSKeyId","KMSContext","ReplicaKmsKeyID","serializeAws_restXmlErrorDocument","serializeAws_restXmlEventList","serializeAws_restXmlExistingObjectReplication","serializeAws_restXmlFilterRule","Value","serializeAws_restXmlFilterRuleList","serializeAws_restXmlGlacierJobParameters","Tier","serializeAws_restXmlGrant","Grantee","serializeAws_restXmlGrantee","Permission","DisplayName","EmailAddress","ID","URI","Type","serializeAws_restXmlIndexDocument","Suffix","CSV","CompressionType","JSON","serializeAws_restXmlJSONInput","Parquet","serializeAws_restXmlParquetInput","serializeAws_restXmlIntelligentTieringAndOperator","serializeAws_restXmlIntelligentTieringFilter","Tierings","serializeAws_restXmlTieringList","Destination","serializeAws_restXmlInventoryDestination","IsEnabled","serializeAws_restXmlInventoryFilter","IncludedObjectVersions","OptionalFields","serializeAws_restXmlInventoryOptionalFields","containerNode_2","Schedule","serializeAws_restXmlInventorySchedule","serializeAws_restXmlInventoryS3BucketDestination","serializeAws_restXmlInventoryEncryption","SSES3","serializeAws_restXmlSSES3","SSEKMS","serializeAws_restXmlSSEKMS","AccountId","Encryption","Frequency","serializeAws_restXmlJSONOutput","serializeAws_restXmlLambdaFunctionConfiguration","LambdaFunctionArn","Events","serializeAws_restXmlNotificationConfigurationFilter","serializeAws_restXmlLambdaFunctionConfigurationList","serializeAws_restXmlLifecycleExpiration","ExpiredObjectDeleteMarker","serializeAws_restXmlLifecycleRule","serializeAws_restXmlLifecycleRuleFilter","Transitions","serializeAws_restXmlTransitionList","NoncurrentVersionTransitions","serializeAws_restXmlNoncurrentVersionTransitionList","NoncurrentVersionExpiration","serializeAws_restXmlNoncurrentVersionExpiration","AbortIncompleteMultipartUpload","serializeAws_restXmlLifecycleRuleAndOperator","TargetBucket","TargetGrants","serializeAws_restXmlTargetGrants","containerNode_3","TargetPrefix","serializeAws_restXmlMetadataEntry","EventThreshold","serializeAws_restXmlReplicationTimeValue","serializeAws_restXmlMetricsAndOperator","serializeAws_restXmlMetricsFilter","NoncurrentDays","serializeAws_restXmlNoncurrentVersionTransition","serializeAws_restXmlTopicConfigurationList","serializeAws_restXmlQueueConfigurationList","serializeAws_restXmlS3KeyFilter","serializeAws_restXmlObjectIdentifier","ObjectLockEnabled","serializeAws_restXmlObjectLockRule","RetainUntilDate","DefaultRetention","serializeAws_restXmlOutputLocation","S3","serializeAws_restXmlS3Location","serializeAws_restXmlOwnershipControlsRules","serializeAws_restXmlOwnershipControlsRule","ObjectOwnership","BlockPublicAcls","IgnorePublicAcls","BlockPublicPolicy","RestrictPublicBuckets","serializeAws_restXmlQueueConfiguration","QueueArn","serializeAws_restXmlRedirect","HostName","HttpRedirectCode","Protocol","ReplaceKeyPrefixWith","ReplaceKeyWith","serializeAws_restXmlRedirectAllRequestsTo","serializeAws_restXmlReplicaModifications","Role","serializeAws_restXmlReplicationRules","serializeAws_restXmlReplicationRule","Priority","serializeAws_restXmlReplicationRuleFilter","SourceSelectionCriteria","serializeAws_restXmlSourceSelectionCriteria","ExistingObjectReplication","DeleteMarkerReplication","serializeAws_restXmlReplicationRuleAndOperator","Time","Minutes","Enabled","GlacierJobParameters","Description","SelectParameters","serializeAws_restXmlSelectParameters","OutputLocation","serializeAws_restXmlRoutingRule","Condition","Redirect","serializeAws_restXmlRoutingRules","FilterRules","BucketName","CannedACL","containerNode_4","UserMetadata","serializeAws_restXmlUserMetadata","containerNode_5","Start","serializeAws_restXmlServerSideEncryptionByDefault","SSEAlgorithm","KMSMasterKeyID","serializeAws_restXmlServerSideEncryptionRules","serializeAws_restXmlServerSideEncryptionRule","ApplyServerSideEncryptionByDefault","SseKmsEncryptedObjects","serializeAws_restXmlSseKmsEncryptedObjects","ReplicaModifications","KeyId","DataExport","serializeAws_restXmlStorageClassAnalysisDataExport","OutputSchemaVersion","containerNode_6","serializeAws_restXmlTargetGrant","serializeAws_restXmlTiering","serializeAws_restXmlTopicConfiguration","TopicArn","serializeAws_restXmlTransition","containerNode_7","deserializeAws_restXmlAbortIncompleteMultipartUpload","deserializeAws_restXmlAccessControlTranslation","deserializeAws_restXmlAllowedHeaders","deserializeAws_restXmlAllowedMethods","deserializeAws_restXmlAllowedOrigins","deserializeAws_restXmlAnalyticsAndOperator","deserializeAws_restXmlAnalyticsFilter","deserializeAws_restXmlStorageClassAnalysis","deserializeAws_restXmlAnalyticsExportDestination","deserializeAws_restXmlAnalyticsS3BucketDestination","deserializeAws_restXmlTag","deserializeAws_restXmlBucket","CreationDate","deserializeAws_restXmlCommonPrefix","deserializeAws_restXmlCondition","deserializeAws_restXmlCORSRule","AllowedHeader","AllowedMethod","AllowedOrigin","ExposeHeader","deserializeAws_restXmlExposeHeaders","deserializeAws_restXmlDefaultRetention","deserializeAws_restXmlDeletedObject","DeleteMarkerVersionId","deserializeAws_restXmlDeleteMarkerEntry","IsLatest","deserializeAws_restXmlDeleteMarkerReplication","deserializeAws_restXmlDestination","deserializeAws_restXmlEncryptionConfiguration","deserializeAws_restXmlReplicationTime","deserializeAws_restXmlMetrics","deserializeAws_restXml_Error","deserializeAws_restXmlEventList","deserializeAws_restXmlExistingObjectReplication","deserializeAws_restXmlFilterRule","deserializeAws_restXmlFilterRuleList","deserializeAws_restXmlGrant","deserializeAws_restXmlGrantee","deserializeAws_restXmlIntelligentTieringAndOperator","deserializeAws_restXmlIntelligentTieringFilter","Tiering","deserializeAws_restXmlTieringList","deserializeAws_restXmlInventoryDestination","deserializeAws_restXmlInventoryFilter","deserializeAws_restXmlInventoryOptionalFields","deserializeAws_restXmlInventorySchedule","deserializeAws_restXmlInventoryS3BucketDestination","deserializeAws_restXmlInventoryEncryption","deserializeAws_restXmlSSES3","deserializeAws_restXmlSSEKMS","deserializeAws_restXmlLambdaFunctionConfiguration","Event","deserializeAws_restXmlNotificationConfigurationFilter","deserializeAws_restXmlLifecycleExpiration","deserializeAws_restXmlLifecycleRule","deserializeAws_restXmlLifecycleRuleFilter","Transition","deserializeAws_restXmlTransitionList","NoncurrentVersionTransition","deserializeAws_restXmlNoncurrentVersionTransitionList","deserializeAws_restXmlNoncurrentVersionExpiration","deserializeAws_restXmlLifecycleRuleAndOperator","deserializeAws_restXmlTargetGrants","deserializeAws_restXmlReplicationTimeValue","deserializeAws_restXmlMetricsAndOperator","deserializeAws_restXmlMetricsFilter","deserializeAws_restXmlMultipartUpload","Initiated","deserializeAws_restXmlNoncurrentVersionTransition","deserializeAws_restXmlS3KeyFilter","deserializeAws_restXml_Object","Size","deserializeAws_restXmlObjectLockRule","deserializeAws_restXmlObjectVersion","deserializeAws_restXmlOwnershipControlsRules","deserializeAws_restXmlOwnershipControlsRule","deserializeAws_restXmlPart","IsPublic","deserializeAws_restXmlQueueConfiguration","deserializeAws_restXmlRedirect","deserializeAws_restXmlReplicaModifications","deserializeAws_restXmlReplicationRules","deserializeAws_restXmlReplicationRule","deserializeAws_restXmlReplicationRuleFilter","deserializeAws_restXmlSourceSelectionCriteria","deserializeAws_restXmlReplicationRuleAndOperator","deserializeAws_restXmlRoutingRule","FilterRule","deserializeAws_restXmlServerSideEncryptionByDefault","deserializeAws_restXmlServerSideEncryptionRules","deserializeAws_restXmlServerSideEncryptionRule","deserializeAws_restXmlSseKmsEncryptedObjects","deserializeAws_restXmlStorageClassAnalysisDataExport","deserializeAws_restXmlTargetGrant","deserializeAws_restXmlTiering","deserializeAws_restXmlTopicConfiguration","deserializeAws_restXmlTransition","httpStatusCode","requestId","extendedRequestId","cfId","streamBody","Uint8Array","streamCollector","collectBodyString","then","utf8Encoder","getOwnPropertyNames","includes","size","decodeEscapedXML","str","encoded","parsedObj","attributeNamePrefix","ignoreAttributes","parseNodeValue","tagValueProcessor","val","tagName","textNodeName","key","parsedObjToReturn"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-sdk\\client-s3\\protocols\\Aws_restXml.ts"],"sourcesContent":["import {\n  AbortMultipartUploadCommandInput,\n  AbortMultipartUploadCommandOutput,\n} from \"../commands/AbortMultipartUploadCommand\";\nimport {\n  CompleteMultipartUploadCommandInput,\n  CompleteMultipartUploadCommandOutput,\n} from \"../commands/CompleteMultipartUploadCommand\";\nimport { CopyObjectCommandInput, CopyObjectCommandOutput } from \"../commands/CopyObjectCommand\";\nimport { CreateBucketCommandInput, CreateBucketCommandOutput } from \"../commands/CreateBucketCommand\";\nimport {\n  CreateMultipartUploadCommandInput,\n  CreateMultipartUploadCommandOutput,\n} from \"../commands/CreateMultipartUploadCommand\";\nimport {\n  DeleteBucketAnalyticsConfigurationCommandInput,\n  DeleteBucketAnalyticsConfigurationCommandOutput,\n} from \"../commands/DeleteBucketAnalyticsConfigurationCommand\";\nimport { DeleteBucketCommandInput, DeleteBucketCommandOutput } from \"../commands/DeleteBucketCommand\";\nimport { DeleteBucketCorsCommandInput, DeleteBucketCorsCommandOutput } from \"../commands/DeleteBucketCorsCommand\";\nimport {\n  DeleteBucketEncryptionCommandInput,\n  DeleteBucketEncryptionCommandOutput,\n} from \"../commands/DeleteBucketEncryptionCommand\";\nimport {\n  DeleteBucketIntelligentTieringConfigurationCommandInput,\n  DeleteBucketIntelligentTieringConfigurationCommandOutput,\n} from \"../commands/DeleteBucketIntelligentTieringConfigurationCommand\";\nimport {\n  DeleteBucketInventoryConfigurationCommandInput,\n  DeleteBucketInventoryConfigurationCommandOutput,\n} from \"../commands/DeleteBucketInventoryConfigurationCommand\";\nimport {\n  DeleteBucketLifecycleCommandInput,\n  DeleteBucketLifecycleCommandOutput,\n} from \"../commands/DeleteBucketLifecycleCommand\";\nimport {\n  DeleteBucketMetricsConfigurationCommandInput,\n  DeleteBucketMetricsConfigurationCommandOutput,\n} from \"../commands/DeleteBucketMetricsConfigurationCommand\";\nimport {\n  DeleteBucketOwnershipControlsCommandInput,\n  DeleteBucketOwnershipControlsCommandOutput,\n} from \"../commands/DeleteBucketOwnershipControlsCommand\";\nimport { DeleteBucketPolicyCommandInput, DeleteBucketPolicyCommandOutput } from \"../commands/DeleteBucketPolicyCommand\";\nimport {\n  DeleteBucketReplicationCommandInput,\n  DeleteBucketReplicationCommandOutput,\n} from \"../commands/DeleteBucketReplicationCommand\";\nimport {\n  DeleteBucketTaggingCommandInput,\n  DeleteBucketTaggingCommandOutput,\n} from \"../commands/DeleteBucketTaggingCommand\";\nimport {\n  DeleteBucketWebsiteCommandInput,\n  DeleteBucketWebsiteCommandOutput,\n} from \"../commands/DeleteBucketWebsiteCommand\";\nimport { DeleteObjectCommandInput, DeleteObjectCommandOutput } from \"../commands/DeleteObjectCommand\";\nimport {\n  DeleteObjectTaggingCommandInput,\n  DeleteObjectTaggingCommandOutput,\n} from \"../commands/DeleteObjectTaggingCommand\";\nimport { DeleteObjectsCommandInput, DeleteObjectsCommandOutput } from \"../commands/DeleteObjectsCommand\";\nimport {\n  DeletePublicAccessBlockCommandInput,\n  DeletePublicAccessBlockCommandOutput,\n} from \"../commands/DeletePublicAccessBlockCommand\";\nimport {\n  GetBucketAccelerateConfigurationCommandInput,\n  GetBucketAccelerateConfigurationCommandOutput,\n} from \"../commands/GetBucketAccelerateConfigurationCommand\";\nimport { GetBucketAclCommandInput, GetBucketAclCommandOutput } from \"../commands/GetBucketAclCommand\";\nimport {\n  GetBucketAnalyticsConfigurationCommandInput,\n  GetBucketAnalyticsConfigurationCommandOutput,\n} from \"../commands/GetBucketAnalyticsConfigurationCommand\";\nimport { GetBucketCorsCommandInput, GetBucketCorsCommandOutput } from \"../commands/GetBucketCorsCommand\";\nimport {\n  GetBucketEncryptionCommandInput,\n  GetBucketEncryptionCommandOutput,\n} from \"../commands/GetBucketEncryptionCommand\";\nimport {\n  GetBucketIntelligentTieringConfigurationCommandInput,\n  GetBucketIntelligentTieringConfigurationCommandOutput,\n} from \"../commands/GetBucketIntelligentTieringConfigurationCommand\";\nimport {\n  GetBucketInventoryConfigurationCommandInput,\n  GetBucketInventoryConfigurationCommandOutput,\n} from \"../commands/GetBucketInventoryConfigurationCommand\";\nimport {\n  GetBucketLifecycleConfigurationCommandInput,\n  GetBucketLifecycleConfigurationCommandOutput,\n} from \"../commands/GetBucketLifecycleConfigurationCommand\";\nimport { GetBucketLocationCommandInput, GetBucketLocationCommandOutput } from \"../commands/GetBucketLocationCommand\";\nimport { GetBucketLoggingCommandInput, GetBucketLoggingCommandOutput } from \"../commands/GetBucketLoggingCommand\";\nimport {\n  GetBucketMetricsConfigurationCommandInput,\n  GetBucketMetricsConfigurationCommandOutput,\n} from \"../commands/GetBucketMetricsConfigurationCommand\";\nimport {\n  GetBucketNotificationConfigurationCommandInput,\n  GetBucketNotificationConfigurationCommandOutput,\n} from \"../commands/GetBucketNotificationConfigurationCommand\";\nimport {\n  GetBucketOwnershipControlsCommandInput,\n  GetBucketOwnershipControlsCommandOutput,\n} from \"../commands/GetBucketOwnershipControlsCommand\";\nimport { GetBucketPolicyCommandInput, GetBucketPolicyCommandOutput } from \"../commands/GetBucketPolicyCommand\";\nimport {\n  GetBucketPolicyStatusCommandInput,\n  GetBucketPolicyStatusCommandOutput,\n} from \"../commands/GetBucketPolicyStatusCommand\";\nimport {\n  GetBucketReplicationCommandInput,\n  GetBucketReplicationCommandOutput,\n} from \"../commands/GetBucketReplicationCommand\";\nimport {\n  GetBucketRequestPaymentCommandInput,\n  GetBucketRequestPaymentCommandOutput,\n} from \"../commands/GetBucketRequestPaymentCommand\";\nimport { GetBucketTaggingCommandInput, GetBucketTaggingCommandOutput } from \"../commands/GetBucketTaggingCommand\";\nimport {\n  GetBucketVersioningCommandInput,\n  GetBucketVersioningCommandOutput,\n} from \"../commands/GetBucketVersioningCommand\";\nimport { GetBucketWebsiteCommandInput, GetBucketWebsiteCommandOutput } from \"../commands/GetBucketWebsiteCommand\";\nimport { GetObjectAclCommandInput, GetObjectAclCommandOutput } from \"../commands/GetObjectAclCommand\";\nimport { GetObjectCommandInput, GetObjectCommandOutput } from \"../commands/GetObjectCommand\";\nimport { GetObjectLegalHoldCommandInput, GetObjectLegalHoldCommandOutput } from \"../commands/GetObjectLegalHoldCommand\";\nimport {\n  GetObjectLockConfigurationCommandInput,\n  GetObjectLockConfigurationCommandOutput,\n} from \"../commands/GetObjectLockConfigurationCommand\";\nimport { GetObjectRetentionCommandInput, GetObjectRetentionCommandOutput } from \"../commands/GetObjectRetentionCommand\";\nimport { GetObjectTaggingCommandInput, GetObjectTaggingCommandOutput } from \"../commands/GetObjectTaggingCommand\";\nimport { GetObjectTorrentCommandInput, GetObjectTorrentCommandOutput } from \"../commands/GetObjectTorrentCommand\";\nimport {\n  GetPublicAccessBlockCommandInput,\n  GetPublicAccessBlockCommandOutput,\n} from \"../commands/GetPublicAccessBlockCommand\";\nimport { HeadBucketCommandInput, HeadBucketCommandOutput } from \"../commands/HeadBucketCommand\";\nimport { HeadObjectCommandInput, HeadObjectCommandOutput } from \"../commands/HeadObjectCommand\";\nimport {\n  ListBucketAnalyticsConfigurationsCommandInput,\n  ListBucketAnalyticsConfigurationsCommandOutput,\n} from \"../commands/ListBucketAnalyticsConfigurationsCommand\";\nimport {\n  ListBucketIntelligentTieringConfigurationsCommandInput,\n  ListBucketIntelligentTieringConfigurationsCommandOutput,\n} from \"../commands/ListBucketIntelligentTieringConfigurationsCommand\";\nimport {\n  ListBucketInventoryConfigurationsCommandInput,\n  ListBucketInventoryConfigurationsCommandOutput,\n} from \"../commands/ListBucketInventoryConfigurationsCommand\";\nimport {\n  ListBucketMetricsConfigurationsCommandInput,\n  ListBucketMetricsConfigurationsCommandOutput,\n} from \"../commands/ListBucketMetricsConfigurationsCommand\";\nimport { ListBucketsCommandInput, ListBucketsCommandOutput } from \"../commands/ListBucketsCommand\";\nimport {\n  ListMultipartUploadsCommandInput,\n  ListMultipartUploadsCommandOutput,\n} from \"../commands/ListMultipartUploadsCommand\";\nimport { ListObjectVersionsCommandInput, ListObjectVersionsCommandOutput } from \"../commands/ListObjectVersionsCommand\";\nimport { ListObjectsCommandInput, ListObjectsCommandOutput } from \"../commands/ListObjectsCommand\";\nimport { ListObjectsV2CommandInput, ListObjectsV2CommandOutput } from \"../commands/ListObjectsV2Command\";\nimport { ListPartsCommandInput, ListPartsCommandOutput } from \"../commands/ListPartsCommand\";\nimport {\n  PutBucketAccelerateConfigurationCommandInput,\n  PutBucketAccelerateConfigurationCommandOutput,\n} from \"../commands/PutBucketAccelerateConfigurationCommand\";\nimport { PutBucketAclCommandInput, PutBucketAclCommandOutput } from \"../commands/PutBucketAclCommand\";\nimport {\n  PutBucketAnalyticsConfigurationCommandInput,\n  PutBucketAnalyticsConfigurationCommandOutput,\n} from \"../commands/PutBucketAnalyticsConfigurationCommand\";\nimport { PutBucketCorsCommandInput, PutBucketCorsCommandOutput } from \"../commands/PutBucketCorsCommand\";\nimport {\n  PutBucketEncryptionCommandInput,\n  PutBucketEncryptionCommandOutput,\n} from \"../commands/PutBucketEncryptionCommand\";\nimport {\n  PutBucketIntelligentTieringConfigurationCommandInput,\n  PutBucketIntelligentTieringConfigurationCommandOutput,\n} from \"../commands/PutBucketIntelligentTieringConfigurationCommand\";\nimport {\n  PutBucketInventoryConfigurationCommandInput,\n  PutBucketInventoryConfigurationCommandOutput,\n} from \"../commands/PutBucketInventoryConfigurationCommand\";\nimport {\n  PutBucketLifecycleConfigurationCommandInput,\n  PutBucketLifecycleConfigurationCommandOutput,\n} from \"../commands/PutBucketLifecycleConfigurationCommand\";\nimport { PutBucketLoggingCommandInput, PutBucketLoggingCommandOutput } from \"../commands/PutBucketLoggingCommand\";\nimport {\n  PutBucketMetricsConfigurationCommandInput,\n  PutBucketMetricsConfigurationCommandOutput,\n} from \"../commands/PutBucketMetricsConfigurationCommand\";\nimport {\n  PutBucketNotificationConfigurationCommandInput,\n  PutBucketNotificationConfigurationCommandOutput,\n} from \"../commands/PutBucketNotificationConfigurationCommand\";\nimport {\n  PutBucketOwnershipControlsCommandInput,\n  PutBucketOwnershipControlsCommandOutput,\n} from \"../commands/PutBucketOwnershipControlsCommand\";\nimport { PutBucketPolicyCommandInput, PutBucketPolicyCommandOutput } from \"../commands/PutBucketPolicyCommand\";\nimport {\n  PutBucketReplicationCommandInput,\n  PutBucketReplicationCommandOutput,\n} from \"../commands/PutBucketReplicationCommand\";\nimport {\n  PutBucketRequestPaymentCommandInput,\n  PutBucketRequestPaymentCommandOutput,\n} from \"../commands/PutBucketRequestPaymentCommand\";\nimport { PutBucketTaggingCommandInput, PutBucketTaggingCommandOutput } from \"../commands/PutBucketTaggingCommand\";\nimport {\n  PutBucketVersioningCommandInput,\n  PutBucketVersioningCommandOutput,\n} from \"../commands/PutBucketVersioningCommand\";\nimport { PutBucketWebsiteCommandInput, PutBucketWebsiteCommandOutput } from \"../commands/PutBucketWebsiteCommand\";\nimport { PutObjectAclCommandInput, PutObjectAclCommandOutput } from \"../commands/PutObjectAclCommand\";\nimport { PutObjectCommandInput, PutObjectCommandOutput } from \"../commands/PutObjectCommand\";\nimport { PutObjectLegalHoldCommandInput, PutObjectLegalHoldCommandOutput } from \"../commands/PutObjectLegalHoldCommand\";\nimport {\n  PutObjectLockConfigurationCommandInput,\n  PutObjectLockConfigurationCommandOutput,\n} from \"../commands/PutObjectLockConfigurationCommand\";\nimport { PutObjectRetentionCommandInput, PutObjectRetentionCommandOutput } from \"../commands/PutObjectRetentionCommand\";\nimport { PutObjectTaggingCommandInput, PutObjectTaggingCommandOutput } from \"../commands/PutObjectTaggingCommand\";\nimport {\n  PutPublicAccessBlockCommandInput,\n  PutPublicAccessBlockCommandOutput,\n} from \"../commands/PutPublicAccessBlockCommand\";\nimport { RestoreObjectCommandInput, RestoreObjectCommandOutput } from \"../commands/RestoreObjectCommand\";\nimport {\n  SelectObjectContentCommandInput,\n  SelectObjectContentCommandOutput,\n} from \"../commands/SelectObjectContentCommand\";\nimport { UploadPartCommandInput, UploadPartCommandOutput } from \"../commands/UploadPartCommand\";\nimport { UploadPartCopyCommandInput, UploadPartCopyCommandOutput } from \"../commands/UploadPartCopyCommand\";\nimport {\n  AbortIncompleteMultipartUpload,\n  AccelerateConfiguration,\n  AccessControlPolicy,\n  AccessControlTranslation,\n  AnalyticsAndOperator,\n  AnalyticsConfiguration,\n  AnalyticsExportDestination,\n  AnalyticsFilter,\n  AnalyticsS3BucketDestination,\n  Bucket,\n  BucketAlreadyExists,\n  BucketAlreadyOwnedByYou,\n  BucketLifecycleConfiguration,\n  BucketLoggingStatus,\n  CORSConfiguration,\n  CORSRule,\n  CommonPrefix,\n  CompletedMultipartUpload,\n  CompletedPart,\n  Condition,\n  CopyObjectResult,\n  CreateBucketConfiguration,\n  DefaultRetention,\n  Delete,\n  DeleteMarkerEntry,\n  DeleteMarkerReplication,\n  DeletedObject,\n  Destination,\n  Encryption,\n  EncryptionConfiguration,\n  ErrorDocument,\n  Event,\n  ExistingObjectReplication,\n  FilterRule,\n  GlacierJobParameters,\n  Grant,\n  Grantee,\n  IndexDocument,\n  Initiator,\n  IntelligentTieringAndOperator,\n  IntelligentTieringConfiguration,\n  IntelligentTieringFilter,\n  InvalidObjectState,\n  InventoryConfiguration,\n  InventoryDestination,\n  InventoryEncryption,\n  InventoryFilter,\n  InventoryOptionalField,\n  InventoryS3BucketDestination,\n  InventorySchedule,\n  LambdaFunctionConfiguration,\n  LifecycleExpiration,\n  LifecycleRule,\n  LifecycleRuleAndOperator,\n  LifecycleRuleFilter,\n  LoggingEnabled,\n  Metrics,\n  MetricsAndOperator,\n  MetricsConfiguration,\n  MetricsFilter,\n  MultipartUpload,\n  NoSuchBucket,\n  NoSuchKey,\n  NoSuchUpload,\n  NoncurrentVersionExpiration,\n  NoncurrentVersionTransition,\n  NotificationConfiguration,\n  NotificationConfigurationFilter,\n  ObjectAlreadyInActiveTierError,\n  ObjectIdentifier,\n  ObjectLockConfiguration,\n  ObjectLockLegalHold,\n  ObjectLockRetention,\n  ObjectLockRule,\n  ObjectNotInActiveTierError,\n  ObjectVersion,\n  Owner,\n  OwnershipControls,\n  OwnershipControlsRule,\n  Part,\n  PolicyStatus,\n  PublicAccessBlockConfiguration,\n  QueueConfiguration,\n  Redirect,\n  RedirectAllRequestsTo,\n  ReplicaModifications,\n  ReplicationConfiguration,\n  ReplicationRule,\n  ReplicationRuleAndOperator,\n  ReplicationRuleFilter,\n  ReplicationTime,\n  ReplicationTimeValue,\n  RequestPaymentConfiguration,\n  RoutingRule,\n  S3KeyFilter,\n  SSEKMS,\n  SSES3,\n  ServerSideEncryptionByDefault,\n  ServerSideEncryptionConfiguration,\n  ServerSideEncryptionRule,\n  SourceSelectionCriteria,\n  SseKmsEncryptedObjects,\n  StorageClassAnalysis,\n  StorageClassAnalysisDataExport,\n  Tag,\n  Tagging,\n  TargetGrant,\n  Tiering,\n  TopicConfiguration,\n  Transition,\n  VersioningConfiguration,\n  WebsiteConfiguration,\n  _Error,\n  _Object,\n} from \"../models/models_0\";\nimport {\n  CSVInput,\n  CSVOutput,\n  ContinuationEvent,\n  CopyPartResult,\n  EndEvent,\n  InputSerialization,\n  JSONInput,\n  JSONOutput,\n  MetadataEntry,\n  OutputLocation,\n  OutputSerialization,\n  ParquetInput,\n  ProgressEvent,\n  RecordsEvent,\n  RequestProgress,\n  RestoreRequest,\n  S3Location,\n  ScanRange,\n  SelectObjectContentEventStream,\n  SelectParameters,\n  StatsEvent,\n} from \"../models/models_1\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport {\n  SmithyException as __SmithyException,\n  dateToUtcString as __dateToUtcString,\n  extendedEncodeURIComponent as __extendedEncodeURIComponent,\n  getArrayIfSingleItem as __getArrayIfSingleItem,\n  getValueFromTextNode as __getValueFromTextNode,\n} from \"@aws-sdk/smithy-client\";\nimport {\n  Endpoint as __Endpoint,\n  EventStreamSerdeContext as __EventStreamSerdeContext,\n  MetadataBearer as __MetadataBearer,\n  ResponseMetadata as __ResponseMetadata,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\nimport { XmlNode as __XmlNode, XmlText as __XmlText } from \"@aws-sdk/xml-builder\";\nimport { parse as xmlParse } from \"../xml-parser\";\n\nexport const serializeAws_restXmlAbortMultipartUploadCommand = async (\n  input: AbortMultipartUploadCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"AbortMultipartUpload\",\n    ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlCompleteMultipartUploadCommand = async (\n  input: CompleteMultipartUploadCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.MultipartUpload !== undefined) {\n    contents = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlCopyObjectCommand = async (\n  input: CopyObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.CacheControl) && { \"cache-control\": input.CacheControl! }),\n    ...(isSerializableHeaderValue(input.ContentDisposition) && { \"content-disposition\": input.ContentDisposition! }),\n    ...(isSerializableHeaderValue(input.ContentEncoding) && { \"content-encoding\": input.ContentEncoding! }),\n    ...(isSerializableHeaderValue(input.ContentLanguage) && { \"content-language\": input.ContentLanguage! }),\n    ...(isSerializableHeaderValue(input.ContentType) && { \"content-type\": input.ContentType! }),\n    ...(isSerializableHeaderValue(input.CopySource) && { \"x-amz-copy-source\": input.CopySource! }),\n    ...(isSerializableHeaderValue(input.CopySourceIfMatch) && {\n      \"x-amz-copy-source-if-match\": input.CopySourceIfMatch!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {\n      \"x-amz-copy-source-if-modified-since\": __dateToUtcString(input.CopySourceIfModifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {\n      \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {\n      \"x-amz-copy-source-if-unmodified-since\": __dateToUtcString(input.CopySourceIfUnmodifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.Expires) && { expires: __dateToUtcString(input.Expires!).toString() }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.MetadataDirective) && { \"x-amz-metadata-directive\": input.MetadataDirective! }),\n    ...(isSerializableHeaderValue(input.TaggingDirective) && { \"x-amz-tagging-directive\": input.TaggingDirective! }),\n    ...(isSerializableHeaderValue(input.ServerSideEncryption) && {\n      \"x-amz-server-side-encryption\": input.ServerSideEncryption!,\n    }),\n    ...(isSerializableHeaderValue(input.StorageClass) && { \"x-amz-storage-class\": input.StorageClass! }),\n    ...(isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n      \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSKeyId) && {\n      \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n      \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext!,\n    }),\n    ...(isSerializableHeaderValue(input.BucketKeyEnabled) && {\n      \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {\n      \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {\n      \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {\n      \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.Tagging) && { \"x-amz-tagging\": input.Tagging! }),\n    ...(isSerializableHeaderValue(input.ObjectLockMode) && { \"x-amz-object-lock-mode\": input.ObjectLockMode! }),\n    ...(isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n      \"x-amz-object-lock-retain-until-date\": (\n        input.ObjectLockRetainUntilDate!.toISOString().split(\".\")[0] + \"Z\"\n      ).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n      \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {\n      \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner!,\n    }),\n    ...(input.Metadata !== undefined &&\n      Object.keys(input.Metadata).reduce(\n        (acc: any, suffix: string) => ({\n          ...acc,\n          [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata![suffix],\n        }),\n        {}\n      )),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"CopyObject\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlCreateBucketCommand = async (\n  input: CreateBucketCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWrite) && { \"x-amz-grant-write\": input.GrantWrite! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.ObjectLockEnabledForBucket) && {\n      \"x-amz-bucket-object-lock-enabled\": input.ObjectLockEnabledForBucket!.toString(),\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  let body: any;\n  let contents: any;\n  if (input.CreateBucketConfiguration !== undefined) {\n    contents = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlCreateMultipartUploadCommand = async (\n  input: CreateMultipartUploadCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.CacheControl) && { \"cache-control\": input.CacheControl! }),\n    ...(isSerializableHeaderValue(input.ContentDisposition) && { \"content-disposition\": input.ContentDisposition! }),\n    ...(isSerializableHeaderValue(input.ContentEncoding) && { \"content-encoding\": input.ContentEncoding! }),\n    ...(isSerializableHeaderValue(input.ContentLanguage) && { \"content-language\": input.ContentLanguage! }),\n    ...(isSerializableHeaderValue(input.ContentType) && { \"content-type\": input.ContentType! }),\n    ...(isSerializableHeaderValue(input.Expires) && { expires: __dateToUtcString(input.Expires!).toString() }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.ServerSideEncryption) && {\n      \"x-amz-server-side-encryption\": input.ServerSideEncryption!,\n    }),\n    ...(isSerializableHeaderValue(input.StorageClass) && { \"x-amz-storage-class\": input.StorageClass! }),\n    ...(isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n      \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSKeyId) && {\n      \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n      \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext!,\n    }),\n    ...(isSerializableHeaderValue(input.BucketKeyEnabled) && {\n      \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.Tagging) && { \"x-amz-tagging\": input.Tagging! }),\n    ...(isSerializableHeaderValue(input.ObjectLockMode) && { \"x-amz-object-lock-mode\": input.ObjectLockMode! }),\n    ...(isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n      \"x-amz-object-lock-retain-until-date\": (\n        input.ObjectLockRetainUntilDate!.toISOString().split(\".\")[0] + \"Z\"\n      ).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n      \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n    ...(input.Metadata !== undefined &&\n      Object.keys(input.Metadata).reduce(\n        (acc: any, suffix: string) => ({\n          ...acc,\n          [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata![suffix],\n        }),\n        {}\n      )),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    uploads: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketCommand = async (\n  input: DeleteBucketCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (\n  input: DeleteBucketAnalyticsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    analytics: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketCorsCommand = async (\n  input: DeleteBucketCorsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    cors: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketEncryptionCommand = async (\n  input: DeleteBucketEncryptionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    encryption: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (\n  input: DeleteBucketIntelligentTieringConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"intelligent-tiering\": \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (\n  input: DeleteBucketInventoryConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    inventory: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketLifecycleCommand = async (\n  input: DeleteBucketLifecycleCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    lifecycle: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (\n  input: DeleteBucketMetricsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    metrics: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (\n  input: DeleteBucketOwnershipControlsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    ownershipControls: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketPolicyCommand = async (\n  input: DeleteBucketPolicyCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    policy: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketReplicationCommand = async (\n  input: DeleteBucketReplicationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    replication: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketTaggingCommand = async (\n  input: DeleteBucketTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    tagging: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketWebsiteCommand = async (\n  input: DeleteBucketWebsiteCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    website: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteObjectCommand = async (\n  input: DeleteObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.MFA) && { \"x-amz-mfa\": input.MFA! }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n      \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"DeleteObject\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteObjectsCommand = async (\n  input: DeleteObjectsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.MFA) && { \"x-amz-mfa\": input.MFA! }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n      \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    delete: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.Delete !== undefined) {\n    contents = serializeAws_restXmlDelete(input.Delete, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteObjectTaggingCommand = async (\n  input: DeleteObjectTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    tagging: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeletePublicAccessBlockCommand = async (\n  input: DeletePublicAccessBlockCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    publicAccessBlock: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (\n  input: GetBucketAccelerateConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    accelerate: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketAclCommand = async (\n  input: GetBucketAclCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    acl: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (\n  input: GetBucketAnalyticsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    analytics: \"\",\n    \"x-id\": \"GetBucketAnalyticsConfiguration\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketCorsCommand = async (\n  input: GetBucketCorsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    cors: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketEncryptionCommand = async (\n  input: GetBucketEncryptionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    encryption: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (\n  input: GetBucketIntelligentTieringConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"intelligent-tiering\": \"\",\n    \"x-id\": \"GetBucketIntelligentTieringConfiguration\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketInventoryConfigurationCommand = async (\n  input: GetBucketInventoryConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    inventory: \"\",\n    \"x-id\": \"GetBucketInventoryConfiguration\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (\n  input: GetBucketLifecycleConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    lifecycle: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketLocationCommand = async (\n  input: GetBucketLocationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    location: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketLoggingCommand = async (\n  input: GetBucketLoggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    logging: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketMetricsConfigurationCommand = async (\n  input: GetBucketMetricsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    metrics: \"\",\n    \"x-id\": \"GetBucketMetricsConfiguration\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketNotificationConfigurationCommand = async (\n  input: GetBucketNotificationConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    notification: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketOwnershipControlsCommand = async (\n  input: GetBucketOwnershipControlsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    ownershipControls: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketPolicyCommand = async (\n  input: GetBucketPolicyCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    policy: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketPolicyStatusCommand = async (\n  input: GetBucketPolicyStatusCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    policyStatus: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketReplicationCommand = async (\n  input: GetBucketReplicationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    replication: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketRequestPaymentCommand = async (\n  input: GetBucketRequestPaymentCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    requestPayment: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketTaggingCommand = async (\n  input: GetBucketTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    tagging: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketVersioningCommand = async (\n  input: GetBucketVersioningCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    versioning: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketWebsiteCommand = async (\n  input: GetBucketWebsiteCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    website: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectCommand = async (\n  input: GetObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch! }),\n    ...(isSerializableHeaderValue(input.IfModifiedSince) && {\n      \"if-modified-since\": __dateToUtcString(input.IfModifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.IfNoneMatch) && { \"if-none-match\": input.IfNoneMatch! }),\n    ...(isSerializableHeaderValue(input.IfUnmodifiedSince) && {\n      \"if-unmodified-since\": __dateToUtcString(input.IfUnmodifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.Range) && { range: input.Range! }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"GetObject\",\n    ...(input.ResponseCacheControl !== undefined && { \"response-cache-control\": input.ResponseCacheControl }),\n    ...(input.ResponseContentDisposition !== undefined && {\n      \"response-content-disposition\": input.ResponseContentDisposition,\n    }),\n    ...(input.ResponseContentEncoding !== undefined && { \"response-content-encoding\": input.ResponseContentEncoding }),\n    ...(input.ResponseContentLanguage !== undefined && { \"response-content-language\": input.ResponseContentLanguage }),\n    ...(input.ResponseContentType !== undefined && { \"response-content-type\": input.ResponseContentType }),\n    ...(input.ResponseExpires !== undefined && {\n      \"response-expires\": (input.ResponseExpires.toISOString().split(\".\")[0] + \"Z\").toString(),\n    }),\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    ...(input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectAclCommand = async (\n  input: GetObjectAclCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    acl: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectLegalHoldCommand = async (\n  input: GetObjectLegalHoldCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"legal-hold\": \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectLockConfigurationCommand = async (\n  input: GetObjectLockConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"object-lock\": \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectRetentionCommand = async (\n  input: GetObjectRetentionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    retention: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectTaggingCommand = async (\n  input: GetObjectTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    tagging: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectTorrentCommand = async (\n  input: GetObjectTorrentCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    torrent: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetPublicAccessBlockCommand = async (\n  input: GetPublicAccessBlockCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    publicAccessBlock: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlHeadBucketCommand = async (\n  input: HeadBucketCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"HEAD\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlHeadObjectCommand = async (\n  input: HeadObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch! }),\n    ...(isSerializableHeaderValue(input.IfModifiedSince) && {\n      \"if-modified-since\": __dateToUtcString(input.IfModifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.IfNoneMatch) && { \"if-none-match\": input.IfNoneMatch! }),\n    ...(isSerializableHeaderValue(input.IfUnmodifiedSince) && {\n      \"if-unmodified-since\": __dateToUtcString(input.IfUnmodifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.Range) && { range: input.Range! }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    ...(input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"HEAD\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (\n  input: ListBucketAnalyticsConfigurationsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    analytics: \"\",\n    \"x-id\": \"ListBucketAnalyticsConfigurations\",\n    ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (\n  input: ListBucketIntelligentTieringConfigurationsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"intelligent-tiering\": \"\",\n    \"x-id\": \"ListBucketIntelligentTieringConfigurations\",\n    ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListBucketInventoryConfigurationsCommand = async (\n  input: ListBucketInventoryConfigurationsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    inventory: \"\",\n    \"x-id\": \"ListBucketInventoryConfigurations\",\n    ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListBucketMetricsConfigurationsCommand = async (\n  input: ListBucketMetricsConfigurationsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    metrics: \"\",\n    \"x-id\": \"ListBucketMetricsConfigurations\",\n    ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListBucketsCommand = async (\n  input: ListBucketsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/\";\n  let body: any;\n  body = \"\";\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListMultipartUploadsCommand = async (\n  input: ListMultipartUploadsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    uploads: \"\",\n    ...(input.Delimiter !== undefined && { delimiter: input.Delimiter }),\n    ...(input.EncodingType !== undefined && { \"encoding-type\": input.EncodingType }),\n    ...(input.KeyMarker !== undefined && { \"key-marker\": input.KeyMarker }),\n    ...(input.MaxUploads !== undefined && { \"max-uploads\": input.MaxUploads.toString() }),\n    ...(input.Prefix !== undefined && { prefix: input.Prefix }),\n    ...(input.UploadIdMarker !== undefined && { \"upload-id-marker\": input.UploadIdMarker }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListObjectsCommand = async (\n  input: ListObjectsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    ...(input.Delimiter !== undefined && { delimiter: input.Delimiter }),\n    ...(input.EncodingType !== undefined && { \"encoding-type\": input.EncodingType }),\n    ...(input.Marker !== undefined && { marker: input.Marker }),\n    ...(input.MaxKeys !== undefined && { \"max-keys\": input.MaxKeys.toString() }),\n    ...(input.Prefix !== undefined && { prefix: input.Prefix }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListObjectsV2Command = async (\n  input: ListObjectsV2CommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"list-type\": \"2\",\n    ...(input.Delimiter !== undefined && { delimiter: input.Delimiter }),\n    ...(input.EncodingType !== undefined && { \"encoding-type\": input.EncodingType }),\n    ...(input.MaxKeys !== undefined && { \"max-keys\": input.MaxKeys.toString() }),\n    ...(input.Prefix !== undefined && { prefix: input.Prefix }),\n    ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n    ...(input.FetchOwner !== undefined && { \"fetch-owner\": input.FetchOwner.toString() }),\n    ...(input.StartAfter !== undefined && { \"start-after\": input.StartAfter }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListObjectVersionsCommand = async (\n  input: ListObjectVersionsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    versions: \"\",\n    ...(input.Delimiter !== undefined && { delimiter: input.Delimiter }),\n    ...(input.EncodingType !== undefined && { \"encoding-type\": input.EncodingType }),\n    ...(input.KeyMarker !== undefined && { \"key-marker\": input.KeyMarker }),\n    ...(input.MaxKeys !== undefined && { \"max-keys\": input.MaxKeys.toString() }),\n    ...(input.Prefix !== undefined && { prefix: input.Prefix }),\n    ...(input.VersionIdMarker !== undefined && { \"version-id-marker\": input.VersionIdMarker }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListPartsCommand = async (\n  input: ListPartsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"ListParts\",\n    ...(input.MaxParts !== undefined && { \"max-parts\": input.MaxParts.toString() }),\n    ...(input.PartNumberMarker !== undefined && { \"part-number-marker\": input.PartNumberMarker }),\n    ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (\n  input: PutBucketAccelerateConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    accelerate: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.AccelerateConfiguration !== undefined) {\n    contents = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketAclCommand = async (\n  input: PutBucketAclCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWrite) && { \"x-amz-grant-write\": input.GrantWrite! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    acl: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.AccessControlPolicy !== undefined) {\n    contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (\n  input: PutBucketAnalyticsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    analytics: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.AnalyticsConfiguration !== undefined) {\n    contents = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketCorsCommand = async (\n  input: PutBucketCorsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    cors: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.CORSConfiguration !== undefined) {\n    contents = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketEncryptionCommand = async (\n  input: PutBucketEncryptionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    encryption: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.ServerSideEncryptionConfiguration !== undefined) {\n    contents = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (\n  input: PutBucketIntelligentTieringConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"intelligent-tiering\": \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.IntelligentTieringConfiguration !== undefined) {\n    contents = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketInventoryConfigurationCommand = async (\n  input: PutBucketInventoryConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    inventory: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.InventoryConfiguration !== undefined) {\n    contents = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (\n  input: PutBucketLifecycleConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    lifecycle: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.LifecycleConfiguration !== undefined) {\n    contents = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketLoggingCommand = async (\n  input: PutBucketLoggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    logging: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.BucketLoggingStatus !== undefined) {\n    contents = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketMetricsConfigurationCommand = async (\n  input: PutBucketMetricsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    metrics: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.MetricsConfiguration !== undefined) {\n    contents = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketNotificationConfigurationCommand = async (\n  input: PutBucketNotificationConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    notification: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.NotificationConfiguration !== undefined) {\n    contents = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketOwnershipControlsCommand = async (\n  input: PutBucketOwnershipControlsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    ownershipControls: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.OwnershipControls !== undefined) {\n    contents = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketPolicyCommand = async (\n  input: PutBucketPolicyCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"text/plain\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess) && {\n      \"x-amz-confirm-remove-self-bucket-access\": input.ConfirmRemoveSelfBucketAccess!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    policy: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.Policy !== undefined) {\n    contents = input.Policy;\n    body = contents;\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketReplicationCommand = async (\n  input: PutBucketReplicationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.Token) && { \"x-amz-bucket-object-lock-token\": input.Token! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    replication: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.ReplicationConfiguration !== undefined) {\n    contents = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketRequestPaymentCommand = async (\n  input: PutBucketRequestPaymentCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    requestPayment: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.RequestPaymentConfiguration !== undefined) {\n    contents = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketTaggingCommand = async (\n  input: PutBucketTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    tagging: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.Tagging !== undefined) {\n    contents = serializeAws_restXmlTagging(input.Tagging, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketVersioningCommand = async (\n  input: PutBucketVersioningCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.MFA) && { \"x-amz-mfa\": input.MFA! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    versioning: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.VersioningConfiguration !== undefined) {\n    contents = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketWebsiteCommand = async (\n  input: PutBucketWebsiteCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    website: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.WebsiteConfiguration !== undefined) {\n    contents = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectCommand = async (\n  input: PutObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/octet-stream\",\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.CacheControl) && { \"cache-control\": input.CacheControl! }),\n    ...(isSerializableHeaderValue(input.ContentDisposition) && { \"content-disposition\": input.ContentDisposition! }),\n    ...(isSerializableHeaderValue(input.ContentEncoding) && { \"content-encoding\": input.ContentEncoding! }),\n    ...(isSerializableHeaderValue(input.ContentLanguage) && { \"content-language\": input.ContentLanguage! }),\n    ...(isSerializableHeaderValue(input.ContentLength) && { \"content-length\": input.ContentLength!.toString() }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ContentType) && { \"content-type\": input.ContentType! }),\n    ...(isSerializableHeaderValue(input.Expires) && { expires: __dateToUtcString(input.Expires!).toString() }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.ServerSideEncryption) && {\n      \"x-amz-server-side-encryption\": input.ServerSideEncryption!,\n    }),\n    ...(isSerializableHeaderValue(input.StorageClass) && { \"x-amz-storage-class\": input.StorageClass! }),\n    ...(isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n      \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSKeyId) && {\n      \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n      \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext!,\n    }),\n    ...(isSerializableHeaderValue(input.BucketKeyEnabled) && {\n      \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.Tagging) && { \"x-amz-tagging\": input.Tagging! }),\n    ...(isSerializableHeaderValue(input.ObjectLockMode) && { \"x-amz-object-lock-mode\": input.ObjectLockMode! }),\n    ...(isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n      \"x-amz-object-lock-retain-until-date\": (\n        input.ObjectLockRetainUntilDate!.toISOString().split(\".\")[0] + \"Z\"\n      ).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n      \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n    ...(input.Metadata !== undefined &&\n      Object.keys(input.Metadata).reduce(\n        (acc: any, suffix: string) => ({\n          ...acc,\n          [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata![suffix],\n        }),\n        {}\n      )),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"PutObject\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.Body !== undefined) {\n    contents = input.Body;\n    body = contents;\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectAclCommand = async (\n  input: PutObjectAclCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWrite) && { \"x-amz-grant-write\": input.GrantWrite! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    acl: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.AccessControlPolicy !== undefined) {\n    contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectLegalHoldCommand = async (\n  input: PutObjectLegalHoldCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"legal-hold\": \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.LegalHold !== undefined) {\n    contents = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectLockConfigurationCommand = async (\n  input: PutObjectLockConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.Token) && { \"x-amz-bucket-object-lock-token\": input.Token! }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"object-lock\": \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.ObjectLockConfiguration !== undefined) {\n    contents = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectRetentionCommand = async (\n  input: PutObjectRetentionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n      \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    retention: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.Retention !== undefined) {\n    contents = serializeAws_restXmlObjectLockRetention(input.Retention, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectTaggingCommand = async (\n  input: PutObjectTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    tagging: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.Tagging !== undefined) {\n    contents = serializeAws_restXmlTagging(input.Tagging, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutPublicAccessBlockCommand = async (\n  input: PutPublicAccessBlockCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    publicAccessBlock: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.PublicAccessBlockConfiguration !== undefined) {\n    contents = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlRestoreObjectCommand = async (\n  input: RestoreObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    restore: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.RestoreRequest !== undefined) {\n    contents = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlSelectObjectContentCommand = async (\n  input: SelectObjectContentCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    select: \"\",\n    \"select-type\": \"2\",\n  };\n  let body: any;\n  body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n  const bodyNode = new __XmlNode(\"SelectObjectContentRequest\");\n  bodyNode.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n  if (input.Expression !== undefined) {\n    const node = new __XmlNode(\"Expression\").addChildNode(new __XmlText(input.Expression)).withName(\"Expression\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpressionType !== undefined) {\n    const node = new __XmlNode(\"ExpressionType\")\n      .addChildNode(new __XmlText(input.ExpressionType))\n      .withName(\"ExpressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.InputSerialization !== undefined) {\n    const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\n      \"InputSerialization\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputSerialization !== undefined) {\n    const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\n      \"OutputSerialization\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.RequestProgress !== undefined) {\n    const node = serializeAws_restXmlRequestProgress(input.RequestProgress, context).withName(\"RequestProgress\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ScanRange !== undefined) {\n    const node = serializeAws_restXmlScanRange(input.ScanRange, context).withName(\"ScanRange\");\n    bodyNode.addChildNode(node);\n  }\n  body += bodyNode.toString();\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlUploadPartCommand = async (\n  input: UploadPartCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/octet-stream\",\n    ...(isSerializableHeaderValue(input.ContentLength) && { \"content-length\": input.ContentLength!.toString() }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"UploadPart\",\n    ...(input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }),\n    ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.Body !== undefined) {\n    contents = input.Body;\n    body = contents;\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlUploadPartCopyCommand = async (\n  input: UploadPartCopyCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.CopySource) && { \"x-amz-copy-source\": input.CopySource! }),\n    ...(isSerializableHeaderValue(input.CopySourceIfMatch) && {\n      \"x-amz-copy-source-if-match\": input.CopySourceIfMatch!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {\n      \"x-amz-copy-source-if-modified-since\": __dateToUtcString(input.CopySourceIfModifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {\n      \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {\n      \"x-amz-copy-source-if-unmodified-since\": __dateToUtcString(input.CopySourceIfUnmodifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceRange) && { \"x-amz-copy-source-range\": input.CopySourceRange! }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {\n      \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {\n      \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {\n      \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {\n      \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"UploadPartCopy\",\n    ...(input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }),\n    ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const deserializeAws_restXmlAbortMultipartUploadCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<AbortMultipartUploadCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlAbortMultipartUploadCommandError(output, context);\n  }\n  const contents: AbortMultipartUploadCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlAbortMultipartUploadCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<AbortMultipartUploadCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchUpload\":\n    case \"com.amazonaws.s3#NoSuchUpload\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchUploadResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlCompleteMultipartUploadCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CompleteMultipartUploadCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlCompleteMultipartUploadCommandError(output, context);\n  }\n  const contents: CompleteMultipartUploadCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Bucket: undefined,\n    BucketKeyEnabled: undefined,\n    ETag: undefined,\n    Expiration: undefined,\n    Key: undefined,\n    Location: undefined,\n    RequestCharged: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-expiration\"] !== undefined) {\n    contents.Expiration = output.headers[\"x-amz-expiration\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = data[\"Bucket\"];\n  }\n  if (data[\"ETag\"] !== undefined) {\n    contents.ETag = data[\"ETag\"];\n  }\n  if (data[\"Key\"] !== undefined) {\n    contents.Key = data[\"Key\"];\n  }\n  if (data[\"Location\"] !== undefined) {\n    contents.Location = data[\"Location\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlCompleteMultipartUploadCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CompleteMultipartUploadCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlCopyObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CopyObjectCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlCopyObjectCommandError(output, context);\n  }\n  const contents: CopyObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    BucketKeyEnabled: undefined,\n    CopyObjectResult: undefined,\n    CopySourceVersionId: undefined,\n    Expiration: undefined,\n    RequestCharged: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSEncryptionContext: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-expiration\"] !== undefined) {\n    contents.Expiration = output.headers[\"x-amz-expiration\"];\n  }\n  if (output.headers[\"x-amz-copy-source-version-id\"] !== undefined) {\n    contents.CopySourceVersionId = output.headers[\"x-amz-copy-source-version-id\"];\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n    contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  contents.CopyObjectResult = deserializeAws_restXmlCopyObjectResult(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlCopyObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CopyObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ObjectNotInActiveTierError\":\n    case \"com.amazonaws.s3#ObjectNotInActiveTierError\":\n      response = {\n        ...(await deserializeAws_restXmlObjectNotInActiveTierErrorResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlCreateBucketCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CreateBucketCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlCreateBucketCommandError(output, context);\n  }\n  const contents: CreateBucketCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Location: undefined,\n  };\n  if (output.headers[\"location\"] !== undefined) {\n    contents.Location = output.headers[\"location\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlCreateBucketCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CreateBucketCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BucketAlreadyExists\":\n    case \"com.amazonaws.s3#BucketAlreadyExists\":\n      response = {\n        ...(await deserializeAws_restXmlBucketAlreadyExistsResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"BucketAlreadyOwnedByYou\":\n    case \"com.amazonaws.s3#BucketAlreadyOwnedByYou\":\n      response = {\n        ...(await deserializeAws_restXmlBucketAlreadyOwnedByYouResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlCreateMultipartUploadCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CreateMultipartUploadCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlCreateMultipartUploadCommandError(output, context);\n  }\n  const contents: CreateMultipartUploadCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AbortDate: undefined,\n    AbortRuleId: undefined,\n    Bucket: undefined,\n    BucketKeyEnabled: undefined,\n    Key: undefined,\n    RequestCharged: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSEncryptionContext: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    UploadId: undefined,\n  };\n  if (output.headers[\"x-amz-abort-date\"] !== undefined) {\n    contents.AbortDate = new Date(output.headers[\"x-amz-abort-date\"]);\n  }\n  if (output.headers[\"x-amz-abort-rule-id\"] !== undefined) {\n    contents.AbortRuleId = output.headers[\"x-amz-abort-rule-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n    contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = data[\"Bucket\"];\n  }\n  if (data[\"Key\"] !== undefined) {\n    contents.Key = data[\"Key\"];\n  }\n  if (data[\"UploadId\"] !== undefined) {\n    contents.UploadId = data[\"UploadId\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlCreateMultipartUploadCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CreateMultipartUploadCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketCommandError(output, context);\n  }\n  const contents: DeleteBucketCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketAnalyticsConfigurationCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError(output, context);\n  }\n  const contents: DeleteBucketAnalyticsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketAnalyticsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketCorsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketCorsCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketCorsCommandError(output, context);\n  }\n  const contents: DeleteBucketCorsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketCorsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketCorsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketEncryptionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketEncryptionCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketEncryptionCommandError(output, context);\n  }\n  const contents: DeleteBucketEncryptionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketEncryptionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketEncryptionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketIntelligentTieringConfigurationCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError(output, context);\n  }\n  const contents: DeleteBucketIntelligentTieringConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketIntelligentTieringConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketInventoryConfigurationCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError(output, context);\n  }\n  const contents: DeleteBucketInventoryConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketInventoryConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketLifecycleCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketLifecycleCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketLifecycleCommandError(output, context);\n  }\n  const contents: DeleteBucketLifecycleCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketLifecycleCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketLifecycleCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketMetricsConfigurationCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError(output, context);\n  }\n  const contents: DeleteBucketMetricsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketMetricsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketOwnershipControlsCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError(output, context);\n  }\n  const contents: DeleteBucketOwnershipControlsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketOwnershipControlsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketPolicyCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketPolicyCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketPolicyCommandError(output, context);\n  }\n  const contents: DeleteBucketPolicyCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketPolicyCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketPolicyCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketReplicationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketReplicationCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketReplicationCommandError(output, context);\n  }\n  const contents: DeleteBucketReplicationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketReplicationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketReplicationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketTaggingCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketTaggingCommandError(output, context);\n  }\n  const contents: DeleteBucketTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketWebsiteCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketWebsiteCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketWebsiteCommandError(output, context);\n  }\n  const contents: DeleteBucketWebsiteCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketWebsiteCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketWebsiteCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteObjectCommandError(output, context);\n  }\n  const contents: DeleteObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    DeleteMarker: undefined,\n    RequestCharged: undefined,\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n    contents.DeleteMarker = output.headers[\"x-amz-delete-marker\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteObjectsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteObjectsCommandError(output, context);\n  }\n  const contents: DeleteObjectsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Deleted: undefined,\n    Errors: undefined,\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data.Deleted === \"\") {\n    contents.Deleted = [];\n  }\n  if (data[\"Deleted\"] !== undefined) {\n    contents.Deleted = deserializeAws_restXmlDeletedObjects(__getArrayIfSingleItem(data[\"Deleted\"]), context);\n  }\n  if (data.Error === \"\") {\n    contents.Errors = [];\n  }\n  if (data[\"Error\"] !== undefined) {\n    contents.Errors = deserializeAws_restXmlErrors(__getArrayIfSingleItem(data[\"Error\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteObjectsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteObjectTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectTaggingCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteObjectTaggingCommandError(output, context);\n  }\n  const contents: DeleteObjectTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteObjectTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeletePublicAccessBlockCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeletePublicAccessBlockCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeletePublicAccessBlockCommandError(output, context);\n  }\n  const contents: DeletePublicAccessBlockCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeletePublicAccessBlockCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeletePublicAccessBlockCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAccelerateConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketAccelerateConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Status: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Status\"] !== undefined) {\n    contents.Status = data[\"Status\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAccelerateConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketAclCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAclCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketAclCommandError(output, context);\n  }\n  const contents: GetBucketAclCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Grants: undefined,\n    Owner: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.AccessControlList === \"\") {\n    contents.Grants = [];\n  }\n  if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n    contents.Grants = deserializeAws_restXmlGrants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketAclCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAclCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAnalyticsConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketAnalyticsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AnalyticsConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.AnalyticsConfiguration = deserializeAws_restXmlAnalyticsConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAnalyticsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketCorsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketCorsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketCorsCommandError(output, context);\n  }\n  const contents: GetBucketCorsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    CORSRules: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.CORSRule === \"\") {\n    contents.CORSRules = [];\n  }\n  if (data[\"CORSRule\"] !== undefined) {\n    contents.CORSRules = deserializeAws_restXmlCORSRules(__getArrayIfSingleItem(data[\"CORSRule\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketCorsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketCorsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketEncryptionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketEncryptionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketEncryptionCommandError(output, context);\n  }\n  const contents: GetBucketEncryptionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ServerSideEncryptionConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.ServerSideEncryptionConfiguration = deserializeAws_restXmlServerSideEncryptionConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketEncryptionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketEncryptionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketIntelligentTieringConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketIntelligentTieringConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    IntelligentTieringConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.IntelligentTieringConfiguration = deserializeAws_restXmlIntelligentTieringConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketIntelligentTieringConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketInventoryConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketInventoryConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketInventoryConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketInventoryConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    InventoryConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.InventoryConfiguration = deserializeAws_restXmlInventoryConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketInventoryConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketInventoryConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLifecycleConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketLifecycleConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Rules: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.Rule === \"\") {\n    contents.Rules = [];\n  }\n  if (data[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlLifecycleRules(__getArrayIfSingleItem(data[\"Rule\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLifecycleConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketLocationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLocationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketLocationCommandError(output, context);\n  }\n  const contents: GetBucketLocationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    LocationConstraint: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"LocationConstraint\"] !== undefined) {\n    contents.LocationConstraint = data[\"LocationConstraint\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketLocationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLocationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketLoggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLoggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketLoggingCommandError(output, context);\n  }\n  const contents: GetBucketLoggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    LoggingEnabled: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"LoggingEnabled\"] !== undefined) {\n    contents.LoggingEnabled = deserializeAws_restXmlLoggingEnabled(data[\"LoggingEnabled\"], context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketLoggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLoggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketMetricsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketMetricsConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketMetricsConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketMetricsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    MetricsConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.MetricsConfiguration = deserializeAws_restXmlMetricsConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketMetricsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketMetricsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketNotificationConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketNotificationConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketNotificationConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketNotificationConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    LambdaFunctionConfigurations: undefined,\n    QueueConfigurations: undefined,\n    TopicConfigurations: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.CloudFunctionConfiguration === \"\") {\n    contents.LambdaFunctionConfigurations = [];\n  }\n  if (data[\"CloudFunctionConfiguration\"] !== undefined) {\n    contents.LambdaFunctionConfigurations = deserializeAws_restXmlLambdaFunctionConfigurationList(\n      __getArrayIfSingleItem(data[\"CloudFunctionConfiguration\"]),\n      context\n    );\n  }\n  if (data.QueueConfiguration === \"\") {\n    contents.QueueConfigurations = [];\n  }\n  if (data[\"QueueConfiguration\"] !== undefined) {\n    contents.QueueConfigurations = deserializeAws_restXmlQueueConfigurationList(\n      __getArrayIfSingleItem(data[\"QueueConfiguration\"]),\n      context\n    );\n  }\n  if (data.TopicConfiguration === \"\") {\n    contents.TopicConfigurations = [];\n  }\n  if (data[\"TopicConfiguration\"] !== undefined) {\n    contents.TopicConfigurations = deserializeAws_restXmlTopicConfigurationList(\n      __getArrayIfSingleItem(data[\"TopicConfiguration\"]),\n      context\n    );\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketNotificationConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketNotificationConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketOwnershipControlsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketOwnershipControlsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketOwnershipControlsCommandError(output, context);\n  }\n  const contents: GetBucketOwnershipControlsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    OwnershipControls: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.OwnershipControls = deserializeAws_restXmlOwnershipControls(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketOwnershipControlsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketOwnershipControlsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketPolicyCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketPolicyCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketPolicyCommandError(output, context);\n  }\n  const contents: GetBucketPolicyCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Policy: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Policy\"] !== undefined) {\n    contents.Policy = data[\"Policy\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketPolicyCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketPolicyCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketPolicyStatusCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketPolicyStatusCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketPolicyStatusCommandError(output, context);\n  }\n  const contents: GetBucketPolicyStatusCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    PolicyStatus: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.PolicyStatus = deserializeAws_restXmlPolicyStatus(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketPolicyStatusCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketPolicyStatusCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketReplicationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketReplicationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketReplicationCommandError(output, context);\n  }\n  const contents: GetBucketReplicationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ReplicationConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.ReplicationConfiguration = deserializeAws_restXmlReplicationConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketReplicationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketReplicationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketRequestPaymentCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketRequestPaymentCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketRequestPaymentCommandError(output, context);\n  }\n  const contents: GetBucketRequestPaymentCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Payer: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Payer\"] !== undefined) {\n    contents.Payer = data[\"Payer\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketRequestPaymentCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketRequestPaymentCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketTaggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketTaggingCommandError(output, context);\n  }\n  const contents: GetBucketTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    TagSet: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.TagSet === \"\") {\n    contents.TagSet = [];\n  }\n  if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n    contents.TagSet = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketVersioningCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketVersioningCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketVersioningCommandError(output, context);\n  }\n  const contents: GetBucketVersioningCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    MFADelete: undefined,\n    Status: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"MfaDelete\"] !== undefined) {\n    contents.MFADelete = data[\"MfaDelete\"];\n  }\n  if (data[\"Status\"] !== undefined) {\n    contents.Status = data[\"Status\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketVersioningCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketVersioningCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketWebsiteCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketWebsiteCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketWebsiteCommandError(output, context);\n  }\n  const contents: GetBucketWebsiteCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ErrorDocument: undefined,\n    IndexDocument: undefined,\n    RedirectAllRequestsTo: undefined,\n    RoutingRules: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"ErrorDocument\"] !== undefined) {\n    contents.ErrorDocument = deserializeAws_restXmlErrorDocument(data[\"ErrorDocument\"], context);\n  }\n  if (data[\"IndexDocument\"] !== undefined) {\n    contents.IndexDocument = deserializeAws_restXmlIndexDocument(data[\"IndexDocument\"], context);\n  }\n  if (data[\"RedirectAllRequestsTo\"] !== undefined) {\n    contents.RedirectAllRequestsTo = deserializeAws_restXmlRedirectAllRequestsTo(\n      data[\"RedirectAllRequestsTo\"],\n      context\n    );\n  }\n  if (data.RoutingRules === \"\") {\n    contents.RoutingRules = [];\n  }\n  if (data[\"RoutingRules\"] !== undefined && data[\"RoutingRules\"][\"RoutingRule\"] !== undefined) {\n    contents.RoutingRules = deserializeAws_restXmlRoutingRules(\n      __getArrayIfSingleItem(data[\"RoutingRules\"][\"RoutingRule\"]),\n      context\n    );\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketWebsiteCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketWebsiteCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectCommandError(output, context);\n  }\n  const contents: GetObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AcceptRanges: undefined,\n    Body: undefined,\n    BucketKeyEnabled: undefined,\n    CacheControl: undefined,\n    ContentDisposition: undefined,\n    ContentEncoding: undefined,\n    ContentLanguage: undefined,\n    ContentLength: undefined,\n    ContentRange: undefined,\n    ContentType: undefined,\n    DeleteMarker: undefined,\n    ETag: undefined,\n    Expiration: undefined,\n    Expires: undefined,\n    LastModified: undefined,\n    Metadata: undefined,\n    MissingMeta: undefined,\n    ObjectLockLegalHoldStatus: undefined,\n    ObjectLockMode: undefined,\n    ObjectLockRetainUntilDate: undefined,\n    PartsCount: undefined,\n    ReplicationStatus: undefined,\n    RequestCharged: undefined,\n    Restore: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    StorageClass: undefined,\n    TagCount: undefined,\n    VersionId: undefined,\n    WebsiteRedirectLocation: undefined,\n  };\n  if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n    contents.DeleteMarker = output.headers[\"x-amz-delete-marker\"] === \"true\";\n  }\n  if (output.headers[\"accept-ranges\"] !== undefined) {\n    contents.AcceptRanges = output.headers[\"accept-ranges\"];\n  }\n  if (output.headers[\"x-amz-expiration\"] !== undefined) {\n    contents.Expiration = output.headers[\"x-amz-expiration\"];\n  }\n  if (output.headers[\"x-amz-restore\"] !== undefined) {\n    contents.Restore = output.headers[\"x-amz-restore\"];\n  }\n  if (output.headers[\"last-modified\"] !== undefined) {\n    contents.LastModified = new Date(output.headers[\"last-modified\"]);\n  }\n  if (output.headers[\"content-length\"] !== undefined) {\n    contents.ContentLength = parseInt(output.headers[\"content-length\"], 10);\n  }\n  if (output.headers[\"etag\"] !== undefined) {\n    contents.ETag = output.headers[\"etag\"];\n  }\n  if (output.headers[\"x-amz-missing-meta\"] !== undefined) {\n    contents.MissingMeta = parseInt(output.headers[\"x-amz-missing-meta\"], 10);\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"cache-control\"] !== undefined) {\n    contents.CacheControl = output.headers[\"cache-control\"];\n  }\n  if (output.headers[\"content-disposition\"] !== undefined) {\n    contents.ContentDisposition = output.headers[\"content-disposition\"];\n  }\n  if (output.headers[\"content-encoding\"] !== undefined) {\n    contents.ContentEncoding = output.headers[\"content-encoding\"];\n  }\n  if (output.headers[\"content-language\"] !== undefined) {\n    contents.ContentLanguage = output.headers[\"content-language\"];\n  }\n  if (output.headers[\"content-range\"] !== undefined) {\n    contents.ContentRange = output.headers[\"content-range\"];\n  }\n  if (output.headers[\"content-type\"] !== undefined) {\n    contents.ContentType = output.headers[\"content-type\"];\n  }\n  if (output.headers[\"expires\"] !== undefined) {\n    contents.Expires = new Date(output.headers[\"expires\"]);\n  }\n  if (output.headers[\"x-amz-website-redirect-location\"] !== undefined) {\n    contents.WebsiteRedirectLocation = output.headers[\"x-amz-website-redirect-location\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-storage-class\"] !== undefined) {\n    contents.StorageClass = output.headers[\"x-amz-storage-class\"];\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  if (output.headers[\"x-amz-replication-status\"] !== undefined) {\n    contents.ReplicationStatus = output.headers[\"x-amz-replication-status\"];\n  }\n  if (output.headers[\"x-amz-mp-parts-count\"] !== undefined) {\n    contents.PartsCount = parseInt(output.headers[\"x-amz-mp-parts-count\"], 10);\n  }\n  if (output.headers[\"x-amz-tagging-count\"] !== undefined) {\n    contents.TagCount = parseInt(output.headers[\"x-amz-tagging-count\"], 10);\n  }\n  if (output.headers[\"x-amz-object-lock-mode\"] !== undefined) {\n    contents.ObjectLockMode = output.headers[\"x-amz-object-lock-mode\"];\n  }\n  if (output.headers[\"x-amz-object-lock-retain-until-date\"] !== undefined) {\n    contents.ObjectLockRetainUntilDate = new Date(output.headers[\"x-amz-object-lock-retain-until-date\"]);\n  }\n  if (output.headers[\"x-amz-object-lock-legal-hold\"] !== undefined) {\n    contents.ObjectLockLegalHoldStatus = output.headers[\"x-amz-object-lock-legal-hold\"];\n  }\n  Object.keys(output.headers).forEach((header) => {\n    if (contents.Metadata === undefined) {\n      contents.Metadata = {};\n    }\n    if (header.startsWith(\"x-amz-meta-\")) {\n      contents.Metadata[header.substring(11)] = output.headers[header];\n    }\n  });\n  const data: any = output.body;\n  contents.Body = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidObjectState\":\n    case \"com.amazonaws.s3#InvalidObjectState\":\n      response = {\n        ...(await deserializeAws_restXmlInvalidObjectStateResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectAclCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectAclCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectAclCommandError(output, context);\n  }\n  const contents: GetObjectAclCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Grants: undefined,\n    Owner: undefined,\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data.AccessControlList === \"\") {\n    contents.Grants = [];\n  }\n  if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n    contents.Grants = deserializeAws_restXmlGrants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectAclCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectAclCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectLegalHoldCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectLegalHoldCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectLegalHoldCommandError(output, context);\n  }\n  const contents: GetObjectLegalHoldCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    LegalHold: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.LegalHold = deserializeAws_restXmlObjectLockLegalHold(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectLegalHoldCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectLegalHoldCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectLockConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectLockConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectLockConfigurationCommandError(output, context);\n  }\n  const contents: GetObjectLockConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ObjectLockConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.ObjectLockConfiguration = deserializeAws_restXmlObjectLockConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectLockConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectLockConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectRetentionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectRetentionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectRetentionCommandError(output, context);\n  }\n  const contents: GetObjectRetentionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Retention: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.Retention = deserializeAws_restXmlObjectLockRetention(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectRetentionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectRetentionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectTaggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectTaggingCommandError(output, context);\n  }\n  const contents: GetObjectTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    TagSet: undefined,\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data.TagSet === \"\") {\n    contents.TagSet = [];\n  }\n  if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n    contents.TagSet = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectTorrentCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectTorrentCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectTorrentCommandError(output, context);\n  }\n  const contents: GetObjectTorrentCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Body: undefined,\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = output.body;\n  contents.Body = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectTorrentCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectTorrentCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetPublicAccessBlockCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetPublicAccessBlockCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetPublicAccessBlockCommandError(output, context);\n  }\n  const contents: GetPublicAccessBlockCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    PublicAccessBlockConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.PublicAccessBlockConfiguration = deserializeAws_restXmlPublicAccessBlockConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetPublicAccessBlockCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetPublicAccessBlockCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlHeadBucketCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<HeadBucketCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlHeadBucketCommandError(output, context);\n  }\n  const contents: HeadBucketCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlHeadBucketCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<HeadBucketCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchBucket\":\n    case \"com.amazonaws.s3#NoSuchBucket\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlHeadObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<HeadObjectCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlHeadObjectCommandError(output, context);\n  }\n  const contents: HeadObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AcceptRanges: undefined,\n    ArchiveStatus: undefined,\n    BucketKeyEnabled: undefined,\n    CacheControl: undefined,\n    ContentDisposition: undefined,\n    ContentEncoding: undefined,\n    ContentLanguage: undefined,\n    ContentLength: undefined,\n    ContentType: undefined,\n    DeleteMarker: undefined,\n    ETag: undefined,\n    Expiration: undefined,\n    Expires: undefined,\n    LastModified: undefined,\n    Metadata: undefined,\n    MissingMeta: undefined,\n    ObjectLockLegalHoldStatus: undefined,\n    ObjectLockMode: undefined,\n    ObjectLockRetainUntilDate: undefined,\n    PartsCount: undefined,\n    ReplicationStatus: undefined,\n    RequestCharged: undefined,\n    Restore: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    StorageClass: undefined,\n    VersionId: undefined,\n    WebsiteRedirectLocation: undefined,\n  };\n  if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n    contents.DeleteMarker = output.headers[\"x-amz-delete-marker\"] === \"true\";\n  }\n  if (output.headers[\"accept-ranges\"] !== undefined) {\n    contents.AcceptRanges = output.headers[\"accept-ranges\"];\n  }\n  if (output.headers[\"x-amz-expiration\"] !== undefined) {\n    contents.Expiration = output.headers[\"x-amz-expiration\"];\n  }\n  if (output.headers[\"x-amz-restore\"] !== undefined) {\n    contents.Restore = output.headers[\"x-amz-restore\"];\n  }\n  if (output.headers[\"x-amz-archive-status\"] !== undefined) {\n    contents.ArchiveStatus = output.headers[\"x-amz-archive-status\"];\n  }\n  if (output.headers[\"last-modified\"] !== undefined) {\n    contents.LastModified = new Date(output.headers[\"last-modified\"]);\n  }\n  if (output.headers[\"content-length\"] !== undefined) {\n    contents.ContentLength = parseInt(output.headers[\"content-length\"], 10);\n  }\n  if (output.headers[\"etag\"] !== undefined) {\n    contents.ETag = output.headers[\"etag\"];\n  }\n  if (output.headers[\"x-amz-missing-meta\"] !== undefined) {\n    contents.MissingMeta = parseInt(output.headers[\"x-amz-missing-meta\"], 10);\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"cache-control\"] !== undefined) {\n    contents.CacheControl = output.headers[\"cache-control\"];\n  }\n  if (output.headers[\"content-disposition\"] !== undefined) {\n    contents.ContentDisposition = output.headers[\"content-disposition\"];\n  }\n  if (output.headers[\"content-encoding\"] !== undefined) {\n    contents.ContentEncoding = output.headers[\"content-encoding\"];\n  }\n  if (output.headers[\"content-language\"] !== undefined) {\n    contents.ContentLanguage = output.headers[\"content-language\"];\n  }\n  if (output.headers[\"content-type\"] !== undefined) {\n    contents.ContentType = output.headers[\"content-type\"];\n  }\n  if (output.headers[\"expires\"] !== undefined) {\n    contents.Expires = new Date(output.headers[\"expires\"]);\n  }\n  if (output.headers[\"x-amz-website-redirect-location\"] !== undefined) {\n    contents.WebsiteRedirectLocation = output.headers[\"x-amz-website-redirect-location\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-storage-class\"] !== undefined) {\n    contents.StorageClass = output.headers[\"x-amz-storage-class\"];\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  if (output.headers[\"x-amz-replication-status\"] !== undefined) {\n    contents.ReplicationStatus = output.headers[\"x-amz-replication-status\"];\n  }\n  if (output.headers[\"x-amz-mp-parts-count\"] !== undefined) {\n    contents.PartsCount = parseInt(output.headers[\"x-amz-mp-parts-count\"], 10);\n  }\n  if (output.headers[\"x-amz-object-lock-mode\"] !== undefined) {\n    contents.ObjectLockMode = output.headers[\"x-amz-object-lock-mode\"];\n  }\n  if (output.headers[\"x-amz-object-lock-retain-until-date\"] !== undefined) {\n    contents.ObjectLockRetainUntilDate = new Date(output.headers[\"x-amz-object-lock-retain-until-date\"]);\n  }\n  if (output.headers[\"x-amz-object-lock-legal-hold\"] !== undefined) {\n    contents.ObjectLockLegalHoldStatus = output.headers[\"x-amz-object-lock-legal-hold\"];\n  }\n  Object.keys(output.headers).forEach((header) => {\n    if (contents.Metadata === undefined) {\n      contents.Metadata = {};\n    }\n    if (header.startsWith(\"x-amz-meta-\")) {\n      contents.Metadata[header.substring(11)] = output.headers[header];\n    }\n  });\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlHeadObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<HeadObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketAnalyticsConfigurationsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError(output, context);\n  }\n  const contents: ListBucketAnalyticsConfigurationsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AnalyticsConfigurationList: undefined,\n    ContinuationToken: undefined,\n    IsTruncated: undefined,\n    NextContinuationToken: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.AnalyticsConfiguration === \"\") {\n    contents.AnalyticsConfigurationList = [];\n  }\n  if (data[\"AnalyticsConfiguration\"] !== undefined) {\n    contents.AnalyticsConfigurationList = deserializeAws_restXmlAnalyticsConfigurationList(\n      __getArrayIfSingleItem(data[\"AnalyticsConfiguration\"]),\n      context\n    );\n  }\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = data[\"ContinuationToken\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = data[\"NextContinuationToken\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketAnalyticsConfigurationsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketIntelligentTieringConfigurationsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError(output, context);\n  }\n  const contents: ListBucketIntelligentTieringConfigurationsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ContinuationToken: undefined,\n    IntelligentTieringConfigurationList: undefined,\n    IsTruncated: undefined,\n    NextContinuationToken: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = data[\"ContinuationToken\"];\n  }\n  if (data.IntelligentTieringConfiguration === \"\") {\n    contents.IntelligentTieringConfigurationList = [];\n  }\n  if (data[\"IntelligentTieringConfiguration\"] !== undefined) {\n    contents.IntelligentTieringConfigurationList = deserializeAws_restXmlIntelligentTieringConfigurationList(\n      __getArrayIfSingleItem(data[\"IntelligentTieringConfiguration\"]),\n      context\n    );\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = data[\"NextContinuationToken\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketIntelligentTieringConfigurationsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListBucketInventoryConfigurationsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketInventoryConfigurationsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketInventoryConfigurationsCommandError(output, context);\n  }\n  const contents: ListBucketInventoryConfigurationsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ContinuationToken: undefined,\n    InventoryConfigurationList: undefined,\n    IsTruncated: undefined,\n    NextContinuationToken: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = data[\"ContinuationToken\"];\n  }\n  if (data.InventoryConfiguration === \"\") {\n    contents.InventoryConfigurationList = [];\n  }\n  if (data[\"InventoryConfiguration\"] !== undefined) {\n    contents.InventoryConfigurationList = deserializeAws_restXmlInventoryConfigurationList(\n      __getArrayIfSingleItem(data[\"InventoryConfiguration\"]),\n      context\n    );\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = data[\"NextContinuationToken\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListBucketInventoryConfigurationsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketInventoryConfigurationsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListBucketMetricsConfigurationsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketMetricsConfigurationsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketMetricsConfigurationsCommandError(output, context);\n  }\n  const contents: ListBucketMetricsConfigurationsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ContinuationToken: undefined,\n    IsTruncated: undefined,\n    MetricsConfigurationList: undefined,\n    NextContinuationToken: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = data[\"ContinuationToken\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data.MetricsConfiguration === \"\") {\n    contents.MetricsConfigurationList = [];\n  }\n  if (data[\"MetricsConfiguration\"] !== undefined) {\n    contents.MetricsConfigurationList = deserializeAws_restXmlMetricsConfigurationList(\n      __getArrayIfSingleItem(data[\"MetricsConfiguration\"]),\n      context\n    );\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = data[\"NextContinuationToken\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListBucketMetricsConfigurationsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketMetricsConfigurationsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListBucketsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketsCommandError(output, context);\n  }\n  const contents: ListBucketsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Buckets: undefined,\n    Owner: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.Buckets === \"\") {\n    contents.Buckets = [];\n  }\n  if (data[\"Buckets\"] !== undefined && data[\"Buckets\"][\"Bucket\"] !== undefined) {\n    contents.Buckets = deserializeAws_restXmlBuckets(__getArrayIfSingleItem(data[\"Buckets\"][\"Bucket\"]), context);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListBucketsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListMultipartUploadsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListMultipartUploadsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListMultipartUploadsCommandError(output, context);\n  }\n  const contents: ListMultipartUploadsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Bucket: undefined,\n    CommonPrefixes: undefined,\n    Delimiter: undefined,\n    EncodingType: undefined,\n    IsTruncated: undefined,\n    KeyMarker: undefined,\n    MaxUploads: undefined,\n    NextKeyMarker: undefined,\n    NextUploadIdMarker: undefined,\n    Prefix: undefined,\n    UploadIdMarker: undefined,\n    Uploads: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = data[\"Bucket\"];\n  }\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  }\n  if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(\n      __getArrayIfSingleItem(data[\"CommonPrefixes\"]),\n      context\n    );\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = data[\"Delimiter\"];\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = data[\"EncodingType\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"KeyMarker\"] !== undefined) {\n    contents.KeyMarker = data[\"KeyMarker\"];\n  }\n  if (data[\"MaxUploads\"] !== undefined) {\n    contents.MaxUploads = parseInt(data[\"MaxUploads\"]);\n  }\n  if (data[\"NextKeyMarker\"] !== undefined) {\n    contents.NextKeyMarker = data[\"NextKeyMarker\"];\n  }\n  if (data[\"NextUploadIdMarker\"] !== undefined) {\n    contents.NextUploadIdMarker = data[\"NextUploadIdMarker\"];\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = data[\"Prefix\"];\n  }\n  if (data[\"UploadIdMarker\"] !== undefined) {\n    contents.UploadIdMarker = data[\"UploadIdMarker\"];\n  }\n  if (data.Upload === \"\") {\n    contents.Uploads = [];\n  }\n  if (data[\"Upload\"] !== undefined) {\n    contents.Uploads = deserializeAws_restXmlMultipartUploadList(__getArrayIfSingleItem(data[\"Upload\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListMultipartUploadsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListMultipartUploadsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListObjectsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListObjectsCommandError(output, context);\n  }\n  const contents: ListObjectsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    CommonPrefixes: undefined,\n    Contents: undefined,\n    Delimiter: undefined,\n    EncodingType: undefined,\n    IsTruncated: undefined,\n    Marker: undefined,\n    MaxKeys: undefined,\n    Name: undefined,\n    NextMarker: undefined,\n    Prefix: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  }\n  if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(\n      __getArrayIfSingleItem(data[\"CommonPrefixes\"]),\n      context\n    );\n  }\n  if (data.Contents === \"\") {\n    contents.Contents = [];\n  }\n  if (data[\"Contents\"] !== undefined) {\n    contents.Contents = deserializeAws_restXmlObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = data[\"Delimiter\"];\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = data[\"EncodingType\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"Marker\"] !== undefined) {\n    contents.Marker = data[\"Marker\"];\n  }\n  if (data[\"MaxKeys\"] !== undefined) {\n    contents.MaxKeys = parseInt(data[\"MaxKeys\"]);\n  }\n  if (data[\"Name\"] !== undefined) {\n    contents.Name = data[\"Name\"];\n  }\n  if (data[\"NextMarker\"] !== undefined) {\n    contents.NextMarker = data[\"NextMarker\"];\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = data[\"Prefix\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListObjectsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchBucket\":\n    case \"com.amazonaws.s3#NoSuchBucket\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListObjectsV2Command = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectsV2CommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListObjectsV2CommandError(output, context);\n  }\n  const contents: ListObjectsV2CommandOutput = {\n    $metadata: deserializeMetadata(output),\n    CommonPrefixes: undefined,\n    Contents: undefined,\n    ContinuationToken: undefined,\n    Delimiter: undefined,\n    EncodingType: undefined,\n    IsTruncated: undefined,\n    KeyCount: undefined,\n    MaxKeys: undefined,\n    Name: undefined,\n    NextContinuationToken: undefined,\n    Prefix: undefined,\n    StartAfter: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  }\n  if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(\n      __getArrayIfSingleItem(data[\"CommonPrefixes\"]),\n      context\n    );\n  }\n  if (data.Contents === \"\") {\n    contents.Contents = [];\n  }\n  if (data[\"Contents\"] !== undefined) {\n    contents.Contents = deserializeAws_restXmlObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n  }\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = data[\"ContinuationToken\"];\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = data[\"Delimiter\"];\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = data[\"EncodingType\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"KeyCount\"] !== undefined) {\n    contents.KeyCount = parseInt(data[\"KeyCount\"]);\n  }\n  if (data[\"MaxKeys\"] !== undefined) {\n    contents.MaxKeys = parseInt(data[\"MaxKeys\"]);\n  }\n  if (data[\"Name\"] !== undefined) {\n    contents.Name = data[\"Name\"];\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = data[\"NextContinuationToken\"];\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = data[\"Prefix\"];\n  }\n  if (data[\"StartAfter\"] !== undefined) {\n    contents.StartAfter = data[\"StartAfter\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListObjectsV2CommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectsV2CommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchBucket\":\n    case \"com.amazonaws.s3#NoSuchBucket\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListObjectVersionsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectVersionsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListObjectVersionsCommandError(output, context);\n  }\n  const contents: ListObjectVersionsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    CommonPrefixes: undefined,\n    DeleteMarkers: undefined,\n    Delimiter: undefined,\n    EncodingType: undefined,\n    IsTruncated: undefined,\n    KeyMarker: undefined,\n    MaxKeys: undefined,\n    Name: undefined,\n    NextKeyMarker: undefined,\n    NextVersionIdMarker: undefined,\n    Prefix: undefined,\n    VersionIdMarker: undefined,\n    Versions: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  }\n  if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(\n      __getArrayIfSingleItem(data[\"CommonPrefixes\"]),\n      context\n    );\n  }\n  if (data.DeleteMarker === \"\") {\n    contents.DeleteMarkers = [];\n  }\n  if (data[\"DeleteMarker\"] !== undefined) {\n    contents.DeleteMarkers = deserializeAws_restXmlDeleteMarkers(__getArrayIfSingleItem(data[\"DeleteMarker\"]), context);\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = data[\"Delimiter\"];\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = data[\"EncodingType\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"KeyMarker\"] !== undefined) {\n    contents.KeyMarker = data[\"KeyMarker\"];\n  }\n  if (data[\"MaxKeys\"] !== undefined) {\n    contents.MaxKeys = parseInt(data[\"MaxKeys\"]);\n  }\n  if (data[\"Name\"] !== undefined) {\n    contents.Name = data[\"Name\"];\n  }\n  if (data[\"NextKeyMarker\"] !== undefined) {\n    contents.NextKeyMarker = data[\"NextKeyMarker\"];\n  }\n  if (data[\"NextVersionIdMarker\"] !== undefined) {\n    contents.NextVersionIdMarker = data[\"NextVersionIdMarker\"];\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = data[\"Prefix\"];\n  }\n  if (data[\"VersionIdMarker\"] !== undefined) {\n    contents.VersionIdMarker = data[\"VersionIdMarker\"];\n  }\n  if (data.Version === \"\") {\n    contents.Versions = [];\n  }\n  if (data[\"Version\"] !== undefined) {\n    contents.Versions = deserializeAws_restXmlObjectVersionList(__getArrayIfSingleItem(data[\"Version\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListObjectVersionsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectVersionsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListPartsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListPartsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListPartsCommandError(output, context);\n  }\n  const contents: ListPartsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AbortDate: undefined,\n    AbortRuleId: undefined,\n    Bucket: undefined,\n    Initiator: undefined,\n    IsTruncated: undefined,\n    Key: undefined,\n    MaxParts: undefined,\n    NextPartNumberMarker: undefined,\n    Owner: undefined,\n    PartNumberMarker: undefined,\n    Parts: undefined,\n    RequestCharged: undefined,\n    StorageClass: undefined,\n    UploadId: undefined,\n  };\n  if (output.headers[\"x-amz-abort-date\"] !== undefined) {\n    contents.AbortDate = new Date(output.headers[\"x-amz-abort-date\"]);\n  }\n  if (output.headers[\"x-amz-abort-rule-id\"] !== undefined) {\n    contents.AbortRuleId = output.headers[\"x-amz-abort-rule-id\"];\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = data[\"Bucket\"];\n  }\n  if (data[\"Initiator\"] !== undefined) {\n    contents.Initiator = deserializeAws_restXmlInitiator(data[\"Initiator\"], context);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"Key\"] !== undefined) {\n    contents.Key = data[\"Key\"];\n  }\n  if (data[\"MaxParts\"] !== undefined) {\n    contents.MaxParts = parseInt(data[\"MaxParts\"]);\n  }\n  if (data[\"NextPartNumberMarker\"] !== undefined) {\n    contents.NextPartNumberMarker = data[\"NextPartNumberMarker\"];\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n  }\n  if (data[\"PartNumberMarker\"] !== undefined) {\n    contents.PartNumberMarker = data[\"PartNumberMarker\"];\n  }\n  if (data.Part === \"\") {\n    contents.Parts = [];\n  }\n  if (data[\"Part\"] !== undefined) {\n    contents.Parts = deserializeAws_restXmlParts(__getArrayIfSingleItem(data[\"Part\"]), context);\n  }\n  if (data[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = data[\"StorageClass\"];\n  }\n  if (data[\"UploadId\"] !== undefined) {\n    contents.UploadId = data[\"UploadId\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListPartsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListPartsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAccelerateConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketAccelerateConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAccelerateConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketAclCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAclCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketAclCommandError(output, context);\n  }\n  const contents: PutBucketAclCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketAclCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAclCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAnalyticsConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketAnalyticsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAnalyticsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketCorsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketCorsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketCorsCommandError(output, context);\n  }\n  const contents: PutBucketCorsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketCorsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketCorsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketEncryptionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketEncryptionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketEncryptionCommandError(output, context);\n  }\n  const contents: PutBucketEncryptionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketEncryptionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketEncryptionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketIntelligentTieringConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketIntelligentTieringConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketIntelligentTieringConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketInventoryConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketInventoryConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketInventoryConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketInventoryConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketInventoryConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketInventoryConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketLifecycleConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketLifecycleConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketLifecycleConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketLoggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketLoggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketLoggingCommandError(output, context);\n  }\n  const contents: PutBucketLoggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketLoggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketLoggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketMetricsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketMetricsConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketMetricsConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketMetricsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketMetricsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketMetricsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketNotificationConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketNotificationConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketNotificationConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketNotificationConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketNotificationConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketNotificationConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketOwnershipControlsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketOwnershipControlsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketOwnershipControlsCommandError(output, context);\n  }\n  const contents: PutBucketOwnershipControlsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketOwnershipControlsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketOwnershipControlsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketPolicyCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketPolicyCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketPolicyCommandError(output, context);\n  }\n  const contents: PutBucketPolicyCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketPolicyCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketPolicyCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketReplicationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketReplicationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketReplicationCommandError(output, context);\n  }\n  const contents: PutBucketReplicationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketReplicationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketReplicationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketRequestPaymentCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketRequestPaymentCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketRequestPaymentCommandError(output, context);\n  }\n  const contents: PutBucketRequestPaymentCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketRequestPaymentCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketRequestPaymentCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketTaggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketTaggingCommandError(output, context);\n  }\n  const contents: PutBucketTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketVersioningCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketVersioningCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketVersioningCommandError(output, context);\n  }\n  const contents: PutBucketVersioningCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketVersioningCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketVersioningCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketWebsiteCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketWebsiteCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketWebsiteCommandError(output, context);\n  }\n  const contents: PutBucketWebsiteCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketWebsiteCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketWebsiteCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectCommandError(output, context);\n  }\n  const contents: PutObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    BucketKeyEnabled: undefined,\n    ETag: undefined,\n    Expiration: undefined,\n    RequestCharged: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSEncryptionContext: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-expiration\"] !== undefined) {\n    contents.Expiration = output.headers[\"x-amz-expiration\"];\n  }\n  if (output.headers[\"etag\"] !== undefined) {\n    contents.ETag = output.headers[\"etag\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n    contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectAclCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectAclCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectAclCommandError(output, context);\n  }\n  const contents: PutObjectAclCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectAclCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectAclCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectLegalHoldCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectLegalHoldCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectLegalHoldCommandError(output, context);\n  }\n  const contents: PutObjectLegalHoldCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectLegalHoldCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectLegalHoldCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectLockConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectLockConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectLockConfigurationCommandError(output, context);\n  }\n  const contents: PutObjectLockConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectLockConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectLockConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectRetentionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectRetentionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectRetentionCommandError(output, context);\n  }\n  const contents: PutObjectRetentionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectRetentionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectRetentionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectTaggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectTaggingCommandError(output, context);\n  }\n  const contents: PutObjectTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutPublicAccessBlockCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutPublicAccessBlockCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutPublicAccessBlockCommandError(output, context);\n  }\n  const contents: PutPublicAccessBlockCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutPublicAccessBlockCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutPublicAccessBlockCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlRestoreObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<RestoreObjectCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlRestoreObjectCommandError(output, context);\n  }\n  const contents: RestoreObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n    RestoreOutputPath: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  if (output.headers[\"x-amz-restore-output-path\"] !== undefined) {\n    contents.RestoreOutputPath = output.headers[\"x-amz-restore-output-path\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlRestoreObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<RestoreObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ObjectAlreadyInActiveTierError\":\n    case \"com.amazonaws.s3#ObjectAlreadyInActiveTierError\":\n      response = {\n        ...(await deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlSelectObjectContentCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext & __EventStreamSerdeContext\n): Promise<SelectObjectContentCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlSelectObjectContentCommandError(output, context);\n  }\n  const contents: SelectObjectContentCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Payload: undefined,\n  };\n  const data: any = context.eventStreamMarshaller.deserialize(output.body, async (event) => {\n    const eventName = Object.keys(event)[0];\n    const eventHeaders = Object.entries(event[eventName].headers).reduce((accummulator, curr) => {\n      accummulator[curr[0]] = curr[1].value;\n      return accummulator;\n    }, {} as { [key: string]: any });\n    const eventMessage = {\n      headers: eventHeaders,\n      body: event[eventName].body,\n    };\n    const parsedEvent = {\n      [eventName]: eventMessage,\n    };\n    return await deserializeAws_restXmlSelectObjectContentEventStream_event(parsedEvent, context);\n  });\n  contents.Payload = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlSelectObjectContentCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<SelectObjectContentCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlUploadPartCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<UploadPartCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlUploadPartCommandError(output, context);\n  }\n  const contents: UploadPartCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    BucketKeyEnabled: undefined,\n    ETag: undefined,\n    RequestCharged: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n  };\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"etag\"] !== undefined) {\n    contents.ETag = output.headers[\"etag\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlUploadPartCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<UploadPartCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlUploadPartCopyCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<UploadPartCopyCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlUploadPartCopyCommandError(output, context);\n  }\n  const contents: UploadPartCopyCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    BucketKeyEnabled: undefined,\n    CopyPartResult: undefined,\n    CopySourceVersionId: undefined,\n    RequestCharged: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n  };\n  if (output.headers[\"x-amz-copy-source-version-id\"] !== undefined) {\n    contents.CopySourceVersionId = output.headers[\"x-amz-copy-source-version-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  contents.CopyPartResult = deserializeAws_restXmlCopyPartResult(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlUploadPartCopyCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<UploadPartCopyCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nconst deserializeAws_restXmlSelectObjectContentEventStream_event = async (\n  output: any,\n  context: __SerdeContext\n): Promise<SelectObjectContentEventStream> => {\n  if (output[\"Records\"] !== undefined) {\n    return {\n      Records: await deserializeAws_restXmlRecordsEvent_event(output[\"Records\"], context),\n    };\n  }\n  if (output[\"Stats\"] !== undefined) {\n    return {\n      Stats: await deserializeAws_restXmlStatsEvent_event(output[\"Stats\"], context),\n    };\n  }\n  if (output[\"Progress\"] !== undefined) {\n    return {\n      Progress: await deserializeAws_restXmlProgressEvent_event(output[\"Progress\"], context),\n    };\n  }\n  if (output[\"Cont\"] !== undefined) {\n    return {\n      Cont: await deserializeAws_restXmlContinuationEvent_event(output[\"Cont\"], context),\n    };\n  }\n  if (output[\"End\"] !== undefined) {\n    return {\n      End: await deserializeAws_restXmlEndEvent_event(output[\"End\"], context),\n    };\n  }\n  return { $unknown: output };\n};\nconst deserializeAws_restXmlContinuationEvent_event = async (\n  output: any,\n  context: __SerdeContext\n): Promise<ContinuationEvent> => {\n  let contents: ContinuationEvent = {} as any;\n  return contents;\n};\nconst deserializeAws_restXmlEndEvent_event = async (output: any, context: __SerdeContext): Promise<EndEvent> => {\n  let contents: EndEvent = {} as any;\n  return contents;\n};\nconst deserializeAws_restXmlProgressEvent_event = async (\n  output: any,\n  context: __SerdeContext\n): Promise<ProgressEvent> => {\n  let contents: ProgressEvent = {} as any;\n  contents.Details = await parseBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlRecordsEvent_event = async (\n  output: any,\n  context: __SerdeContext\n): Promise<RecordsEvent> => {\n  let contents: RecordsEvent = {} as any;\n  contents.Payload = output.body;\n  return contents;\n};\nconst deserializeAws_restXmlStatsEvent_event = async (output: any, context: __SerdeContext): Promise<StatsEvent> => {\n  let contents: StatsEvent = {} as any;\n  contents.Details = await parseBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlBucketAlreadyExistsResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<BucketAlreadyExists> => {\n  const contents: BucketAlreadyExists = {\n    name: \"BucketAlreadyExists\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlBucketAlreadyOwnedByYouResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<BucketAlreadyOwnedByYou> => {\n  const contents: BucketAlreadyOwnedByYou = {\n    name: \"BucketAlreadyOwnedByYou\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlInvalidObjectStateResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidObjectState> => {\n  const contents: InvalidObjectState = {\n    name: \"InvalidObjectState\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    AccessTier: undefined,\n    StorageClass: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data[\"AccessTier\"] !== undefined) {\n    contents.AccessTier = data[\"AccessTier\"];\n  }\n  if (data[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = data[\"StorageClass\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlNoSuchBucketResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<NoSuchBucket> => {\n  const contents: NoSuchBucket = {\n    name: \"NoSuchBucket\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlNoSuchKeyResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<NoSuchKey> => {\n  const contents: NoSuchKey = {\n    name: \"NoSuchKey\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlNoSuchUploadResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<NoSuchUpload> => {\n  const contents: NoSuchUpload = {\n    name: \"NoSuchUpload\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<ObjectAlreadyInActiveTierError> => {\n  const contents: ObjectAlreadyInActiveTierError = {\n    name: \"ObjectAlreadyInActiveTierError\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectNotInActiveTierErrorResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<ObjectNotInActiveTierError> => {\n  const contents: ObjectNotInActiveTierError = {\n    name: \"ObjectNotInActiveTierError\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst serializeAws_restXmlAbortIncompleteMultipartUpload = (\n  input: AbortIncompleteMultipartUpload,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"AbortIncompleteMultipartUpload\");\n  if (input.DaysAfterInitiation !== undefined && input.DaysAfterInitiation !== null) {\n    const node = new __XmlNode(\"DaysAfterInitiation\")\n      .addChildNode(new __XmlText(String(input.DaysAfterInitiation)))\n      .withName(\"DaysAfterInitiation\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAccelerateConfiguration = (input: AccelerateConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"AccelerateConfiguration\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"BucketAccelerateStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAccessControlPolicy = (input: AccessControlPolicy, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"AccessControlPolicy\");\n  if (input.Grants !== undefined && input.Grants !== null) {\n    const nodes = serializeAws_restXmlGrants(input.Grants, context);\n    const containerNode = new __XmlNode(\"AccessControlList\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.Owner !== undefined && input.Owner !== null) {\n    const node = serializeAws_restXmlOwner(input.Owner, context).withName(\"Owner\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAccessControlTranslation = (\n  input: AccessControlTranslation,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"AccessControlTranslation\");\n  if (input.Owner !== undefined && input.Owner !== null) {\n    const node = new __XmlNode(\"OwnerOverride\").addChildNode(new __XmlText(input.Owner)).withName(\"Owner\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAllowedHeaders = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"AllowedHeader\").addChildNode(new __XmlText(entry));\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlAllowedMethods = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"AllowedMethod\").addChildNode(new __XmlText(entry));\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlAllowedOrigins = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"AllowedOrigin\").addChildNode(new __XmlText(entry));\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlAnalyticsAndOperator = (input: AnalyticsAndOperator, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"AnalyticsAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAnalyticsConfiguration = (input: AnalyticsConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"AnalyticsConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"AnalyticsId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlAnalyticsFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClassAnalysis !== undefined && input.StorageClassAnalysis !== null) {\n    const node = serializeAws_restXmlStorageClassAnalysis(input.StorageClassAnalysis, context).withName(\n      \"StorageClassAnalysis\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAnalyticsExportDestination = (\n  input: AnalyticsExportDestination,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"AnalyticsExportDestination\");\n  if (input.S3BucketDestination !== undefined && input.S3BucketDestination !== null) {\n    const node = serializeAws_restXmlAnalyticsS3BucketDestination(input.S3BucketDestination, context).withName(\n      \"S3BucketDestination\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAnalyticsFilter = (input: AnalyticsFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"AnalyticsFilter\");\n  AnalyticsFilter.visit(input, {\n    Prefix: (value) => {\n      const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: (value) => {\n      const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: (value) => {\n      const node = serializeAws_restXmlAnalyticsAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name: string, value: any) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    },\n  });\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAnalyticsS3BucketDestination = (\n  input: AnalyticsS3BucketDestination,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"AnalyticsS3BucketDestination\");\n  if (input.Format !== undefined && input.Format !== null) {\n    const node = new __XmlNode(\"AnalyticsS3ExportFileFormat\")\n      .addChildNode(new __XmlText(input.Format))\n      .withName(\"Format\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BucketAccountId !== undefined && input.BucketAccountId !== null) {\n    const node = new __XmlNode(\"AccountId\")\n      .addChildNode(new __XmlText(input.BucketAccountId))\n      .withName(\"BucketAccountId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Bucket !== undefined && input.Bucket !== null) {\n    const node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.Bucket)).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlBucketLifecycleConfiguration = (\n  input: BucketLifecycleConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"BucketLifecycleConfiguration\");\n  if (input.Rules !== undefined && input.Rules !== null) {\n    const nodes = serializeAws_restXmlLifecycleRules(input.Rules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlBucketLoggingStatus = (input: BucketLoggingStatus, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"BucketLoggingStatus\");\n  if (input.LoggingEnabled !== undefined && input.LoggingEnabled !== null) {\n    const node = serializeAws_restXmlLoggingEnabled(input.LoggingEnabled, context).withName(\"LoggingEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCompletedMultipartUpload = (\n  input: CompletedMultipartUpload,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"CompletedMultipartUpload\");\n  if (input.Parts !== undefined && input.Parts !== null) {\n    const nodes = serializeAws_restXmlCompletedPartList(input.Parts, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Part\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCompletedPart = (input: CompletedPart, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"CompletedPart\");\n  if (input.ETag !== undefined && input.ETag !== null) {\n    const node = new __XmlNode(\"ETag\").addChildNode(new __XmlText(input.ETag)).withName(\"ETag\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.PartNumber !== undefined && input.PartNumber !== null) {\n    const node = new __XmlNode(\"PartNumber\")\n      .addChildNode(new __XmlText(String(input.PartNumber)))\n      .withName(\"PartNumber\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCompletedPartList = (input: CompletedPart[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlCompletedPart(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlCondition = (input: Condition, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Condition\");\n  if (input.HttpErrorCodeReturnedEquals !== undefined && input.HttpErrorCodeReturnedEquals !== null) {\n    const node = new __XmlNode(\"HttpErrorCodeReturnedEquals\")\n      .addChildNode(new __XmlText(input.HttpErrorCodeReturnedEquals))\n      .withName(\"HttpErrorCodeReturnedEquals\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KeyPrefixEquals !== undefined && input.KeyPrefixEquals !== null) {\n    const node = new __XmlNode(\"KeyPrefixEquals\")\n      .addChildNode(new __XmlText(input.KeyPrefixEquals))\n      .withName(\"KeyPrefixEquals\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCORSConfiguration = (input: CORSConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"CORSConfiguration\");\n  if (input.CORSRules !== undefined && input.CORSRules !== null) {\n    const nodes = serializeAws_restXmlCORSRules(input.CORSRules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"CORSRule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCORSRule = (input: CORSRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"CORSRule\");\n  if (input.AllowedHeaders !== undefined && input.AllowedHeaders !== null) {\n    const nodes = serializeAws_restXmlAllowedHeaders(input.AllowedHeaders, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"AllowedHeader\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.AllowedMethods !== undefined && input.AllowedMethods !== null) {\n    const nodes = serializeAws_restXmlAllowedMethods(input.AllowedMethods, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"AllowedMethod\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.AllowedOrigins !== undefined && input.AllowedOrigins !== null) {\n    const nodes = serializeAws_restXmlAllowedOrigins(input.AllowedOrigins, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"AllowedOrigin\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.ExposeHeaders !== undefined && input.ExposeHeaders !== null) {\n    const nodes = serializeAws_restXmlExposeHeaders(input.ExposeHeaders, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"ExposeHeader\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.MaxAgeSeconds !== undefined && input.MaxAgeSeconds !== null) {\n    const node = new __XmlNode(\"MaxAgeSeconds\")\n      .addChildNode(new __XmlText(String(input.MaxAgeSeconds)))\n      .withName(\"MaxAgeSeconds\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCORSRules = (input: CORSRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlCORSRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlCreateBucketConfiguration = (\n  input: CreateBucketConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"CreateBucketConfiguration\");\n  if (input.LocationConstraint !== undefined && input.LocationConstraint !== null) {\n    const node = new __XmlNode(\"BucketLocationConstraint\")\n      .addChildNode(new __XmlText(input.LocationConstraint))\n      .withName(\"LocationConstraint\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCSVInput = (input: CSVInput, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"CSVInput\");\n  if (input.FileHeaderInfo !== undefined && input.FileHeaderInfo !== null) {\n    const node = new __XmlNode(\"FileHeaderInfo\")\n      .addChildNode(new __XmlText(input.FileHeaderInfo))\n      .withName(\"FileHeaderInfo\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Comments !== undefined && input.Comments !== null) {\n    const node = new __XmlNode(\"Comments\").addChildNode(new __XmlText(input.Comments)).withName(\"Comments\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteEscapeCharacter !== undefined && input.QuoteEscapeCharacter !== null) {\n    const node = new __XmlNode(\"QuoteEscapeCharacter\")\n      .addChildNode(new __XmlText(input.QuoteEscapeCharacter))\n      .withName(\"QuoteEscapeCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n    const node = new __XmlNode(\"RecordDelimiter\")\n      .addChildNode(new __XmlText(input.RecordDelimiter))\n      .withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.FieldDelimiter !== undefined && input.FieldDelimiter !== null) {\n    const node = new __XmlNode(\"FieldDelimiter\")\n      .addChildNode(new __XmlText(input.FieldDelimiter))\n      .withName(\"FieldDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteCharacter !== undefined && input.QuoteCharacter !== null) {\n    const node = new __XmlNode(\"QuoteCharacter\")\n      .addChildNode(new __XmlText(input.QuoteCharacter))\n      .withName(\"QuoteCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AllowQuotedRecordDelimiter !== undefined && input.AllowQuotedRecordDelimiter !== null) {\n    const node = new __XmlNode(\"AllowQuotedRecordDelimiter\")\n      .addChildNode(new __XmlText(String(input.AllowQuotedRecordDelimiter)))\n      .withName(\"AllowQuotedRecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCSVOutput = (input: CSVOutput, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"CSVOutput\");\n  if (input.QuoteFields !== undefined && input.QuoteFields !== null) {\n    const node = new __XmlNode(\"QuoteFields\").addChildNode(new __XmlText(input.QuoteFields)).withName(\"QuoteFields\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteEscapeCharacter !== undefined && input.QuoteEscapeCharacter !== null) {\n    const node = new __XmlNode(\"QuoteEscapeCharacter\")\n      .addChildNode(new __XmlText(input.QuoteEscapeCharacter))\n      .withName(\"QuoteEscapeCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n    const node = new __XmlNode(\"RecordDelimiter\")\n      .addChildNode(new __XmlText(input.RecordDelimiter))\n      .withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.FieldDelimiter !== undefined && input.FieldDelimiter !== null) {\n    const node = new __XmlNode(\"FieldDelimiter\")\n      .addChildNode(new __XmlText(input.FieldDelimiter))\n      .withName(\"FieldDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteCharacter !== undefined && input.QuoteCharacter !== null) {\n    const node = new __XmlNode(\"QuoteCharacter\")\n      .addChildNode(new __XmlText(input.QuoteCharacter))\n      .withName(\"QuoteCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlDefaultRetention = (input: DefaultRetention, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"DefaultRetention\");\n  if (input.Mode !== undefined && input.Mode !== null) {\n    const node = new __XmlNode(\"ObjectLockRetentionMode\").addChildNode(new __XmlText(input.Mode)).withName(\"Mode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days !== undefined && input.Days !== null) {\n    const node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Years !== undefined && input.Years !== null) {\n    const node = new __XmlNode(\"Years\").addChildNode(new __XmlText(String(input.Years))).withName(\"Years\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlDelete = (input: Delete, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Delete\");\n  if (input.Objects !== undefined && input.Objects !== null) {\n    const nodes = serializeAws_restXmlObjectIdentifierList(input.Objects, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Object\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Quiet !== undefined && input.Quiet !== null) {\n    const node = new __XmlNode(\"Quiet\").addChildNode(new __XmlText(String(input.Quiet))).withName(\"Quiet\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlDeleteMarkerReplication = (input: DeleteMarkerReplication, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"DeleteMarkerReplication\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"DeleteMarkerReplicationStatus\")\n      .addChildNode(new __XmlText(input.Status))\n      .withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlDestination = (input: Destination, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Destination\");\n  if (input.Bucket !== undefined && input.Bucket !== null) {\n    const node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.Bucket)).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Account !== undefined && input.Account !== null) {\n    const node = new __XmlNode(\"AccountId\").addChildNode(new __XmlText(input.Account)).withName(\"Account\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    const node = new __XmlNode(\"StorageClass\").addChildNode(new __XmlText(input.StorageClass)).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessControlTranslation !== undefined && input.AccessControlTranslation !== null) {\n    const node = serializeAws_restXmlAccessControlTranslation(input.AccessControlTranslation, context).withName(\n      \"AccessControlTranslation\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.EncryptionConfiguration !== undefined && input.EncryptionConfiguration !== null) {\n    const node = serializeAws_restXmlEncryptionConfiguration(input.EncryptionConfiguration, context).withName(\n      \"EncryptionConfiguration\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplicationTime !== undefined && input.ReplicationTime !== null) {\n    const node = serializeAws_restXmlReplicationTime(input.ReplicationTime, context).withName(\"ReplicationTime\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Metrics !== undefined && input.Metrics !== null) {\n    const node = serializeAws_restXmlMetrics(input.Metrics, context).withName(\"Metrics\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlEncryption = (input: Encryption, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Encryption\");\n  if (input.EncryptionType !== undefined && input.EncryptionType !== null) {\n    const node = new __XmlNode(\"ServerSideEncryption\")\n      .addChildNode(new __XmlText(input.EncryptionType))\n      .withName(\"EncryptionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSKeyId !== undefined && input.KMSKeyId !== null) {\n    const node = new __XmlNode(\"SSEKMSKeyId\").addChildNode(new __XmlText(input.KMSKeyId)).withName(\"KMSKeyId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSContext !== undefined && input.KMSContext !== null) {\n    const node = new __XmlNode(\"KMSContext\").addChildNode(new __XmlText(input.KMSContext)).withName(\"KMSContext\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlEncryptionConfiguration = (input: EncryptionConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"EncryptionConfiguration\");\n  if (input.ReplicaKmsKeyID !== undefined && input.ReplicaKmsKeyID !== null) {\n    const node = new __XmlNode(\"ReplicaKmsKeyID\")\n      .addChildNode(new __XmlText(input.ReplicaKmsKeyID))\n      .withName(\"ReplicaKmsKeyID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlErrorDocument = (input: ErrorDocument, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ErrorDocument\");\n  if (input.Key !== undefined && input.Key !== null) {\n    const node = new __XmlNode(\"ObjectKey\").addChildNode(new __XmlText(input.Key)).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlEventList = (input: (Event | string)[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"Event\").addChildNode(new __XmlText(entry));\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlExistingObjectReplication = (\n  input: ExistingObjectReplication,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ExistingObjectReplication\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ExistingObjectReplicationStatus\")\n      .addChildNode(new __XmlText(input.Status))\n      .withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlExposeHeaders = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"ExposeHeader\").addChildNode(new __XmlText(entry));\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlFilterRule = (input: FilterRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"FilterRule\");\n  if (input.Name !== undefined && input.Name !== null) {\n    const node = new __XmlNode(\"FilterRuleName\").addChildNode(new __XmlText(input.Name)).withName(\"Name\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value !== undefined && input.Value !== null) {\n    const node = new __XmlNode(\"FilterRuleValue\").addChildNode(new __XmlText(input.Value)).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlFilterRuleList = (input: FilterRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlFilterRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlGlacierJobParameters = (input: GlacierJobParameters, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"GlacierJobParameters\");\n  if (input.Tier !== undefined && input.Tier !== null) {\n    const node = new __XmlNode(\"Tier\").addChildNode(new __XmlText(input.Tier)).withName(\"Tier\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlGrant = (input: Grant, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Grant\");\n  if (input.Grantee !== undefined && input.Grantee !== null) {\n    const node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Permission !== undefined && input.Permission !== null) {\n    const node = new __XmlNode(\"Permission\").addChildNode(new __XmlText(input.Permission)).withName(\"Permission\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlGrantee = (input: Grantee, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Grantee\");\n  if (input.DisplayName !== undefined && input.DisplayName !== null) {\n    const node = new __XmlNode(\"DisplayName\").addChildNode(new __XmlText(input.DisplayName)).withName(\"DisplayName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.EmailAddress !== undefined && input.EmailAddress !== null) {\n    const node = new __XmlNode(\"EmailAddress\").addChildNode(new __XmlText(input.EmailAddress)).withName(\"EmailAddress\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID !== undefined && input.ID !== null) {\n    const node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.URI !== undefined && input.URI !== null) {\n    const node = new __XmlNode(\"URI\").addChildNode(new __XmlText(input.URI)).withName(\"URI\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Type !== undefined && input.Type !== null) {\n    bodyNode.addAttribute(\"xsi:type\", input.Type);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlGrants = (input: Grant[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlGrant(entry, context);\n      return node.withName(\"Grant\");\n    });\n};\n\nconst serializeAws_restXmlIndexDocument = (input: IndexDocument, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"IndexDocument\");\n  if (input.Suffix !== undefined && input.Suffix !== null) {\n    const node = new __XmlNode(\"Suffix\").addChildNode(new __XmlText(input.Suffix)).withName(\"Suffix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInputSerialization = (input: InputSerialization, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InputSerialization\");\n  if (input.CSV !== undefined && input.CSV !== null) {\n    const node = serializeAws_restXmlCSVInput(input.CSV, context).withName(\"CSV\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.CompressionType !== undefined && input.CompressionType !== null) {\n    const node = new __XmlNode(\"CompressionType\")\n      .addChildNode(new __XmlText(input.CompressionType))\n      .withName(\"CompressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.JSON !== undefined && input.JSON !== null) {\n    const node = serializeAws_restXmlJSONInput(input.JSON, context).withName(\"JSON\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Parquet !== undefined && input.Parquet !== null) {\n    const node = serializeAws_restXmlParquetInput(input.Parquet, context).withName(\"Parquet\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlIntelligentTieringAndOperator = (\n  input: IntelligentTieringAndOperator,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"IntelligentTieringAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlIntelligentTieringConfiguration = (\n  input: IntelligentTieringConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"IntelligentTieringConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"IntelligentTieringId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlIntelligentTieringFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"IntelligentTieringStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tierings !== undefined && input.Tierings !== null) {\n    const nodes = serializeAws_restXmlTieringList(input.Tierings, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tiering\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlIntelligentTieringFilter = (\n  input: IntelligentTieringFilter,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"IntelligentTieringFilter\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tag !== undefined && input.Tag !== null) {\n    const node = serializeAws_restXmlTag(input.Tag, context).withName(\"Tag\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.And !== undefined && input.And !== null) {\n    const node = serializeAws_restXmlIntelligentTieringAndOperator(input.And, context).withName(\"And\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventoryConfiguration = (input: InventoryConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InventoryConfiguration\");\n  if (input.Destination !== undefined && input.Destination !== null) {\n    const node = serializeAws_restXmlInventoryDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IsEnabled !== undefined && input.IsEnabled !== null) {\n    const node = new __XmlNode(\"IsEnabled\").addChildNode(new __XmlText(String(input.IsEnabled))).withName(\"IsEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlInventoryFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"InventoryId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IncludedObjectVersions !== undefined && input.IncludedObjectVersions !== null) {\n    const node = new __XmlNode(\"InventoryIncludedObjectVersions\")\n      .addChildNode(new __XmlText(input.IncludedObjectVersions))\n      .withName(\"IncludedObjectVersions\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OptionalFields !== undefined && input.OptionalFields !== null) {\n    const nodes = serializeAws_restXmlInventoryOptionalFields(input.OptionalFields, context);\n    const containerNode = new __XmlNode(\"OptionalFields\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.Schedule !== undefined && input.Schedule !== null) {\n    const node = serializeAws_restXmlInventorySchedule(input.Schedule, context).withName(\"Schedule\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventoryDestination = (input: InventoryDestination, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InventoryDestination\");\n  if (input.S3BucketDestination !== undefined && input.S3BucketDestination !== null) {\n    const node = serializeAws_restXmlInventoryS3BucketDestination(input.S3BucketDestination, context).withName(\n      \"S3BucketDestination\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventoryEncryption = (input: InventoryEncryption, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InventoryEncryption\");\n  if (input.SSES3 !== undefined && input.SSES3 !== null) {\n    const node = serializeAws_restXmlSSES3(input.SSES3, context).withName(\"SSE-S3\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SSEKMS !== undefined && input.SSEKMS !== null) {\n    const node = serializeAws_restXmlSSEKMS(input.SSEKMS, context).withName(\"SSE-KMS\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventoryFilter = (input: InventoryFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InventoryFilter\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventoryOptionalFields = (\n  input: (InventoryOptionalField | string)[],\n  context: __SerdeContext\n): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"InventoryOptionalField\").addChildNode(new __XmlText(entry));\n      return node.withName(\"Field\");\n    });\n};\n\nconst serializeAws_restXmlInventoryS3BucketDestination = (\n  input: InventoryS3BucketDestination,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"InventoryS3BucketDestination\");\n  if (input.AccountId !== undefined && input.AccountId !== null) {\n    const node = new __XmlNode(\"AccountId\").addChildNode(new __XmlText(input.AccountId)).withName(\"AccountId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Bucket !== undefined && input.Bucket !== null) {\n    const node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.Bucket)).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Format !== undefined && input.Format !== null) {\n    const node = new __XmlNode(\"InventoryFormat\").addChildNode(new __XmlText(input.Format)).withName(\"Format\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Encryption !== undefined && input.Encryption !== null) {\n    const node = serializeAws_restXmlInventoryEncryption(input.Encryption, context).withName(\"Encryption\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventorySchedule = (input: InventorySchedule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InventorySchedule\");\n  if (input.Frequency !== undefined && input.Frequency !== null) {\n    const node = new __XmlNode(\"InventoryFrequency\").addChildNode(new __XmlText(input.Frequency)).withName(\"Frequency\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlJSONInput = (input: JSONInput, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"JSONInput\");\n  if (input.Type !== undefined && input.Type !== null) {\n    const node = new __XmlNode(\"JSONType\").addChildNode(new __XmlText(input.Type)).withName(\"Type\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlJSONOutput = (input: JSONOutput, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"JSONOutput\");\n  if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n    const node = new __XmlNode(\"RecordDelimiter\")\n      .addChildNode(new __XmlText(input.RecordDelimiter))\n      .withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLambdaFunctionConfiguration = (\n  input: LambdaFunctionConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"LambdaFunctionConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"NotificationId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.LambdaFunctionArn !== undefined && input.LambdaFunctionArn !== null) {\n    const node = new __XmlNode(\"LambdaFunctionArn\")\n      .addChildNode(new __XmlText(input.LambdaFunctionArn))\n      .withName(\"CloudFunction\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events !== undefined && input.Events !== null) {\n    const nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLambdaFunctionConfigurationList = (\n  input: LambdaFunctionConfiguration[],\n  context: __SerdeContext\n): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlLifecycleExpiration = (input: LifecycleExpiration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"LifecycleExpiration\");\n  if (input.Date !== undefined && input.Date !== null) {\n    const node = new __XmlNode(\"Date\")\n      .addChildNode(new __XmlText(input.Date.toISOString().split(\".\")[0] + \"Z\"))\n      .withName(\"Date\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days !== undefined && input.Days !== null) {\n    const node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpiredObjectDeleteMarker !== undefined && input.ExpiredObjectDeleteMarker !== null) {\n    const node = new __XmlNode(\"ExpiredObjectDeleteMarker\")\n      .addChildNode(new __XmlText(String(input.ExpiredObjectDeleteMarker)))\n      .withName(\"ExpiredObjectDeleteMarker\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLifecycleRule = (input: LifecycleRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"LifecycleRule\");\n  if (input.Expiration !== undefined && input.Expiration !== null) {\n    const node = serializeAws_restXmlLifecycleExpiration(input.Expiration, context).withName(\"Expiration\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID !== undefined && input.ID !== null) {\n    const node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlLifecycleRuleFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ExpirationStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Transitions !== undefined && input.Transitions !== null) {\n    const nodes = serializeAws_restXmlTransitionList(input.Transitions, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Transition\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.NoncurrentVersionTransitions !== undefined && input.NoncurrentVersionTransitions !== null) {\n    const nodes = serializeAws_restXmlNoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"NoncurrentVersionTransition\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.NoncurrentVersionExpiration !== undefined && input.NoncurrentVersionExpiration !== null) {\n    const node = serializeAws_restXmlNoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName(\n      \"NoncurrentVersionExpiration\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.AbortIncompleteMultipartUpload !== undefined && input.AbortIncompleteMultipartUpload !== null) {\n    const node = serializeAws_restXmlAbortIncompleteMultipartUpload(\n      input.AbortIncompleteMultipartUpload,\n      context\n    ).withName(\"AbortIncompleteMultipartUpload\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLifecycleRuleAndOperator = (\n  input: LifecycleRuleAndOperator,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"LifecycleRuleAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLifecycleRuleFilter = (input: LifecycleRuleFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"LifecycleRuleFilter\");\n  LifecycleRuleFilter.visit(input, {\n    Prefix: (value) => {\n      const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: (value) => {\n      const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: (value) => {\n      const node = serializeAws_restXmlLifecycleRuleAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name: string, value: any) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    },\n  });\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLifecycleRules = (input: LifecycleRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlLifecycleRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlLoggingEnabled = (input: LoggingEnabled, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"LoggingEnabled\");\n  if (input.TargetBucket !== undefined && input.TargetBucket !== null) {\n    const node = new __XmlNode(\"TargetBucket\").addChildNode(new __XmlText(input.TargetBucket)).withName(\"TargetBucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.TargetGrants !== undefined && input.TargetGrants !== null) {\n    const nodes = serializeAws_restXmlTargetGrants(input.TargetGrants, context);\n    const containerNode = new __XmlNode(\"TargetGrants\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.TargetPrefix !== undefined && input.TargetPrefix !== null) {\n    const node = new __XmlNode(\"TargetPrefix\").addChildNode(new __XmlText(input.TargetPrefix)).withName(\"TargetPrefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlMetadataEntry = (input: MetadataEntry, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"MetadataEntry\");\n  if (input.Name !== undefined && input.Name !== null) {\n    const node = new __XmlNode(\"MetadataKey\").addChildNode(new __XmlText(input.Name)).withName(\"Name\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value !== undefined && input.Value !== null) {\n    const node = new __XmlNode(\"MetadataValue\").addChildNode(new __XmlText(input.Value)).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlMetrics = (input: Metrics, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Metrics\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"MetricsStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.EventThreshold !== undefined && input.EventThreshold !== null) {\n    const node = serializeAws_restXmlReplicationTimeValue(input.EventThreshold, context).withName(\"EventThreshold\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlMetricsAndOperator = (input: MetricsAndOperator, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"MetricsAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlMetricsConfiguration = (input: MetricsConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"MetricsConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"MetricsId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlMetricsFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlMetricsFilter = (input: MetricsFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"MetricsFilter\");\n  MetricsFilter.visit(input, {\n    Prefix: (value) => {\n      const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: (value) => {\n      const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: (value) => {\n      const node = serializeAws_restXmlMetricsAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name: string, value: any) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    },\n  });\n  return bodyNode;\n};\n\nconst serializeAws_restXmlNoncurrentVersionExpiration = (\n  input: NoncurrentVersionExpiration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"NoncurrentVersionExpiration\");\n  if (input.NoncurrentDays !== undefined && input.NoncurrentDays !== null) {\n    const node = new __XmlNode(\"Days\")\n      .addChildNode(new __XmlText(String(input.NoncurrentDays)))\n      .withName(\"NoncurrentDays\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlNoncurrentVersionTransition = (\n  input: NoncurrentVersionTransition,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"NoncurrentVersionTransition\");\n  if (input.NoncurrentDays !== undefined && input.NoncurrentDays !== null) {\n    const node = new __XmlNode(\"Days\")\n      .addChildNode(new __XmlText(String(input.NoncurrentDays)))\n      .withName(\"NoncurrentDays\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    const node = new __XmlNode(\"TransitionStorageClass\")\n      .addChildNode(new __XmlText(input.StorageClass))\n      .withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlNoncurrentVersionTransitionList = (\n  input: NoncurrentVersionTransition[],\n  context: __SerdeContext\n): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlNoncurrentVersionTransition(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlNotificationConfiguration = (\n  input: NotificationConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"NotificationConfiguration\");\n  if (input.TopicConfigurations !== undefined && input.TopicConfigurations !== null) {\n    const nodes = serializeAws_restXmlTopicConfigurationList(input.TopicConfigurations, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"TopicConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.QueueConfigurations !== undefined && input.QueueConfigurations !== null) {\n    const nodes = serializeAws_restXmlQueueConfigurationList(input.QueueConfigurations, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"QueueConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.LambdaFunctionConfigurations !== undefined && input.LambdaFunctionConfigurations !== null) {\n    const nodes = serializeAws_restXmlLambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"CloudFunctionConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlNotificationConfigurationFilter = (\n  input: NotificationConfigurationFilter,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"NotificationConfigurationFilter\");\n  if (input.Key !== undefined && input.Key !== null) {\n    const node = serializeAws_restXmlS3KeyFilter(input.Key, context).withName(\"S3Key\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlObjectIdentifier = (input: ObjectIdentifier, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ObjectIdentifier\");\n  if (input.Key !== undefined && input.Key !== null) {\n    const node = new __XmlNode(\"ObjectKey\").addChildNode(new __XmlText(input.Key)).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.VersionId !== undefined && input.VersionId !== null) {\n    const node = new __XmlNode(\"ObjectVersionId\").addChildNode(new __XmlText(input.VersionId)).withName(\"VersionId\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlObjectIdentifierList = (input: ObjectIdentifier[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlObjectIdentifier(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlObjectLockConfiguration = (input: ObjectLockConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ObjectLockConfiguration\");\n  if (input.ObjectLockEnabled !== undefined && input.ObjectLockEnabled !== null) {\n    const node = new __XmlNode(\"ObjectLockEnabled\")\n      .addChildNode(new __XmlText(input.ObjectLockEnabled))\n      .withName(\"ObjectLockEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Rule !== undefined && input.Rule !== null) {\n    const node = serializeAws_restXmlObjectLockRule(input.Rule, context).withName(\"Rule\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlObjectLockLegalHold = (input: ObjectLockLegalHold, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ObjectLockLegalHold\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ObjectLockLegalHoldStatus\")\n      .addChildNode(new __XmlText(input.Status))\n      .withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlObjectLockRetention = (input: ObjectLockRetention, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ObjectLockRetention\");\n  if (input.Mode !== undefined && input.Mode !== null) {\n    const node = new __XmlNode(\"ObjectLockRetentionMode\").addChildNode(new __XmlText(input.Mode)).withName(\"Mode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RetainUntilDate !== undefined && input.RetainUntilDate !== null) {\n    const node = new __XmlNode(\"Date\")\n      .addChildNode(new __XmlText(input.RetainUntilDate.toISOString().split(\".\")[0] + \"Z\"))\n      .withName(\"RetainUntilDate\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlObjectLockRule = (input: ObjectLockRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ObjectLockRule\");\n  if (input.DefaultRetention !== undefined && input.DefaultRetention !== null) {\n    const node = serializeAws_restXmlDefaultRetention(input.DefaultRetention, context).withName(\"DefaultRetention\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOutputLocation = (input: OutputLocation, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"OutputLocation\");\n  if (input.S3 !== undefined && input.S3 !== null) {\n    const node = serializeAws_restXmlS3Location(input.S3, context).withName(\"S3\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOutputSerialization = (input: OutputSerialization, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"OutputSerialization\");\n  if (input.CSV !== undefined && input.CSV !== null) {\n    const node = serializeAws_restXmlCSVOutput(input.CSV, context).withName(\"CSV\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.JSON !== undefined && input.JSON !== null) {\n    const node = serializeAws_restXmlJSONOutput(input.JSON, context).withName(\"JSON\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOwner = (input: Owner, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Owner\");\n  if (input.DisplayName !== undefined && input.DisplayName !== null) {\n    const node = new __XmlNode(\"DisplayName\").addChildNode(new __XmlText(input.DisplayName)).withName(\"DisplayName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID !== undefined && input.ID !== null) {\n    const node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOwnershipControls = (input: OwnershipControls, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"OwnershipControls\");\n  if (input.Rules !== undefined && input.Rules !== null) {\n    const nodes = serializeAws_restXmlOwnershipControlsRules(input.Rules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOwnershipControlsRule = (input: OwnershipControlsRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"OwnershipControlsRule\");\n  if (input.ObjectOwnership !== undefined && input.ObjectOwnership !== null) {\n    const node = new __XmlNode(\"ObjectOwnership\")\n      .addChildNode(new __XmlText(input.ObjectOwnership))\n      .withName(\"ObjectOwnership\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOwnershipControlsRules = (input: OwnershipControlsRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlOwnershipControlsRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlParquetInput = (input: ParquetInput, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ParquetInput\");\n  return bodyNode;\n};\n\nconst serializeAws_restXmlPublicAccessBlockConfiguration = (\n  input: PublicAccessBlockConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"PublicAccessBlockConfiguration\");\n  if (input.BlockPublicAcls !== undefined && input.BlockPublicAcls !== null) {\n    const node = new __XmlNode(\"Setting\")\n      .addChildNode(new __XmlText(String(input.BlockPublicAcls)))\n      .withName(\"BlockPublicAcls\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IgnorePublicAcls !== undefined && input.IgnorePublicAcls !== null) {\n    const node = new __XmlNode(\"Setting\")\n      .addChildNode(new __XmlText(String(input.IgnorePublicAcls)))\n      .withName(\"IgnorePublicAcls\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BlockPublicPolicy !== undefined && input.BlockPublicPolicy !== null) {\n    const node = new __XmlNode(\"Setting\")\n      .addChildNode(new __XmlText(String(input.BlockPublicPolicy)))\n      .withName(\"BlockPublicPolicy\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RestrictPublicBuckets !== undefined && input.RestrictPublicBuckets !== null) {\n    const node = new __XmlNode(\"Setting\")\n      .addChildNode(new __XmlText(String(input.RestrictPublicBuckets)))\n      .withName(\"RestrictPublicBuckets\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlQueueConfiguration = (input: QueueConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"QueueConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"NotificationId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QueueArn !== undefined && input.QueueArn !== null) {\n    const node = new __XmlNode(\"QueueArn\").addChildNode(new __XmlText(input.QueueArn)).withName(\"Queue\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events !== undefined && input.Events !== null) {\n    const nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlQueueConfigurationList = (input: QueueConfiguration[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlQueueConfiguration(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlRedirect = (input: Redirect, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Redirect\");\n  if (input.HostName !== undefined && input.HostName !== null) {\n    const node = new __XmlNode(\"HostName\").addChildNode(new __XmlText(input.HostName)).withName(\"HostName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.HttpRedirectCode !== undefined && input.HttpRedirectCode !== null) {\n    const node = new __XmlNode(\"HttpRedirectCode\")\n      .addChildNode(new __XmlText(input.HttpRedirectCode))\n      .withName(\"HttpRedirectCode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Protocol !== undefined && input.Protocol !== null) {\n    const node = new __XmlNode(\"Protocol\").addChildNode(new __XmlText(input.Protocol)).withName(\"Protocol\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplaceKeyPrefixWith !== undefined && input.ReplaceKeyPrefixWith !== null) {\n    const node = new __XmlNode(\"ReplaceKeyPrefixWith\")\n      .addChildNode(new __XmlText(input.ReplaceKeyPrefixWith))\n      .withName(\"ReplaceKeyPrefixWith\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplaceKeyWith !== undefined && input.ReplaceKeyWith !== null) {\n    const node = new __XmlNode(\"ReplaceKeyWith\")\n      .addChildNode(new __XmlText(input.ReplaceKeyWith))\n      .withName(\"ReplaceKeyWith\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRedirectAllRequestsTo = (input: RedirectAllRequestsTo, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"RedirectAllRequestsTo\");\n  if (input.HostName !== undefined && input.HostName !== null) {\n    const node = new __XmlNode(\"HostName\").addChildNode(new __XmlText(input.HostName)).withName(\"HostName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Protocol !== undefined && input.Protocol !== null) {\n    const node = new __XmlNode(\"Protocol\").addChildNode(new __XmlText(input.Protocol)).withName(\"Protocol\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicaModifications = (input: ReplicaModifications, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ReplicaModifications\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ReplicaModificationsStatus\")\n      .addChildNode(new __XmlText(input.Status))\n      .withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationConfiguration = (\n  input: ReplicationConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ReplicationConfiguration\");\n  if (input.Role !== undefined && input.Role !== null) {\n    const node = new __XmlNode(\"Role\").addChildNode(new __XmlText(input.Role)).withName(\"Role\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Rules !== undefined && input.Rules !== null) {\n    const nodes = serializeAws_restXmlReplicationRules(input.Rules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationRule = (input: ReplicationRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ReplicationRule\");\n  if (input.ID !== undefined && input.ID !== null) {\n    const node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Priority !== undefined && input.Priority !== null) {\n    const node = new __XmlNode(\"Priority\").addChildNode(new __XmlText(String(input.Priority))).withName(\"Priority\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlReplicationRuleFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ReplicationRuleStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SourceSelectionCriteria !== undefined && input.SourceSelectionCriteria !== null) {\n    const node = serializeAws_restXmlSourceSelectionCriteria(input.SourceSelectionCriteria, context).withName(\n      \"SourceSelectionCriteria\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExistingObjectReplication !== undefined && input.ExistingObjectReplication !== null) {\n    const node = serializeAws_restXmlExistingObjectReplication(input.ExistingObjectReplication, context).withName(\n      \"ExistingObjectReplication\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.Destination !== undefined && input.Destination !== null) {\n    const node = serializeAws_restXmlDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.DeleteMarkerReplication !== undefined && input.DeleteMarkerReplication !== null) {\n    const node = serializeAws_restXmlDeleteMarkerReplication(input.DeleteMarkerReplication, context).withName(\n      \"DeleteMarkerReplication\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationRuleAndOperator = (\n  input: ReplicationRuleAndOperator,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ReplicationRuleAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationRuleFilter = (input: ReplicationRuleFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ReplicationRuleFilter\");\n  ReplicationRuleFilter.visit(input, {\n    Prefix: (value) => {\n      const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: (value) => {\n      const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: (value) => {\n      const node = serializeAws_restXmlReplicationRuleAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name: string, value: any) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    },\n  });\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationRules = (input: ReplicationRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlReplicationRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlReplicationTime = (input: ReplicationTime, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ReplicationTime\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ReplicationTimeStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Time !== undefined && input.Time !== null) {\n    const node = serializeAws_restXmlReplicationTimeValue(input.Time, context).withName(\"Time\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationTimeValue = (input: ReplicationTimeValue, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ReplicationTimeValue\");\n  if (input.Minutes !== undefined && input.Minutes !== null) {\n    const node = new __XmlNode(\"Minutes\").addChildNode(new __XmlText(String(input.Minutes))).withName(\"Minutes\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRequestPaymentConfiguration = (\n  input: RequestPaymentConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"RequestPaymentConfiguration\");\n  if (input.Payer !== undefined && input.Payer !== null) {\n    const node = new __XmlNode(\"Payer\").addChildNode(new __XmlText(input.Payer)).withName(\"Payer\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRequestProgress = (input: RequestProgress, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"RequestProgress\");\n  if (input.Enabled !== undefined && input.Enabled !== null) {\n    const node = new __XmlNode(\"EnableRequestProgress\")\n      .addChildNode(new __XmlText(String(input.Enabled)))\n      .withName(\"Enabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRestoreRequest = (input: RestoreRequest, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"RestoreRequest\");\n  if (input.Days !== undefined && input.Days !== null) {\n    const node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.GlacierJobParameters !== undefined && input.GlacierJobParameters !== null) {\n    const node = serializeAws_restXmlGlacierJobParameters(input.GlacierJobParameters, context).withName(\n      \"GlacierJobParameters\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.Type !== undefined && input.Type !== null) {\n    const node = new __XmlNode(\"RestoreRequestType\").addChildNode(new __XmlText(input.Type)).withName(\"Type\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tier !== undefined && input.Tier !== null) {\n    const node = new __XmlNode(\"Tier\").addChildNode(new __XmlText(input.Tier)).withName(\"Tier\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Description !== undefined && input.Description !== null) {\n    const node = new __XmlNode(\"Description\").addChildNode(new __XmlText(input.Description)).withName(\"Description\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SelectParameters !== undefined && input.SelectParameters !== null) {\n    const node = serializeAws_restXmlSelectParameters(input.SelectParameters, context).withName(\"SelectParameters\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputLocation !== undefined && input.OutputLocation !== null) {\n    const node = serializeAws_restXmlOutputLocation(input.OutputLocation, context).withName(\"OutputLocation\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRoutingRule = (input: RoutingRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"RoutingRule\");\n  if (input.Condition !== undefined && input.Condition !== null) {\n    const node = serializeAws_restXmlCondition(input.Condition, context).withName(\"Condition\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Redirect !== undefined && input.Redirect !== null) {\n    const node = serializeAws_restXmlRedirect(input.Redirect, context).withName(\"Redirect\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRoutingRules = (input: RoutingRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlRoutingRule(entry, context);\n      return node.withName(\"RoutingRule\");\n    });\n};\n\nconst serializeAws_restXmlS3KeyFilter = (input: S3KeyFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"S3KeyFilter\");\n  if (input.FilterRules !== undefined && input.FilterRules !== null) {\n    const nodes = serializeAws_restXmlFilterRuleList(input.FilterRules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"FilterRule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlS3Location = (input: S3Location, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"S3Location\");\n  if (input.BucketName !== undefined && input.BucketName !== null) {\n    const node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.BucketName)).withName(\"BucketName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"LocationPrefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Encryption !== undefined && input.Encryption !== null) {\n    const node = serializeAws_restXmlEncryption(input.Encryption, context).withName(\"Encryption\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.CannedACL !== undefined && input.CannedACL !== null) {\n    const node = new __XmlNode(\"ObjectCannedACL\").addChildNode(new __XmlText(input.CannedACL)).withName(\"CannedACL\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessControlList !== undefined && input.AccessControlList !== null) {\n    const nodes = serializeAws_restXmlGrants(input.AccessControlList, context);\n    const containerNode = new __XmlNode(\"AccessControlList\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.Tagging !== undefined && input.Tagging !== null) {\n    const node = serializeAws_restXmlTagging(input.Tagging, context).withName(\"Tagging\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.UserMetadata !== undefined && input.UserMetadata !== null) {\n    const nodes = serializeAws_restXmlUserMetadata(input.UserMetadata, context);\n    const containerNode = new __XmlNode(\"UserMetadata\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    const node = new __XmlNode(\"StorageClass\").addChildNode(new __XmlText(input.StorageClass)).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlScanRange = (input: ScanRange, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ScanRange\");\n  if (input.Start !== undefined && input.Start !== null) {\n    const node = new __XmlNode(\"Start\").addChildNode(new __XmlText(String(input.Start))).withName(\"Start\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.End !== undefined && input.End !== null) {\n    const node = new __XmlNode(\"End\").addChildNode(new __XmlText(String(input.End))).withName(\"End\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlSelectParameters = (input: SelectParameters, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"SelectParameters\");\n  if (input.InputSerialization !== undefined && input.InputSerialization !== null) {\n    const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\n      \"InputSerialization\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpressionType !== undefined && input.ExpressionType !== null) {\n    const node = new __XmlNode(\"ExpressionType\")\n      .addChildNode(new __XmlText(input.ExpressionType))\n      .withName(\"ExpressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Expression !== undefined && input.Expression !== null) {\n    const node = new __XmlNode(\"Expression\").addChildNode(new __XmlText(input.Expression)).withName(\"Expression\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputSerialization !== undefined && input.OutputSerialization !== null) {\n    const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\n      \"OutputSerialization\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlServerSideEncryptionByDefault = (\n  input: ServerSideEncryptionByDefault,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ServerSideEncryptionByDefault\");\n  if (input.SSEAlgorithm !== undefined && input.SSEAlgorithm !== null) {\n    const node = new __XmlNode(\"ServerSideEncryption\")\n      .addChildNode(new __XmlText(input.SSEAlgorithm))\n      .withName(\"SSEAlgorithm\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSMasterKeyID !== undefined && input.KMSMasterKeyID !== null) {\n    const node = new __XmlNode(\"SSEKMSKeyId\")\n      .addChildNode(new __XmlText(input.KMSMasterKeyID))\n      .withName(\"KMSMasterKeyID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlServerSideEncryptionConfiguration = (\n  input: ServerSideEncryptionConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ServerSideEncryptionConfiguration\");\n  if (input.Rules !== undefined && input.Rules !== null) {\n    const nodes = serializeAws_restXmlServerSideEncryptionRules(input.Rules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlServerSideEncryptionRule = (\n  input: ServerSideEncryptionRule,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ServerSideEncryptionRule\");\n  if (input.ApplyServerSideEncryptionByDefault !== undefined && input.ApplyServerSideEncryptionByDefault !== null) {\n    const node = serializeAws_restXmlServerSideEncryptionByDefault(\n      input.ApplyServerSideEncryptionByDefault,\n      context\n    ).withName(\"ApplyServerSideEncryptionByDefault\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BucketKeyEnabled !== undefined && input.BucketKeyEnabled !== null) {\n    const node = new __XmlNode(\"BucketKeyEnabled\")\n      .addChildNode(new __XmlText(String(input.BucketKeyEnabled)))\n      .withName(\"BucketKeyEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlServerSideEncryptionRules = (\n  input: ServerSideEncryptionRule[],\n  context: __SerdeContext\n): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlServerSideEncryptionRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlSourceSelectionCriteria = (input: SourceSelectionCriteria, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"SourceSelectionCriteria\");\n  if (input.SseKmsEncryptedObjects !== undefined && input.SseKmsEncryptedObjects !== null) {\n    const node = serializeAws_restXmlSseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName(\n      \"SseKmsEncryptedObjects\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplicaModifications !== undefined && input.ReplicaModifications !== null) {\n    const node = serializeAws_restXmlReplicaModifications(input.ReplicaModifications, context).withName(\n      \"ReplicaModifications\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlSSEKMS = (input: SSEKMS, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"SSE-KMS\");\n  if (input.KeyId !== undefined && input.KeyId !== null) {\n    const node = new __XmlNode(\"SSEKMSKeyId\").addChildNode(new __XmlText(input.KeyId)).withName(\"KeyId\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlSseKmsEncryptedObjects = (input: SseKmsEncryptedObjects, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"SseKmsEncryptedObjects\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"SseKmsEncryptedObjectsStatus\")\n      .addChildNode(new __XmlText(input.Status))\n      .withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlSSES3 = (input: SSES3, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"SSE-S3\");\n  return bodyNode;\n};\n\nconst serializeAws_restXmlStorageClassAnalysis = (input: StorageClassAnalysis, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"StorageClassAnalysis\");\n  if (input.DataExport !== undefined && input.DataExport !== null) {\n    const node = serializeAws_restXmlStorageClassAnalysisDataExport(input.DataExport, context).withName(\"DataExport\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlStorageClassAnalysisDataExport = (\n  input: StorageClassAnalysisDataExport,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"StorageClassAnalysisDataExport\");\n  if (input.OutputSchemaVersion !== undefined && input.OutputSchemaVersion !== null) {\n    const node = new __XmlNode(\"StorageClassAnalysisSchemaVersion\")\n      .addChildNode(new __XmlText(input.OutputSchemaVersion))\n      .withName(\"OutputSchemaVersion\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Destination !== undefined && input.Destination !== null) {\n    const node = serializeAws_restXmlAnalyticsExportDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTag = (input: Tag, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Tag\");\n  if (input.Key !== undefined && input.Key !== null) {\n    const node = new __XmlNode(\"ObjectKey\").addChildNode(new __XmlText(input.Key)).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value !== undefined && input.Value !== null) {\n    const node = new __XmlNode(\"Value\").addChildNode(new __XmlText(input.Value)).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTagging = (input: Tagging, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Tagging\");\n  if (input.TagSet !== undefined && input.TagSet !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.TagSet, context);\n    const containerNode = new __XmlNode(\"TagSet\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTagSet = (input: Tag[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlTag(entry, context);\n      return node.withName(\"Tag\");\n    });\n};\n\nconst serializeAws_restXmlTargetGrant = (input: TargetGrant, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"TargetGrant\");\n  if (input.Grantee !== undefined && input.Grantee !== null) {\n    const node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Permission !== undefined && input.Permission !== null) {\n    const node = new __XmlNode(\"BucketLogsPermission\")\n      .addChildNode(new __XmlText(input.Permission))\n      .withName(\"Permission\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTargetGrants = (input: TargetGrant[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlTargetGrant(entry, context);\n      return node.withName(\"Grant\");\n    });\n};\n\nconst serializeAws_restXmlTiering = (input: Tiering, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Tiering\");\n  if (input.Days !== undefined && input.Days !== null) {\n    const node = new __XmlNode(\"IntelligentTieringDays\")\n      .addChildNode(new __XmlText(String(input.Days)))\n      .withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessTier !== undefined && input.AccessTier !== null) {\n    const node = new __XmlNode(\"IntelligentTieringAccessTier\")\n      .addChildNode(new __XmlText(input.AccessTier))\n      .withName(\"AccessTier\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTieringList = (input: Tiering[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlTiering(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlTopicConfiguration = (input: TopicConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"TopicConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"NotificationId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.TopicArn !== undefined && input.TopicArn !== null) {\n    const node = new __XmlNode(\"TopicArn\").addChildNode(new __XmlText(input.TopicArn)).withName(\"Topic\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events !== undefined && input.Events !== null) {\n    const nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTopicConfigurationList = (input: TopicConfiguration[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlTopicConfiguration(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlTransition = (input: Transition, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Transition\");\n  if (input.Date !== undefined && input.Date !== null) {\n    const node = new __XmlNode(\"Date\")\n      .addChildNode(new __XmlText(input.Date.toISOString().split(\".\")[0] + \"Z\"))\n      .withName(\"Date\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days !== undefined && input.Days !== null) {\n    const node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    const node = new __XmlNode(\"TransitionStorageClass\")\n      .addChildNode(new __XmlText(input.StorageClass))\n      .withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTransitionList = (input: Transition[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlTransition(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlUserMetadata = (input: MetadataEntry[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlMetadataEntry(entry, context);\n      return node.withName(\"MetadataEntry\");\n    });\n};\n\nconst serializeAws_restXmlVersioningConfiguration = (input: VersioningConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"VersioningConfiguration\");\n  if (input.MFADelete !== undefined && input.MFADelete !== null) {\n    const node = new __XmlNode(\"MFADelete\").addChildNode(new __XmlText(input.MFADelete)).withName(\"MfaDelete\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"BucketVersioningStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlWebsiteConfiguration = (input: WebsiteConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"WebsiteConfiguration\");\n  if (input.ErrorDocument !== undefined && input.ErrorDocument !== null) {\n    const node = serializeAws_restXmlErrorDocument(input.ErrorDocument, context).withName(\"ErrorDocument\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IndexDocument !== undefined && input.IndexDocument !== null) {\n    const node = serializeAws_restXmlIndexDocument(input.IndexDocument, context).withName(\"IndexDocument\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RedirectAllRequestsTo !== undefined && input.RedirectAllRequestsTo !== null) {\n    const node = serializeAws_restXmlRedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName(\n      \"RedirectAllRequestsTo\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.RoutingRules !== undefined && input.RoutingRules !== null) {\n    const nodes = serializeAws_restXmlRoutingRules(input.RoutingRules, context);\n    const containerNode = new __XmlNode(\"RoutingRules\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  return bodyNode;\n};\n\nconst deserializeAws_restXmlAbortIncompleteMultipartUpload = (\n  output: any,\n  context: __SerdeContext\n): AbortIncompleteMultipartUpload => {\n  let contents: any = {\n    DaysAfterInitiation: undefined,\n  };\n  if (output[\"DaysAfterInitiation\"] !== undefined) {\n    contents.DaysAfterInitiation = parseInt(output[\"DaysAfterInitiation\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlAccessControlTranslation = (\n  output: any,\n  context: __SerdeContext\n): AccessControlTranslation => {\n  let contents: any = {\n    Owner: undefined,\n  };\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = output[\"Owner\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlAllowedHeaders = (output: any, context: __SerdeContext): string[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlAllowedMethods = (output: any, context: __SerdeContext): string[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlAllowedOrigins = (output: any, context: __SerdeContext): string[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlAnalyticsAndOperator = (output: any, context: __SerdeContext): AnalyticsAndOperator => {\n  let contents: any = {\n    Prefix: undefined,\n    Tags: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlAnalyticsConfiguration = (output: any, context: __SerdeContext): AnalyticsConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    Filter: undefined,\n    StorageClassAnalysis: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlAnalyticsFilter(output[\"Filter\"], context);\n  }\n  if (output[\"StorageClassAnalysis\"] !== undefined) {\n    contents.StorageClassAnalysis = deserializeAws_restXmlStorageClassAnalysis(output[\"StorageClassAnalysis\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlAnalyticsConfigurationList = (\n  output: any,\n  context: __SerdeContext\n): AnalyticsConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlAnalyticsConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlAnalyticsExportDestination = (\n  output: any,\n  context: __SerdeContext\n): AnalyticsExportDestination => {\n  let contents: any = {\n    S3BucketDestination: undefined,\n  };\n  if (output[\"S3BucketDestination\"] !== undefined) {\n    contents.S3BucketDestination = deserializeAws_restXmlAnalyticsS3BucketDestination(\n      output[\"S3BucketDestination\"],\n      context\n    );\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlAnalyticsFilter = (output: any, context: __SerdeContext): AnalyticsFilter => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"],\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlAnalyticsAndOperator(output[\"And\"], context),\n    };\n  }\n  return { $unknown: Object.entries(output)[0] };\n};\n\nconst deserializeAws_restXmlAnalyticsS3BucketDestination = (\n  output: any,\n  context: __SerdeContext\n): AnalyticsS3BucketDestination => {\n  let contents: any = {\n    Format: undefined,\n    BucketAccountId: undefined,\n    Bucket: undefined,\n    Prefix: undefined,\n  };\n  if (output[\"Format\"] !== undefined) {\n    contents.Format = output[\"Format\"];\n  }\n  if (output[\"BucketAccountId\"] !== undefined) {\n    contents.BucketAccountId = output[\"BucketAccountId\"];\n  }\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = output[\"Bucket\"];\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlBucket = (output: any, context: __SerdeContext): Bucket => {\n  let contents: any = {\n    Name: undefined,\n    CreationDate: undefined,\n  };\n  if (output[\"Name\"] !== undefined) {\n    contents.Name = output[\"Name\"];\n  }\n  if (output[\"CreationDate\"] !== undefined) {\n    contents.CreationDate = new Date(output[\"CreationDate\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlBuckets = (output: any, context: __SerdeContext): Bucket[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlBucket(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlCommonPrefix = (output: any, context: __SerdeContext): CommonPrefix => {\n  let contents: any = {\n    Prefix: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlCommonPrefixList = (output: any, context: __SerdeContext): CommonPrefix[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlCommonPrefix(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlCondition = (output: any, context: __SerdeContext): Condition => {\n  let contents: any = {\n    HttpErrorCodeReturnedEquals: undefined,\n    KeyPrefixEquals: undefined,\n  };\n  if (output[\"HttpErrorCodeReturnedEquals\"] !== undefined) {\n    contents.HttpErrorCodeReturnedEquals = output[\"HttpErrorCodeReturnedEquals\"];\n  }\n  if (output[\"KeyPrefixEquals\"] !== undefined) {\n    contents.KeyPrefixEquals = output[\"KeyPrefixEquals\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlCopyObjectResult = (output: any, context: __SerdeContext): CopyObjectResult => {\n  let contents: any = {\n    ETag: undefined,\n    LastModified: undefined,\n  };\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlCopyPartResult = (output: any, context: __SerdeContext): CopyPartResult => {\n  let contents: any = {\n    ETag: undefined,\n    LastModified: undefined,\n  };\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlCORSRule = (output: any, context: __SerdeContext): CORSRule => {\n  let contents: any = {\n    AllowedHeaders: undefined,\n    AllowedMethods: undefined,\n    AllowedOrigins: undefined,\n    ExposeHeaders: undefined,\n    MaxAgeSeconds: undefined,\n  };\n  if (output.AllowedHeader === \"\") {\n    contents.AllowedHeaders = [];\n  }\n  if (output[\"AllowedHeader\"] !== undefined) {\n    contents.AllowedHeaders = deserializeAws_restXmlAllowedHeaders(\n      __getArrayIfSingleItem(output[\"AllowedHeader\"]),\n      context\n    );\n  }\n  if (output.AllowedMethod === \"\") {\n    contents.AllowedMethods = [];\n  }\n  if (output[\"AllowedMethod\"] !== undefined) {\n    contents.AllowedMethods = deserializeAws_restXmlAllowedMethods(\n      __getArrayIfSingleItem(output[\"AllowedMethod\"]),\n      context\n    );\n  }\n  if (output.AllowedOrigin === \"\") {\n    contents.AllowedOrigins = [];\n  }\n  if (output[\"AllowedOrigin\"] !== undefined) {\n    contents.AllowedOrigins = deserializeAws_restXmlAllowedOrigins(\n      __getArrayIfSingleItem(output[\"AllowedOrigin\"]),\n      context\n    );\n  }\n  if (output.ExposeHeader === \"\") {\n    contents.ExposeHeaders = [];\n  }\n  if (output[\"ExposeHeader\"] !== undefined) {\n    contents.ExposeHeaders = deserializeAws_restXmlExposeHeaders(\n      __getArrayIfSingleItem(output[\"ExposeHeader\"]),\n      context\n    );\n  }\n  if (output[\"MaxAgeSeconds\"] !== undefined) {\n    contents.MaxAgeSeconds = parseInt(output[\"MaxAgeSeconds\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlCORSRules = (output: any, context: __SerdeContext): CORSRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlCORSRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlDefaultRetention = (output: any, context: __SerdeContext): DefaultRetention => {\n  let contents: any = {\n    Mode: undefined,\n    Days: undefined,\n    Years: undefined,\n  };\n  if (output[\"Mode\"] !== undefined) {\n    contents.Mode = output[\"Mode\"];\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n  if (output[\"Years\"] !== undefined) {\n    contents.Years = parseInt(output[\"Years\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlDeletedObject = (output: any, context: __SerdeContext): DeletedObject => {\n  let contents: any = {\n    Key: undefined,\n    VersionId: undefined,\n    DeleteMarker: undefined,\n    DeleteMarkerVersionId: undefined,\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n  if (output[\"DeleteMarker\"] !== undefined) {\n    contents.DeleteMarker = output[\"DeleteMarker\"] == \"true\";\n  }\n  if (output[\"DeleteMarkerVersionId\"] !== undefined) {\n    contents.DeleteMarkerVersionId = output[\"DeleteMarkerVersionId\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlDeletedObjects = (output: any, context: __SerdeContext): DeletedObject[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlDeletedObject(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlDeleteMarkerEntry = (output: any, context: __SerdeContext): DeleteMarkerEntry => {\n  let contents: any = {\n    Owner: undefined,\n    Key: undefined,\n    VersionId: undefined,\n    IsLatest: undefined,\n    LastModified: undefined,\n  };\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n  if (output[\"IsLatest\"] !== undefined) {\n    contents.IsLatest = output[\"IsLatest\"] == \"true\";\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlDeleteMarkerReplication = (\n  output: any,\n  context: __SerdeContext\n): DeleteMarkerReplication => {\n  let contents: any = {\n    Status: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlDeleteMarkers = (output: any, context: __SerdeContext): DeleteMarkerEntry[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlDeleteMarkerEntry(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlDestination = (output: any, context: __SerdeContext): Destination => {\n  let contents: any = {\n    Bucket: undefined,\n    Account: undefined,\n    StorageClass: undefined,\n    AccessControlTranslation: undefined,\n    EncryptionConfiguration: undefined,\n    ReplicationTime: undefined,\n    Metrics: undefined,\n  };\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = output[\"Bucket\"];\n  }\n  if (output[\"Account\"] !== undefined) {\n    contents.Account = output[\"Account\"];\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  if (output[\"AccessControlTranslation\"] !== undefined) {\n    contents.AccessControlTranslation = deserializeAws_restXmlAccessControlTranslation(\n      output[\"AccessControlTranslation\"],\n      context\n    );\n  }\n  if (output[\"EncryptionConfiguration\"] !== undefined) {\n    contents.EncryptionConfiguration = deserializeAws_restXmlEncryptionConfiguration(\n      output[\"EncryptionConfiguration\"],\n      context\n    );\n  }\n  if (output[\"ReplicationTime\"] !== undefined) {\n    contents.ReplicationTime = deserializeAws_restXmlReplicationTime(output[\"ReplicationTime\"], context);\n  }\n  if (output[\"Metrics\"] !== undefined) {\n    contents.Metrics = deserializeAws_restXmlMetrics(output[\"Metrics\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlEncryptionConfiguration = (\n  output: any,\n  context: __SerdeContext\n): EncryptionConfiguration => {\n  let contents: any = {\n    ReplicaKmsKeyID: undefined,\n  };\n  if (output[\"ReplicaKmsKeyID\"] !== undefined) {\n    contents.ReplicaKmsKeyID = output[\"ReplicaKmsKeyID\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXml_Error = (output: any, context: __SerdeContext): _Error => {\n  let contents: any = {\n    Key: undefined,\n    VersionId: undefined,\n    Code: undefined,\n    Message: undefined,\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n  if (output[\"Code\"] !== undefined) {\n    contents.Code = output[\"Code\"];\n  }\n  if (output[\"Message\"] !== undefined) {\n    contents.Message = output[\"Message\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlErrorDocument = (output: any, context: __SerdeContext): ErrorDocument => {\n  let contents: any = {\n    Key: undefined,\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlErrors = (output: any, context: __SerdeContext): _Error[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXml_Error(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlEventList = (output: any, context: __SerdeContext): (Event | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlExistingObjectReplication = (\n  output: any,\n  context: __SerdeContext\n): ExistingObjectReplication => {\n  let contents: any = {\n    Status: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlExposeHeaders = (output: any, context: __SerdeContext): string[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlFilterRule = (output: any, context: __SerdeContext): FilterRule => {\n  let contents: any = {\n    Name: undefined,\n    Value: undefined,\n  };\n  if (output[\"Name\"] !== undefined) {\n    contents.Name = output[\"Name\"];\n  }\n  if (output[\"Value\"] !== undefined) {\n    contents.Value = output[\"Value\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlFilterRuleList = (output: any, context: __SerdeContext): FilterRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlFilterRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlGrant = (output: any, context: __SerdeContext): Grant => {\n  let contents: any = {\n    Grantee: undefined,\n    Permission: undefined,\n  };\n  if (output[\"Grantee\"] !== undefined) {\n    contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n  }\n  if (output[\"Permission\"] !== undefined) {\n    contents.Permission = output[\"Permission\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlGrantee = (output: any, context: __SerdeContext): Grantee => {\n  let contents: any = {\n    DisplayName: undefined,\n    EmailAddress: undefined,\n    ID: undefined,\n    URI: undefined,\n    Type: undefined,\n  };\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = output[\"DisplayName\"];\n  }\n  if (output[\"EmailAddress\"] !== undefined) {\n    contents.EmailAddress = output[\"EmailAddress\"];\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  if (output[\"URI\"] !== undefined) {\n    contents.URI = output[\"URI\"];\n  }\n  if (output[\"xsi:type\"] !== undefined) {\n    contents.Type = output[\"xsi:type\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlGrants = (output: any, context: __SerdeContext): Grant[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlGrant(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlIndexDocument = (output: any, context: __SerdeContext): IndexDocument => {\n  let contents: any = {\n    Suffix: undefined,\n  };\n  if (output[\"Suffix\"] !== undefined) {\n    contents.Suffix = output[\"Suffix\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInitiator = (output: any, context: __SerdeContext): Initiator => {\n  let contents: any = {\n    ID: undefined,\n    DisplayName: undefined,\n  };\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = output[\"DisplayName\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlIntelligentTieringAndOperator = (\n  output: any,\n  context: __SerdeContext\n): IntelligentTieringAndOperator => {\n  let contents: any = {\n    Prefix: undefined,\n    Tags: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlIntelligentTieringConfiguration = (\n  output: any,\n  context: __SerdeContext\n): IntelligentTieringConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    Filter: undefined,\n    Status: undefined,\n    Tierings: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlIntelligentTieringFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output.Tiering === \"\") {\n    contents.Tierings = [];\n  }\n  if (output[\"Tiering\"] !== undefined) {\n    contents.Tierings = deserializeAws_restXmlTieringList(__getArrayIfSingleItem(output[\"Tiering\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlIntelligentTieringConfigurationList = (\n  output: any,\n  context: __SerdeContext\n): IntelligentTieringConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlIntelligentTieringConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlIntelligentTieringFilter = (\n  output: any,\n  context: __SerdeContext\n): IntelligentTieringFilter => {\n  let contents: any = {\n    Prefix: undefined,\n    Tag: undefined,\n    And: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tag = deserializeAws_restXmlTag(output[\"Tag\"], context);\n  }\n  if (output[\"And\"] !== undefined) {\n    contents.And = deserializeAws_restXmlIntelligentTieringAndOperator(output[\"And\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventoryConfiguration = (output: any, context: __SerdeContext): InventoryConfiguration => {\n  let contents: any = {\n    Destination: undefined,\n    IsEnabled: undefined,\n    Filter: undefined,\n    Id: undefined,\n    IncludedObjectVersions: undefined,\n    OptionalFields: undefined,\n    Schedule: undefined,\n  };\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlInventoryDestination(output[\"Destination\"], context);\n  }\n  if (output[\"IsEnabled\"] !== undefined) {\n    contents.IsEnabled = output[\"IsEnabled\"] == \"true\";\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlInventoryFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"IncludedObjectVersions\"] !== undefined) {\n    contents.IncludedObjectVersions = output[\"IncludedObjectVersions\"];\n  }\n  if (output.OptionalFields === \"\") {\n    contents.OptionalFields = [];\n  }\n  if (output[\"OptionalFields\"] !== undefined && output[\"OptionalFields\"][\"Field\"] !== undefined) {\n    contents.OptionalFields = deserializeAws_restXmlInventoryOptionalFields(\n      __getArrayIfSingleItem(output[\"OptionalFields\"][\"Field\"]),\n      context\n    );\n  }\n  if (output[\"Schedule\"] !== undefined) {\n    contents.Schedule = deserializeAws_restXmlInventorySchedule(output[\"Schedule\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventoryConfigurationList = (\n  output: any,\n  context: __SerdeContext\n): InventoryConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlInventoryConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlInventoryDestination = (output: any, context: __SerdeContext): InventoryDestination => {\n  let contents: any = {\n    S3BucketDestination: undefined,\n  };\n  if (output[\"S3BucketDestination\"] !== undefined) {\n    contents.S3BucketDestination = deserializeAws_restXmlInventoryS3BucketDestination(\n      output[\"S3BucketDestination\"],\n      context\n    );\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventoryEncryption = (output: any, context: __SerdeContext): InventoryEncryption => {\n  let contents: any = {\n    SSES3: undefined,\n    SSEKMS: undefined,\n  };\n  if (output[\"SSE-S3\"] !== undefined) {\n    contents.SSES3 = deserializeAws_restXmlSSES3(output[\"SSE-S3\"], context);\n  }\n  if (output[\"SSE-KMS\"] !== undefined) {\n    contents.SSEKMS = deserializeAws_restXmlSSEKMS(output[\"SSE-KMS\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventoryFilter = (output: any, context: __SerdeContext): InventoryFilter => {\n  let contents: any = {\n    Prefix: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventoryOptionalFields = (\n  output: any,\n  context: __SerdeContext\n): (InventoryOptionalField | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlInventoryS3BucketDestination = (\n  output: any,\n  context: __SerdeContext\n): InventoryS3BucketDestination => {\n  let contents: any = {\n    AccountId: undefined,\n    Bucket: undefined,\n    Format: undefined,\n    Prefix: undefined,\n    Encryption: undefined,\n  };\n  if (output[\"AccountId\"] !== undefined) {\n    contents.AccountId = output[\"AccountId\"];\n  }\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = output[\"Bucket\"];\n  }\n  if (output[\"Format\"] !== undefined) {\n    contents.Format = output[\"Format\"];\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output[\"Encryption\"] !== undefined) {\n    contents.Encryption = deserializeAws_restXmlInventoryEncryption(output[\"Encryption\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventorySchedule = (output: any, context: __SerdeContext): InventorySchedule => {\n  let contents: any = {\n    Frequency: undefined,\n  };\n  if (output[\"Frequency\"] !== undefined) {\n    contents.Frequency = output[\"Frequency\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlLambdaFunctionConfiguration = (\n  output: any,\n  context: __SerdeContext\n): LambdaFunctionConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    LambdaFunctionArn: undefined,\n    Events: undefined,\n    Filter: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"CloudFunction\"] !== undefined) {\n    contents.LambdaFunctionArn = output[\"CloudFunction\"];\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  }\n  if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlLambdaFunctionConfigurationList = (\n  output: any,\n  context: __SerdeContext\n): LambdaFunctionConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlLifecycleExpiration = (output: any, context: __SerdeContext): LifecycleExpiration => {\n  let contents: any = {\n    Date: undefined,\n    Days: undefined,\n    ExpiredObjectDeleteMarker: undefined,\n  };\n  if (output[\"Date\"] !== undefined) {\n    contents.Date = new Date(output[\"Date\"]);\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n  if (output[\"ExpiredObjectDeleteMarker\"] !== undefined) {\n    contents.ExpiredObjectDeleteMarker = output[\"ExpiredObjectDeleteMarker\"] == \"true\";\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlLifecycleRule = (output: any, context: __SerdeContext): LifecycleRule => {\n  let contents: any = {\n    Expiration: undefined,\n    ID: undefined,\n    Prefix: undefined,\n    Filter: undefined,\n    Status: undefined,\n    Transitions: undefined,\n    NoncurrentVersionTransitions: undefined,\n    NoncurrentVersionExpiration: undefined,\n    AbortIncompleteMultipartUpload: undefined,\n  };\n  if (output[\"Expiration\"] !== undefined) {\n    contents.Expiration = deserializeAws_restXmlLifecycleExpiration(output[\"Expiration\"], context);\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlLifecycleRuleFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output.Transition === \"\") {\n    contents.Transitions = [];\n  }\n  if (output[\"Transition\"] !== undefined) {\n    contents.Transitions = deserializeAws_restXmlTransitionList(__getArrayIfSingleItem(output[\"Transition\"]), context);\n  }\n  if (output.NoncurrentVersionTransition === \"\") {\n    contents.NoncurrentVersionTransitions = [];\n  }\n  if (output[\"NoncurrentVersionTransition\"] !== undefined) {\n    contents.NoncurrentVersionTransitions = deserializeAws_restXmlNoncurrentVersionTransitionList(\n      __getArrayIfSingleItem(output[\"NoncurrentVersionTransition\"]),\n      context\n    );\n  }\n  if (output[\"NoncurrentVersionExpiration\"] !== undefined) {\n    contents.NoncurrentVersionExpiration = deserializeAws_restXmlNoncurrentVersionExpiration(\n      output[\"NoncurrentVersionExpiration\"],\n      context\n    );\n  }\n  if (output[\"AbortIncompleteMultipartUpload\"] !== undefined) {\n    contents.AbortIncompleteMultipartUpload = deserializeAws_restXmlAbortIncompleteMultipartUpload(\n      output[\"AbortIncompleteMultipartUpload\"],\n      context\n    );\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlLifecycleRuleAndOperator = (\n  output: any,\n  context: __SerdeContext\n): LifecycleRuleAndOperator => {\n  let contents: any = {\n    Prefix: undefined,\n    Tags: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlLifecycleRuleFilter = (output: any, context: __SerdeContext): LifecycleRuleFilter => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"],\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlLifecycleRuleAndOperator(output[\"And\"], context),\n    };\n  }\n  return { $unknown: Object.entries(output)[0] };\n};\n\nconst deserializeAws_restXmlLifecycleRules = (output: any, context: __SerdeContext): LifecycleRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlLifecycleRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlLoggingEnabled = (output: any, context: __SerdeContext): LoggingEnabled => {\n  let contents: any = {\n    TargetBucket: undefined,\n    TargetGrants: undefined,\n    TargetPrefix: undefined,\n  };\n  if (output[\"TargetBucket\"] !== undefined) {\n    contents.TargetBucket = output[\"TargetBucket\"];\n  }\n  if (output.TargetGrants === \"\") {\n    contents.TargetGrants = [];\n  }\n  if (output[\"TargetGrants\"] !== undefined && output[\"TargetGrants\"][\"Grant\"] !== undefined) {\n    contents.TargetGrants = deserializeAws_restXmlTargetGrants(\n      __getArrayIfSingleItem(output[\"TargetGrants\"][\"Grant\"]),\n      context\n    );\n  }\n  if (output[\"TargetPrefix\"] !== undefined) {\n    contents.TargetPrefix = output[\"TargetPrefix\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlMetrics = (output: any, context: __SerdeContext): Metrics => {\n  let contents: any = {\n    Status: undefined,\n    EventThreshold: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output[\"EventThreshold\"] !== undefined) {\n    contents.EventThreshold = deserializeAws_restXmlReplicationTimeValue(output[\"EventThreshold\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlMetricsAndOperator = (output: any, context: __SerdeContext): MetricsAndOperator => {\n  let contents: any = {\n    Prefix: undefined,\n    Tags: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlMetricsConfiguration = (output: any, context: __SerdeContext): MetricsConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    Filter: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlMetricsFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlMetricsConfigurationList = (\n  output: any,\n  context: __SerdeContext\n): MetricsConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlMetricsConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlMetricsFilter = (output: any, context: __SerdeContext): MetricsFilter => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"],\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlMetricsAndOperator(output[\"And\"], context),\n    };\n  }\n  return { $unknown: Object.entries(output)[0] };\n};\n\nconst deserializeAws_restXmlMultipartUpload = (output: any, context: __SerdeContext): MultipartUpload => {\n  let contents: any = {\n    UploadId: undefined,\n    Key: undefined,\n    Initiated: undefined,\n    StorageClass: undefined,\n    Owner: undefined,\n    Initiator: undefined,\n  };\n  if (output[\"UploadId\"] !== undefined) {\n    contents.UploadId = output[\"UploadId\"];\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"Initiated\"] !== undefined) {\n    contents.Initiated = new Date(output[\"Initiated\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  if (output[\"Initiator\"] !== undefined) {\n    contents.Initiator = deserializeAws_restXmlInitiator(output[\"Initiator\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlMultipartUploadList = (output: any, context: __SerdeContext): MultipartUpload[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlMultipartUpload(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlNoncurrentVersionExpiration = (\n  output: any,\n  context: __SerdeContext\n): NoncurrentVersionExpiration => {\n  let contents: any = {\n    NoncurrentDays: undefined,\n  };\n  if (output[\"NoncurrentDays\"] !== undefined) {\n    contents.NoncurrentDays = parseInt(output[\"NoncurrentDays\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlNoncurrentVersionTransition = (\n  output: any,\n  context: __SerdeContext\n): NoncurrentVersionTransition => {\n  let contents: any = {\n    NoncurrentDays: undefined,\n    StorageClass: undefined,\n  };\n  if (output[\"NoncurrentDays\"] !== undefined) {\n    contents.NoncurrentDays = parseInt(output[\"NoncurrentDays\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlNoncurrentVersionTransitionList = (\n  output: any,\n  context: __SerdeContext\n): NoncurrentVersionTransition[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlNoncurrentVersionTransition(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlNotificationConfigurationFilter = (\n  output: any,\n  context: __SerdeContext\n): NotificationConfigurationFilter => {\n  let contents: any = {\n    Key: undefined,\n  };\n  if (output[\"S3Key\"] !== undefined) {\n    contents.Key = deserializeAws_restXmlS3KeyFilter(output[\"S3Key\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXml_Object = (output: any, context: __SerdeContext): _Object => {\n  let contents: any = {\n    Key: undefined,\n    LastModified: undefined,\n    ETag: undefined,\n    Size: undefined,\n    StorageClass: undefined,\n    Owner: undefined,\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = parseInt(output[\"Size\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectList = (output: any, context: __SerdeContext): _Object[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXml_Object(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlObjectLockConfiguration = (\n  output: any,\n  context: __SerdeContext\n): ObjectLockConfiguration => {\n  let contents: any = {\n    ObjectLockEnabled: undefined,\n    Rule: undefined,\n  };\n  if (output[\"ObjectLockEnabled\"] !== undefined) {\n    contents.ObjectLockEnabled = output[\"ObjectLockEnabled\"];\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rule = deserializeAws_restXmlObjectLockRule(output[\"Rule\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectLockLegalHold = (output: any, context: __SerdeContext): ObjectLockLegalHold => {\n  let contents: any = {\n    Status: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectLockRetention = (output: any, context: __SerdeContext): ObjectLockRetention => {\n  let contents: any = {\n    Mode: undefined,\n    RetainUntilDate: undefined,\n  };\n  if (output[\"Mode\"] !== undefined) {\n    contents.Mode = output[\"Mode\"];\n  }\n  if (output[\"RetainUntilDate\"] !== undefined) {\n    contents.RetainUntilDate = new Date(output[\"RetainUntilDate\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectLockRule = (output: any, context: __SerdeContext): ObjectLockRule => {\n  let contents: any = {\n    DefaultRetention: undefined,\n  };\n  if (output[\"DefaultRetention\"] !== undefined) {\n    contents.DefaultRetention = deserializeAws_restXmlDefaultRetention(output[\"DefaultRetention\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectVersion = (output: any, context: __SerdeContext): ObjectVersion => {\n  let contents: any = {\n    ETag: undefined,\n    Size: undefined,\n    StorageClass: undefined,\n    Key: undefined,\n    VersionId: undefined,\n    IsLatest: undefined,\n    LastModified: undefined,\n    Owner: undefined,\n  };\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = parseInt(output[\"Size\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n  if (output[\"IsLatest\"] !== undefined) {\n    contents.IsLatest = output[\"IsLatest\"] == \"true\";\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectVersionList = (output: any, context: __SerdeContext): ObjectVersion[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlObjectVersion(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlOwner = (output: any, context: __SerdeContext): Owner => {\n  let contents: any = {\n    DisplayName: undefined,\n    ID: undefined,\n  };\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = output[\"DisplayName\"];\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlOwnershipControls = (output: any, context: __SerdeContext): OwnershipControls => {\n  let contents: any = {\n    Rules: undefined,\n  };\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlOwnershipControlsRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlOwnershipControlsRule = (output: any, context: __SerdeContext): OwnershipControlsRule => {\n  let contents: any = {\n    ObjectOwnership: undefined,\n  };\n  if (output[\"ObjectOwnership\"] !== undefined) {\n    contents.ObjectOwnership = output[\"ObjectOwnership\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlOwnershipControlsRules = (\n  output: any,\n  context: __SerdeContext\n): OwnershipControlsRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlOwnershipControlsRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlPart = (output: any, context: __SerdeContext): Part => {\n  let contents: any = {\n    PartNumber: undefined,\n    LastModified: undefined,\n    ETag: undefined,\n    Size: undefined,\n  };\n  if (output[\"PartNumber\"] !== undefined) {\n    contents.PartNumber = parseInt(output[\"PartNumber\"]);\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = parseInt(output[\"Size\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlParts = (output: any, context: __SerdeContext): Part[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlPart(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlPolicyStatus = (output: any, context: __SerdeContext): PolicyStatus => {\n  let contents: any = {\n    IsPublic: undefined,\n  };\n  if (output[\"IsPublic\"] !== undefined) {\n    contents.IsPublic = output[\"IsPublic\"] == \"true\";\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlPublicAccessBlockConfiguration = (\n  output: any,\n  context: __SerdeContext\n): PublicAccessBlockConfiguration => {\n  let contents: any = {\n    BlockPublicAcls: undefined,\n    IgnorePublicAcls: undefined,\n    BlockPublicPolicy: undefined,\n    RestrictPublicBuckets: undefined,\n  };\n  if (output[\"BlockPublicAcls\"] !== undefined) {\n    contents.BlockPublicAcls = output[\"BlockPublicAcls\"] == \"true\";\n  }\n  if (output[\"IgnorePublicAcls\"] !== undefined) {\n    contents.IgnorePublicAcls = output[\"IgnorePublicAcls\"] == \"true\";\n  }\n  if (output[\"BlockPublicPolicy\"] !== undefined) {\n    contents.BlockPublicPolicy = output[\"BlockPublicPolicy\"] == \"true\";\n  }\n  if (output[\"RestrictPublicBuckets\"] !== undefined) {\n    contents.RestrictPublicBuckets = output[\"RestrictPublicBuckets\"] == \"true\";\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlQueueConfiguration = (output: any, context: __SerdeContext): QueueConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    QueueArn: undefined,\n    Events: undefined,\n    Filter: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Queue\"] !== undefined) {\n    contents.QueueArn = output[\"Queue\"];\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  }\n  if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlQueueConfigurationList = (output: any, context: __SerdeContext): QueueConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlQueueConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlRedirect = (output: any, context: __SerdeContext): Redirect => {\n  let contents: any = {\n    HostName: undefined,\n    HttpRedirectCode: undefined,\n    Protocol: undefined,\n    ReplaceKeyPrefixWith: undefined,\n    ReplaceKeyWith: undefined,\n  };\n  if (output[\"HostName\"] !== undefined) {\n    contents.HostName = output[\"HostName\"];\n  }\n  if (output[\"HttpRedirectCode\"] !== undefined) {\n    contents.HttpRedirectCode = output[\"HttpRedirectCode\"];\n  }\n  if (output[\"Protocol\"] !== undefined) {\n    contents.Protocol = output[\"Protocol\"];\n  }\n  if (output[\"ReplaceKeyPrefixWith\"] !== undefined) {\n    contents.ReplaceKeyPrefixWith = output[\"ReplaceKeyPrefixWith\"];\n  }\n  if (output[\"ReplaceKeyWith\"] !== undefined) {\n    contents.ReplaceKeyWith = output[\"ReplaceKeyWith\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlRedirectAllRequestsTo = (output: any, context: __SerdeContext): RedirectAllRequestsTo => {\n  let contents: any = {\n    HostName: undefined,\n    Protocol: undefined,\n  };\n  if (output[\"HostName\"] !== undefined) {\n    contents.HostName = output[\"HostName\"];\n  }\n  if (output[\"Protocol\"] !== undefined) {\n    contents.Protocol = output[\"Protocol\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicaModifications = (output: any, context: __SerdeContext): ReplicaModifications => {\n  let contents: any = {\n    Status: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicationConfiguration = (\n  output: any,\n  context: __SerdeContext\n): ReplicationConfiguration => {\n  let contents: any = {\n    Role: undefined,\n    Rules: undefined,\n  };\n  if (output[\"Role\"] !== undefined) {\n    contents.Role = output[\"Role\"];\n  }\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlReplicationRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicationRule = (output: any, context: __SerdeContext): ReplicationRule => {\n  let contents: any = {\n    ID: undefined,\n    Priority: undefined,\n    Prefix: undefined,\n    Filter: undefined,\n    Status: undefined,\n    SourceSelectionCriteria: undefined,\n    ExistingObjectReplication: undefined,\n    Destination: undefined,\n    DeleteMarkerReplication: undefined,\n  };\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  if (output[\"Priority\"] !== undefined) {\n    contents.Priority = parseInt(output[\"Priority\"]);\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlReplicationRuleFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output[\"SourceSelectionCriteria\"] !== undefined) {\n    contents.SourceSelectionCriteria = deserializeAws_restXmlSourceSelectionCriteria(\n      output[\"SourceSelectionCriteria\"],\n      context\n    );\n  }\n  if (output[\"ExistingObjectReplication\"] !== undefined) {\n    contents.ExistingObjectReplication = deserializeAws_restXmlExistingObjectReplication(\n      output[\"ExistingObjectReplication\"],\n      context\n    );\n  }\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlDestination(output[\"Destination\"], context);\n  }\n  if (output[\"DeleteMarkerReplication\"] !== undefined) {\n    contents.DeleteMarkerReplication = deserializeAws_restXmlDeleteMarkerReplication(\n      output[\"DeleteMarkerReplication\"],\n      context\n    );\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicationRuleAndOperator = (\n  output: any,\n  context: __SerdeContext\n): ReplicationRuleAndOperator => {\n  let contents: any = {\n    Prefix: undefined,\n    Tags: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicationRuleFilter = (output: any, context: __SerdeContext): ReplicationRuleFilter => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"],\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlReplicationRuleAndOperator(output[\"And\"], context),\n    };\n  }\n  return { $unknown: Object.entries(output)[0] };\n};\n\nconst deserializeAws_restXmlReplicationRules = (output: any, context: __SerdeContext): ReplicationRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlReplicationRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlReplicationTime = (output: any, context: __SerdeContext): ReplicationTime => {\n  let contents: any = {\n    Status: undefined,\n    Time: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output[\"Time\"] !== undefined) {\n    contents.Time = deserializeAws_restXmlReplicationTimeValue(output[\"Time\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicationTimeValue = (output: any, context: __SerdeContext): ReplicationTimeValue => {\n  let contents: any = {\n    Minutes: undefined,\n  };\n  if (output[\"Minutes\"] !== undefined) {\n    contents.Minutes = parseInt(output[\"Minutes\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlRoutingRule = (output: any, context: __SerdeContext): RoutingRule => {\n  let contents: any = {\n    Condition: undefined,\n    Redirect: undefined,\n  };\n  if (output[\"Condition\"] !== undefined) {\n    contents.Condition = deserializeAws_restXmlCondition(output[\"Condition\"], context);\n  }\n  if (output[\"Redirect\"] !== undefined) {\n    contents.Redirect = deserializeAws_restXmlRedirect(output[\"Redirect\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlRoutingRules = (output: any, context: __SerdeContext): RoutingRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlRoutingRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlS3KeyFilter = (output: any, context: __SerdeContext): S3KeyFilter => {\n  let contents: any = {\n    FilterRules: undefined,\n  };\n  if (output.FilterRule === \"\") {\n    contents.FilterRules = [];\n  }\n  if (output[\"FilterRule\"] !== undefined) {\n    contents.FilterRules = deserializeAws_restXmlFilterRuleList(__getArrayIfSingleItem(output[\"FilterRule\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlServerSideEncryptionByDefault = (\n  output: any,\n  context: __SerdeContext\n): ServerSideEncryptionByDefault => {\n  let contents: any = {\n    SSEAlgorithm: undefined,\n    KMSMasterKeyID: undefined,\n  };\n  if (output[\"SSEAlgorithm\"] !== undefined) {\n    contents.SSEAlgorithm = output[\"SSEAlgorithm\"];\n  }\n  if (output[\"KMSMasterKeyID\"] !== undefined) {\n    contents.KMSMasterKeyID = output[\"KMSMasterKeyID\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlServerSideEncryptionConfiguration = (\n  output: any,\n  context: __SerdeContext\n): ServerSideEncryptionConfiguration => {\n  let contents: any = {\n    Rules: undefined,\n  };\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlServerSideEncryptionRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlServerSideEncryptionRule = (\n  output: any,\n  context: __SerdeContext\n): ServerSideEncryptionRule => {\n  let contents: any = {\n    ApplyServerSideEncryptionByDefault: undefined,\n    BucketKeyEnabled: undefined,\n  };\n  if (output[\"ApplyServerSideEncryptionByDefault\"] !== undefined) {\n    contents.ApplyServerSideEncryptionByDefault = deserializeAws_restXmlServerSideEncryptionByDefault(\n      output[\"ApplyServerSideEncryptionByDefault\"],\n      context\n    );\n  }\n  if (output[\"BucketKeyEnabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output[\"BucketKeyEnabled\"] == \"true\";\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlServerSideEncryptionRules = (\n  output: any,\n  context: __SerdeContext\n): ServerSideEncryptionRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlServerSideEncryptionRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlSourceSelectionCriteria = (\n  output: any,\n  context: __SerdeContext\n): SourceSelectionCriteria => {\n  let contents: any = {\n    SseKmsEncryptedObjects: undefined,\n    ReplicaModifications: undefined,\n  };\n  if (output[\"SseKmsEncryptedObjects\"] !== undefined) {\n    contents.SseKmsEncryptedObjects = deserializeAws_restXmlSseKmsEncryptedObjects(\n      output[\"SseKmsEncryptedObjects\"],\n      context\n    );\n  }\n  if (output[\"ReplicaModifications\"] !== undefined) {\n    contents.ReplicaModifications = deserializeAws_restXmlReplicaModifications(output[\"ReplicaModifications\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlSSEKMS = (output: any, context: __SerdeContext): SSEKMS => {\n  let contents: any = {\n    KeyId: undefined,\n  };\n  if (output[\"KeyId\"] !== undefined) {\n    contents.KeyId = output[\"KeyId\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlSseKmsEncryptedObjects = (output: any, context: __SerdeContext): SseKmsEncryptedObjects => {\n  let contents: any = {\n    Status: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlSSES3 = (output: any, context: __SerdeContext): SSES3 => {\n  let contents: any = {};\n  return contents;\n};\n\nconst deserializeAws_restXmlStorageClassAnalysis = (output: any, context: __SerdeContext): StorageClassAnalysis => {\n  let contents: any = {\n    DataExport: undefined,\n  };\n  if (output[\"DataExport\"] !== undefined) {\n    contents.DataExport = deserializeAws_restXmlStorageClassAnalysisDataExport(output[\"DataExport\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlStorageClassAnalysisDataExport = (\n  output: any,\n  context: __SerdeContext\n): StorageClassAnalysisDataExport => {\n  let contents: any = {\n    OutputSchemaVersion: undefined,\n    Destination: undefined,\n  };\n  if (output[\"OutputSchemaVersion\"] !== undefined) {\n    contents.OutputSchemaVersion = output[\"OutputSchemaVersion\"];\n  }\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlAnalyticsExportDestination(output[\"Destination\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTag = (output: any, context: __SerdeContext): Tag => {\n  let contents: any = {\n    Key: undefined,\n    Value: undefined,\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"Value\"] !== undefined) {\n    contents.Value = output[\"Value\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTagSet = (output: any, context: __SerdeContext): Tag[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlTag(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlTargetGrant = (output: any, context: __SerdeContext): TargetGrant => {\n  let contents: any = {\n    Grantee: undefined,\n    Permission: undefined,\n  };\n  if (output[\"Grantee\"] !== undefined) {\n    contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n  }\n  if (output[\"Permission\"] !== undefined) {\n    contents.Permission = output[\"Permission\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTargetGrants = (output: any, context: __SerdeContext): TargetGrant[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlTargetGrant(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlTiering = (output: any, context: __SerdeContext): Tiering => {\n  let contents: any = {\n    Days: undefined,\n    AccessTier: undefined,\n  };\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n  if (output[\"AccessTier\"] !== undefined) {\n    contents.AccessTier = output[\"AccessTier\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTieringList = (output: any, context: __SerdeContext): Tiering[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlTiering(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlTopicConfiguration = (output: any, context: __SerdeContext): TopicConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    TopicArn: undefined,\n    Events: undefined,\n    Filter: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Topic\"] !== undefined) {\n    contents.TopicArn = output[\"Topic\"];\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  }\n  if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTopicConfigurationList = (output: any, context: __SerdeContext): TopicConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlTopicConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlTransition = (output: any, context: __SerdeContext): Transition => {\n  let contents: any = {\n    Date: undefined,\n    Days: undefined,\n    StorageClass: undefined,\n  };\n  if (output[\"Date\"] !== undefined) {\n    contents.Date = new Date(output[\"Date\"]);\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTransitionList = (output: any, context: __SerdeContext): Transition[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlTransition(entry, context);\n    });\n};\n\nconst deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"],\n});\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: __SerdeContext): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\nconst isSerializableHeaderValue = (value: any): boolean =>\n  value !== undefined &&\n  value !== null &&\n  value !== \"\" &&\n  (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n  (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n\nconst decodeEscapedXML = (str: string) =>\n  str\n    .replace(/&amp;/g, \"&\")\n    .replace(/&apos;/g, \"'\")\n    .replace(/&quot;/g, '\"')\n    .replace(/&gt;/g, \">\")\n    .replace(/&lt;/g, \"<\");\n\nconst parseBody = (streamBody: any, context: __SerdeContext): any =>\n  collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n      const parsedObj = xmlParse(encoded, {\n        attributeNamePrefix: \"\",\n        ignoreAttributes: false,\n        parseNodeValue: false,\n        tagValueProcessor: (val: any, tagName: any) => decodeEscapedXML(val),\n      });\n      const textNodeName = \"#text\";\n      const key = Object.keys(parsedObj)[0];\n      const parsedObjToReturn = parsedObj[key];\n      if (parsedObjToReturn[textNodeName]) {\n        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n        delete parsedObjToReturn[textNodeName];\n      }\n      return __getValueFromTextNode(parsedObjToReturn);\n    }\n    return {};\n  });\n\nconst loadRestXmlErrorCode = (output: __HttpResponse, data: any): string => {\n  if (data.Code !== undefined) {\n    return data.Code;\n  }\n  if (output.statusCode == 404) {\n    return \"NotFound\";\n  }\n  return \"\";\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}