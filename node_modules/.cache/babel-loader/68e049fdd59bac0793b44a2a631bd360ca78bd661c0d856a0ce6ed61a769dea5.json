{"ast":null,"code":"import { __read } from \"tslib\";\nvar DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nvar IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nvar DOTS_PATTERN = /\\.\\./;\nexport var DOT_PATTERN = /\\./;\nexport var S3_HOSTNAME_PATTERN = /^(.+\\.)?s3[.-]([a-z0-9-]+)\\./;\nvar S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\\.amazonaws\\.com$/;\nvar AWS_PARTITION_SUFFIX = \"amazonaws.com\";\nexport var isBucketNameOptions = function (options) {\n  return typeof options.bucketName === \"string\";\n};\n/**\n * Get pseudo region from supplied region. For example, if supplied with `fips-us-west-2`, it returns `us-west-2`.\n * @internal\n */\nexport var getPseudoRegion = function (region) {\n  return isFipsRegion(region) ? region.replace(/fips-|-fips/, \"\") : region;\n};\n/**\n * Determines whether a given string is DNS compliant per the rules outlined by\n * S3. Length, capitaization, and leading dot restrictions are enforced by the\n * DOMAIN_PATTERN regular expression.\n * @internal\n *\n * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html\n */\nexport var isDnsCompatibleBucketName = function (bucketName) {\n  return DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);\n};\nvar getRegionalSuffix = function (hostname) {\n  var parts = hostname.match(S3_HOSTNAME_PATTERN);\n  return [parts[2], hostname.replace(new RegExp(\"^\" + parts[0]), \"\")];\n};\nexport var getSuffix = function (hostname) {\n  return S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [\"us-east-1\", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);\n};\n/**\n * Infer region and hostname suffix from a complete hostname\n * @internal\n * @param hostname - Hostname\n * @returns [Region, Hostname suffix]\n */\nexport var getSuffixForArnEndpoint = function (hostname) {\n  return S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [hostname.replace(\".\" + AWS_PARTITION_SUFFIX, \"\"), AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);\n};\nexport var validateArnEndpointOptions = function (options) {\n  if (options.pathStyleEndpoint) {\n    throw new Error(\"Path-style S3 endpoint is not supported when bucket is an ARN\");\n  }\n  if (options.accelerateEndpoint) {\n    throw new Error(\"Accelerate endpoint is not supported when bucket is an ARN\");\n  }\n  if (!options.tlsCompatible) {\n    throw new Error(\"HTTPS is required when bucket is an ARN\");\n  }\n};\nexport var validateService = function (service) {\n  if (service !== \"s3\" && service !== \"s3-outposts\") {\n    throw new Error(\"Expect 's3' or 's3-outposts' in ARN service component\");\n  }\n};\nexport var validateS3Service = function (service) {\n  if (service !== \"s3\") {\n    throw new Error(\"Expect 's3' in Accesspoint ARN service component\");\n  }\n};\nexport var validateOutpostService = function (service) {\n  if (service !== \"s3-outposts\") {\n    throw new Error(\"Expect 's3-posts' in Outpost ARN service component\");\n  }\n};\n/**\n * Validate partition inferred from ARN is the same to `options.clientPartition`.\n * @internal\n */\nexport var validatePartition = function (partition, options) {\n  if (partition !== options.clientPartition) {\n    throw new Error(\"Partition in ARN is incompatible, got \\\"\" + partition + \"\\\" but expected \\\"\" + options.clientPartition + \"\\\"\");\n  }\n};\n/**\n * validate region value inferred from ARN. If `options.useArnRegion` is set, it validates the region is not a FIPS\n * region. If `options.useArnRegion` is unset, it validates the region is equal to `options.clientRegion` or\n * `options.clientSigningRegion`.\n * @internal\n */\nexport var validateRegion = function (region, options) {\n  if (region === \"\") {\n    throw new Error(\"ARN region is empty\");\n  }\n  if (!options.useArnRegion && !isEqualRegions(region, options.clientRegion) && !isEqualRegions(region, options.clientSigningRegion)) {\n    throw new Error(\"Region in ARN is incompatible, got \" + region + \" but expected \" + options.clientRegion);\n  }\n  if (options.useArnRegion && isFipsRegion(region)) {\n    throw new Error(\"Endpoint does not support FIPS region\");\n  }\n};\nvar isFipsRegion = function (region) {\n  return region.startsWith(\"fips-\") || region.endsWith(\"-fips\");\n};\nvar isEqualRegions = function (regionA, regionB) {\n  return regionA === regionB || getPseudoRegion(regionA) === regionB || regionA === getPseudoRegion(regionB);\n};\n/**\n * Validate an account ID\n * @internal\n */\nexport var validateAccountId = function (accountId) {\n  if (!/[0-9]{12}/.exec(accountId)) {\n    throw new Error(\"Access point ARN accountID does not match regex '[0-9]{12}'\");\n  }\n};\n/**\n * Validate a host label according to https://tools.ietf.org/html/rfc3986#section-3.2.2\n * @internal\n */\nexport var validateDNSHostLabel = function (label, options) {\n  if (options === void 0) {\n    options = {\n      tlsCompatible: true\n    };\n  }\n  // reference: https://tools.ietf.org/html/rfc3986#section-3.2.2\n  if (label.length >= 64 || !/^[a-z0-9][a-z0-9.-]+[a-z0-9]$/.test(label) || /(\\d+\\.){3}\\d+/.test(label) || /[.-]{2}/.test(label) || (options === null || options === void 0 ? void 0 : options.tlsCompatible) && DOT_PATTERN.test(label)) {\n    throw new Error(\"Invalid DNS label \" + label);\n  }\n};\n/**\n * Validate and parse an Access Point ARN or Outposts ARN\n * @internal\n *\n * @param resource - The resource section of an ARN\n * @returns Access Point Name and optional Outpost ID.\n */\nexport var getArnResources = function (resource) {\n  var delimiter = resource.includes(\":\") ? \":\" : \"/\";\n  var _a = __read(resource.split(delimiter)),\n    resourceType = _a[0],\n    rest = _a.slice(1);\n  if (resourceType === \"accesspoint\") {\n    // Parse accesspoint ARN\n    if (rest.length !== 1 || rest[0] === \"\") {\n      throw new Error(\"Access Point ARN should have one resource accesspoint\" + delimiter + \"{accesspointname}\");\n    }\n    return {\n      accesspointName: rest[0]\n    };\n  } else if (resourceType === \"outpost\") {\n    // Parse outpost ARN\n    if (!rest[0] || rest[1] !== \"accesspoint\" || !rest[2] || rest.length !== 3) {\n      throw new Error(\"Outpost ARN should have resource outpost\" + delimiter + \"{outpostId}\" + delimiter + \"accesspoint\" + delimiter + \"{accesspointName}\");\n    }\n    var _b = __read(rest, 3),\n      outpostId = _b[0],\n      _ = _b[1],\n      accesspointName = _b[2];\n    return {\n      outpostId: outpostId,\n      accesspointName: accesspointName\n    };\n  } else {\n    throw new Error(\"ARN resource should begin with 'accesspoint\" + delimiter + \"' or 'outpost\" + delimiter + \"'\");\n  }\n};\n/**\n * Throw if dual stack configuration is set to true.\n * @internal\n */\nexport var validateNoDualstack = function (dualstackEndpoint) {\n  if (dualstackEndpoint) throw new Error(\"Dualstack endpoint is not supported with Outpost\");\n};\n/**\n * Validate region is not appended or prepended with a `fips-`\n * @internal\n */\nexport var validateNoFIPS = function (region) {\n  if (isFipsRegion(region !== null && region !== void 0 ? region : \"\")) throw new Error(\"FIPS region is not supported with Outpost, got \" + region);\n};","map":{"version":3,"names":["DOMAIN_PATTERN","IP_ADDRESS_PATTERN","DOTS_PATTERN","DOT_PATTERN","S3_HOSTNAME_PATTERN","S3_US_EAST_1_ALTNAME_PATTERN","AWS_PARTITION_SUFFIX","isBucketNameOptions","options","bucketName","getPseudoRegion","region","isFipsRegion","replace","isDnsCompatibleBucketName","test","getRegionalSuffix","hostname","parts","match","RegExp","getSuffix","getSuffixForArnEndpoint","validateArnEndpointOptions","pathStyleEndpoint","Error","accelerateEndpoint","tlsCompatible","validateService","service","validateS3Service","validateOutpostService","validatePartition","partition","clientPartition","validateRegion","useArnRegion","isEqualRegions","clientRegion","clientSigningRegion","startsWith","endsWith","regionA","regionB","validateAccountId","accountId","exec","validateDNSHostLabel","label","length","getArnResources","resource","delimiter","includes","_a","__read","split","resourceType","rest","slice","accesspointName","_b","outpostId","_","validateNoDualstack","dualstackEndpoint","validateNoFIPS"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-sdk\\middleware-bucket-endpoint\\src\\bucketHostnameUtils.ts"],"sourcesContent":["import { ARN } from \"@aws-sdk/util-arn-parser\";\n\nconst DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nconst IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nconst DOTS_PATTERN = /\\.\\./;\nexport const DOT_PATTERN = /\\./;\nexport const S3_HOSTNAME_PATTERN = /^(.+\\.)?s3[.-]([a-z0-9-]+)\\./;\nconst S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\\.amazonaws\\.com$/;\nconst AWS_PARTITION_SUFFIX = \"amazonaws.com\";\n\nexport interface AccessPointArn extends ARN {\n  accessPointName: string;\n}\n\nexport interface BucketHostnameParams {\n  isCustomEndpoint: boolean;\n  baseHostname: string;\n  bucketName: string;\n  clientRegion: string;\n  accelerateEndpoint?: boolean;\n  dualstackEndpoint?: boolean;\n  pathStyleEndpoint?: boolean;\n  tlsCompatible?: boolean;\n}\n\nexport interface ArnHostnameParams extends Omit<BucketHostnameParams, \"bucketName\"> {\n  bucketName: ARN;\n  clientSigningRegion?: string;\n  clientPartition?: string;\n  useArnRegion?: boolean;\n}\n\nexport const isBucketNameOptions = (\n  options: BucketHostnameParams | ArnHostnameParams\n): options is BucketHostnameParams => typeof options.bucketName === \"string\";\n\n/**\n * Get pseudo region from supplied region. For example, if supplied with `fips-us-west-2`, it returns `us-west-2`.\n * @internal\n */\nexport const getPseudoRegion = (region: string) => (isFipsRegion(region) ? region.replace(/fips-|-fips/, \"\") : region);\n\n/**\n * Determines whether a given string is DNS compliant per the rules outlined by\n * S3. Length, capitaization, and leading dot restrictions are enforced by the\n * DOMAIN_PATTERN regular expression.\n * @internal\n *\n * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html\n */\nexport const isDnsCompatibleBucketName = (bucketName: string): boolean =>\n  DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);\n\nconst getRegionalSuffix = (hostname: string): [string, string] => {\n  const parts = hostname.match(S3_HOSTNAME_PATTERN)!;\n  return [parts[2], hostname.replace(new RegExp(`^${parts[0]}`), \"\")];\n};\n\nexport const getSuffix = (hostname: string): [string, string] =>\n  S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [\"us-east-1\", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);\n\n/**\n * Infer region and hostname suffix from a complete hostname\n * @internal\n * @param hostname - Hostname\n * @returns [Region, Hostname suffix]\n */\nexport const getSuffixForArnEndpoint = (hostname: string): [string, string] =>\n  S3_US_EAST_1_ALTNAME_PATTERN.test(hostname)\n    ? [hostname.replace(`.${AWS_PARTITION_SUFFIX}`, \"\"), AWS_PARTITION_SUFFIX]\n    : getRegionalSuffix(hostname);\n\nexport const validateArnEndpointOptions = (options: {\n  accelerateEndpoint?: boolean;\n  tlsCompatible?: boolean;\n  pathStyleEndpoint?: boolean;\n}) => {\n  if (options.pathStyleEndpoint) {\n    throw new Error(\"Path-style S3 endpoint is not supported when bucket is an ARN\");\n  }\n  if (options.accelerateEndpoint) {\n    throw new Error(\"Accelerate endpoint is not supported when bucket is an ARN\");\n  }\n  if (!options.tlsCompatible) {\n    throw new Error(\"HTTPS is required when bucket is an ARN\");\n  }\n};\n\nexport const validateService = (service: string) => {\n  if (service !== \"s3\" && service !== \"s3-outposts\") {\n    throw new Error(\"Expect 's3' or 's3-outposts' in ARN service component\");\n  }\n};\n\nexport const validateS3Service = (service: string) => {\n  if (service !== \"s3\") {\n    throw new Error(\"Expect 's3' in Accesspoint ARN service component\");\n  }\n};\n\nexport const validateOutpostService = (service: string) => {\n  if (service !== \"s3-outposts\") {\n    throw new Error(\"Expect 's3-posts' in Outpost ARN service component\");\n  }\n};\n\n/**\n * Validate partition inferred from ARN is the same to `options.clientPartition`.\n * @internal\n */\nexport const validatePartition = (partition: string, options: { clientPartition: string }) => {\n  if (partition !== options.clientPartition) {\n    throw new Error(`Partition in ARN is incompatible, got \"${partition}\" but expected \"${options.clientPartition}\"`);\n  }\n};\n\n/**\n * validate region value inferred from ARN. If `options.useArnRegion` is set, it validates the region is not a FIPS\n * region. If `options.useArnRegion` is unset, it validates the region is equal to `options.clientRegion` or\n * `options.clientSigningRegion`.\n * @internal\n */\nexport const validateRegion = (\n  region: string,\n  options: {\n    useArnRegion?: boolean;\n    clientRegion: string;\n    clientSigningRegion: string;\n  }\n) => {\n  if (region === \"\") {\n    throw new Error(\"ARN region is empty\");\n  }\n  if (\n    !options.useArnRegion &&\n    !isEqualRegions(region, options.clientRegion) &&\n    !isEqualRegions(region, options.clientSigningRegion)\n  ) {\n    throw new Error(`Region in ARN is incompatible, got ${region} but expected ${options.clientRegion}`);\n  }\n  if (options.useArnRegion && isFipsRegion(region)) {\n    throw new Error(\"Endpoint does not support FIPS region\");\n  }\n};\n\nconst isFipsRegion = (region: string) => region.startsWith(\"fips-\") || region.endsWith(\"-fips\");\n\nconst isEqualRegions = (regionA: string, regionB: string) =>\n  regionA === regionB || getPseudoRegion(regionA) === regionB || regionA === getPseudoRegion(regionB);\n\n/**\n * Validate an account ID\n * @internal\n */\nexport const validateAccountId = (accountId: string) => {\n  if (!/[0-9]{12}/.exec(accountId)) {\n    throw new Error(\"Access point ARN accountID does not match regex '[0-9]{12}'\");\n  }\n};\n\n/**\n * Validate a host label according to https://tools.ietf.org/html/rfc3986#section-3.2.2\n * @internal\n */\nexport const validateDNSHostLabel = (label: string, options: { tlsCompatible?: boolean } = { tlsCompatible: true }) => {\n  // reference: https://tools.ietf.org/html/rfc3986#section-3.2.2\n  if (\n    label.length >= 64 ||\n    !/^[a-z0-9][a-z0-9.-]+[a-z0-9]$/.test(label) ||\n    /(\\d+\\.){3}\\d+/.test(label) ||\n    /[.-]{2}/.test(label) ||\n    (options?.tlsCompatible && DOT_PATTERN.test(label))\n  ) {\n    throw new Error(`Invalid DNS label ${label}`);\n  }\n};\n\n/**\n * Validate and parse an Access Point ARN or Outposts ARN\n * @internal\n *\n * @param resource - The resource section of an ARN\n * @returns Access Point Name and optional Outpost ID.\n */\nexport const getArnResources = (\n  resource: string\n): {\n  accesspointName: string;\n  outpostId?: string;\n} => {\n  const delimiter = resource.includes(\":\") ? \":\" : \"/\";\n  const [resourceType, ...rest] = resource.split(delimiter);\n  if (resourceType === \"accesspoint\") {\n    // Parse accesspoint ARN\n    if (rest.length !== 1 || rest[0] === \"\") {\n      throw new Error(`Access Point ARN should have one resource accesspoint${delimiter}{accesspointname}`);\n    }\n    return { accesspointName: rest[0] };\n  } else if (resourceType === \"outpost\") {\n    // Parse outpost ARN\n    if (!rest[0] || rest[1] !== \"accesspoint\" || !rest[2] || rest.length !== 3) {\n      throw new Error(\n        `Outpost ARN should have resource outpost${delimiter}{outpostId}${delimiter}accesspoint${delimiter}{accesspointName}`\n      );\n    }\n    const [outpostId, _, accesspointName] = rest;\n    return { outpostId, accesspointName };\n  } else {\n    throw new Error(`ARN resource should begin with 'accesspoint${delimiter}' or 'outpost${delimiter}'`);\n  }\n};\n\n/**\n * Throw if dual stack configuration is set to true.\n * @internal\n */\nexport const validateNoDualstack = (dualstackEndpoint: boolean) => {\n  if (dualstackEndpoint) throw new Error(\"Dualstack endpoint is not supported with Outpost\");\n};\n\n/**\n * Validate region is not appended or prepended with a `fips-`\n * @internal\n */\nexport const validateNoFIPS = (region: string) => {\n  if (isFipsRegion(region ?? \"\")) throw new Error(`FIPS region is not supported with Outpost, got ${region}`);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}