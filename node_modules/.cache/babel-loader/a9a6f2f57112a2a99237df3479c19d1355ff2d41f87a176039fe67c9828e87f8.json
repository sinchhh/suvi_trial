{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { CloudWatchLogsClient, CreateLogGroupCommand, CreateLogStreamCommand, DescribeLogGroupsCommand, DescribeLogStreamsCommand, GetLogEventsCommand, PutLogEventsCommand } from '@aws-sdk/client-cloudwatch-logs';\nimport { Credentials } from '../..';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { getAmplifyUserAgent } from '../Platform';\nimport { parseAWSExports } from '../parseAWSExports';\nimport { AWS_CLOUDWATCH_BASE_BUFFER_SIZE, AWS_CLOUDWATCH_CATEGORY, AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE, AWS_CLOUDWATCH_MAX_EVENT_SIZE, AWS_CLOUDWATCH_PROVIDER_NAME, NO_CREDS_ERROR_STRING, RETRY_ERROR_CODES } from '../Util/Constants';\nvar logger = new Logger('AWSCloudWatch');\nvar AWSCloudWatchProvider = /** @class */function () {\n  function AWSCloudWatchProvider(config) {\n    this.configure(config);\n    this._dataTracker = {\n      eventUploadInProgress: false,\n      logEvents: []\n    };\n    this._currentLogBatch = [];\n    this._initiateLogPushInterval();\n  }\n  AWSCloudWatchProvider.prototype.getProviderName = function () {\n    return AWSCloudWatchProvider.PROVIDER_NAME;\n  };\n  AWSCloudWatchProvider.prototype.getCategoryName = function () {\n    return AWSCloudWatchProvider.CATEGORY;\n  };\n  AWSCloudWatchProvider.prototype.getLogQueue = function () {\n    return this._dataTracker.logEvents;\n  };\n  AWSCloudWatchProvider.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    var conf = Object.assign({}, this._config, parseAWSExports(config).Logging, config);\n    this._config = conf;\n    return this._config;\n  };\n  AWSCloudWatchProvider.prototype.createLogGroup = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('creating new log group in CloudWatch - ', params.logGroupName);\n            cmd = new CreateLogGroupCommand(params);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 3:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 4:\n            error_1 = _a.sent();\n            logger.error(\"error creating log group - \" + error_1);\n            throw error_1;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogGroups = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting list of log groups');\n            cmd = new DescribeLogGroupsCommand(params);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 3:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 4:\n            error_2 = _a.sent();\n            logger.error(\"error getting log group - \" + error_2);\n            throw error_2;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.createLogStream = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('creating new log stream in CloudWatch - ', params.logStreamName);\n            cmd = new CreateLogStreamCommand(params);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 3:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 4:\n            error_3 = _a.sent();\n            logger.error(\"error creating log stream - \" + error_3);\n            throw error_3;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogStreams = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting list of log streams');\n            cmd = new DescribeLogStreamsCommand(params);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 3:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 4:\n            error_4 = _a.sent();\n            logger.error(\"error getting log stream - \" + error_4);\n            throw error_4;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogEvents = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting log events from stream - ', params.logStreamName);\n            cmd = new GetLogEventsCommand(params);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 3:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 4:\n            error_5 = _a.sent();\n            logger.error(\"error getting log events - \" + error_5);\n            throw error_5;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.pushLogs = function (logs) {\n    logger.debug('pushing log events to Cloudwatch...');\n    this._dataTracker.logEvents = __spread(this._dataTracker.logEvents, logs);\n  };\n  AWSCloudWatchProvider.prototype._validateLogGroupExistsAndCreate = function (logGroupName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, currGroups, foundGroups, err_1, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._dataTracker.verifiedLogGroup) {\n              return [2 /*return*/, this._dataTracker.verifiedLogGroup];\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 5,, 6]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            return [4 /*yield*/, this.getLogGroups({\n              logGroupNamePrefix: logGroupName\n            })];\n          case 3:\n            currGroups = _a.sent();\n            if (!(typeof currGroups === 'string') && currGroups.logGroups) {\n              foundGroups = currGroups.logGroups.filter(function (group) {\n                return group.logGroupName === logGroupName;\n              });\n              if (foundGroups.length > 0) {\n                this._dataTracker.verifiedLogGroup = foundGroups[0];\n                return [2 /*return*/, foundGroups[0]];\n              }\n            }\n            /**\n             * If we get to this point, it means that the specified log group does not exist\n             * and we should create it.\n             */\n            return [4 /*yield*/, this.createLogGroup({\n              logGroupName: logGroupName\n            })];\n          case 4:\n            /**\n             * If we get to this point, it means that the specified log group does not exist\n             * and we should create it.\n             */\n            _a.sent();\n            return [2 /*return*/, null];\n          case 5:\n            err_1 = _a.sent();\n            errString = \"failure during log group search: \" + err_1;\n            logger.error(errString);\n            throw err_1;\n          case 6:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._validateLogStreamExists = function (logGroupName, logStreamName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, currStreams, foundStreams, err_2, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            return [4 /*yield*/, this.getLogStreams({\n              logGroupName: logGroupName,\n              logStreamNamePrefix: logStreamName\n            })];\n          case 2:\n            currStreams = _a.sent();\n            if (currStreams.logStreams) {\n              foundStreams = currStreams.logStreams.filter(function (stream) {\n                return stream.logStreamName === logStreamName;\n              });\n              if (foundStreams.length > 0) {\n                this._nextSequenceToken = foundStreams[0].uploadSequenceToken;\n                return [2 /*return*/, foundStreams[0]];\n              }\n            }\n            /**\n             * If we get to this point, it means that the specified stream does not\n             * exist, and we should create it now.\n             */\n            return [4 /*yield*/, this.createLogStream({\n              logGroupName: logGroupName,\n              logStreamName: logStreamName\n            })];\n          case 3:\n            /**\n             * If we get to this point, it means that the specified stream does not\n             * exist, and we should create it now.\n             */\n            _a.sent();\n            return [2 /*return*/, null];\n          case 4:\n            err_2 = _a.sent();\n            errString = \"failure during log stream search: \" + err_2;\n            logger.error(errString);\n            throw err_2;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._sendLogEvents = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, cmd, client, output, err_3, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            logger.debug('sending log events to stream - ', params.logStreamName);\n            cmd = new PutLogEventsCommand(params);\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 2:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 3:\n            err_3 = _a.sent();\n            errString = \"failure during log push: \" + err_3;\n            logger.error(errString);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._initCloudWatchLogs = function () {\n    return new CloudWatchLogsClient({\n      region: this._config.region,\n      credentials: this._config.credentials,\n      customUserAgent: getAmplifyUserAgent(),\n      endpoint: this._config.endpoint\n    });\n  };\n  AWSCloudWatchProvider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, Credentials.get().then(function (credentials) {\n              if (!credentials) return false;\n              var cred = Credentials.shear(credentials);\n              logger.debug('set credentials for logging', cred);\n              _this._config.credentials = cred;\n              return true;\n            }).catch(function (error) {\n              logger.warn('ensure credentials error', error);\n              return false;\n            })];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  AWSCloudWatchProvider.prototype._getNextSequenceToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var logStream, err_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._nextSequenceToken && this._nextSequenceToken.length > 0) {\n              return [2 /*return*/, this._nextSequenceToken];\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._validateLogGroupExistsAndCreate(this._config.logGroupName)];\n          case 2:\n            _a.sent();\n            this._nextSequenceToken = undefined;\n            return [4 /*yield*/, this._validateLogStreamExists(this._config.logGroupName, this._config.logStreamName)];\n          case 3:\n            logStream = _a.sent();\n            if (logStream) {\n              this._nextSequenceToken = logStream.uploadSequenceToken;\n            }\n            return [2 /*return*/, this._nextSequenceToken];\n          case 4:\n            err_4 = _a.sent();\n            logger.error(\"failure while getting next sequence token: \" + err_4);\n            throw err_4;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._safeUploadLogEvents = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var seqToken, logBatch, putLogsPayload, sendLogEventsResponse, err_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            return [4 /*yield*/, this._getNextSequenceToken()];\n          case 1:\n            seqToken = _a.sent();\n            logBatch = this._currentLogBatch.length === 0 ? this._getBufferedBatchOfLogs() : this._currentLogBatch;\n            putLogsPayload = {\n              logGroupName: this._config.logGroupName,\n              logStreamName: this._config.logStreamName,\n              logEvents: logBatch,\n              sequenceToken: seqToken\n            };\n            this._dataTracker.eventUploadInProgress = true;\n            return [4 /*yield*/, this._sendLogEvents(putLogsPayload)];\n          case 2:\n            sendLogEventsResponse = _a.sent();\n            this._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;\n            this._dataTracker.eventUploadInProgress = false;\n            this._currentLogBatch = [];\n            return [2 /*return*/, sendLogEventsResponse];\n          case 3:\n            err_5 = _a.sent();\n            logger.error(\"error during _safeUploadLogEvents: \" + err_5);\n            if (RETRY_ERROR_CODES.includes(err_5.name)) {\n              this._getNewSequenceTokenAndSubmit({\n                logEvents: this._currentLogBatch,\n                logGroupName: this._config.logGroupName,\n                logStreamName: this._config.logStreamName\n              });\n            } else {\n              this._dataTracker.eventUploadInProgress = false;\n              throw err_5;\n            }\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._getBufferedBatchOfLogs = function () {\n    /**\n     * CloudWatch has restrictions on the size of the log events that get sent up.\n     * We need to track both the size of each event and the total size of the batch\n     * of logs.\n     *\n     * We also need to ensure that the logs in the batch are sorted in chronological order.\n     * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\n     */\n    var currentEventIdx = 0;\n    var totalByteSize = 0;\n    while (currentEventIdx < this._dataTracker.logEvents.length) {\n      var currentEvent = this._dataTracker.logEvents[currentEventIdx];\n      var eventSize = currentEvent ? new TextEncoder().encode(currentEvent.message).length + AWS_CLOUDWATCH_BASE_BUFFER_SIZE : 0;\n      if (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {\n        var errString = \"Log entry exceeds maximum size for CloudWatch logs. Log size: \" + eventSize + \". Truncating log message.\";\n        logger.warn(errString);\n        currentEvent.message = currentEvent.message.substring(0, eventSize);\n      }\n      if (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE) break;\n      totalByteSize += eventSize;\n      currentEventIdx++;\n    }\n    this._currentLogBatch = this._dataTracker.logEvents.splice(0, currentEventIdx);\n    return this._currentLogBatch;\n  };\n  AWSCloudWatchProvider.prototype._getNewSequenceTokenAndSubmit = function (payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var seqToken, sendLogEventsRepsonse, err_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            this._nextSequenceToken = undefined;\n            this._dataTracker.eventUploadInProgress = true;\n            return [4 /*yield*/, this._getNextSequenceToken()];\n          case 1:\n            seqToken = _a.sent();\n            payload.sequenceToken = seqToken;\n            return [4 /*yield*/, this._sendLogEvents(payload)];\n          case 2:\n            sendLogEventsRepsonse = _a.sent();\n            this._dataTracker.eventUploadInProgress = false;\n            this._currentLogBatch = [];\n            return [2 /*return*/, sendLogEventsRepsonse];\n          case 3:\n            err_6 = _a.sent();\n            logger.error(\"error when retrying log submission with new sequence token: \" + err_6);\n            this._dataTracker.eventUploadInProgress = false;\n            throw err_6;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._initiateLogPushInterval = function () {\n    var _this = this;\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n    this._timer = setInterval(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var err_7;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 3,, 4]);\n              if (!this._getDocUploadPermissibility()) return [3 /*break*/, 2];\n              return [4 /*yield*/, this._safeUploadLogEvents()];\n            case 1:\n              _a.sent();\n              _a.label = 2;\n            case 2:\n              return [3 /*break*/, 4];\n            case 3:\n              err_7 = _a.sent();\n              logger.error(\"error when calling _safeUploadLogEvents in the timer interval - \" + err_7);\n              return [3 /*break*/, 4];\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    }, 2000);\n  };\n  AWSCloudWatchProvider.prototype._getDocUploadPermissibility = function () {\n    return (this._dataTracker.logEvents.length !== 0 || this._currentLogBatch.length !== 0) && !this._dataTracker.eventUploadInProgress;\n  };\n  AWSCloudWatchProvider.PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;\n  AWSCloudWatchProvider.CATEGORY = AWS_CLOUDWATCH_CATEGORY;\n  return AWSCloudWatchProvider;\n}();\nexport { AWSCloudWatchProvider };","map":{"version":3,"names":["CloudWatchLogsClient","CreateLogGroupCommand","CreateLogStreamCommand","DescribeLogGroupsCommand","DescribeLogStreamsCommand","GetLogEventsCommand","PutLogEventsCommand","Credentials","ConsoleLogger","Logger","getAmplifyUserAgent","parseAWSExports","AWS_CLOUDWATCH_BASE_BUFFER_SIZE","AWS_CLOUDWATCH_CATEGORY","AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE","AWS_CLOUDWATCH_MAX_EVENT_SIZE","AWS_CLOUDWATCH_PROVIDER_NAME","NO_CREDS_ERROR_STRING","RETRY_ERROR_CODES","logger","AWSCloudWatchProvider","config","configure","_dataTracker","eventUploadInProgress","logEvents","_currentLogBatch","_initiateLogPushInterval","prototype","getProviderName","PROVIDER_NAME","getCategoryName","CATEGORY","getLogQueue","_config","conf","Object","assign","Logging","createLogGroup","params","debug","logGroupName","cmd","_ensureCredentials","credentialsOK","_a","sent","Error","client","_initCloudWatchLogs","send","output","error","error_1","getLogGroups","error_2","createLogStream","logStreamName","error_3","getLogStreams","error_4","getLogEvents","error_5","pushLogs","logs","__spread","_validateLogGroupExistsAndCreate","verifiedLogGroup","logGroupNamePrefix","currGroups","logGroups","foundGroups","filter","group","length","errString","err_1","_validateLogStreamExists","logStreamNamePrefix","currStreams","logStreams","foundStreams","stream","_nextSequenceToken","uploadSequenceToken","err_2","_sendLogEvents","err_3","region","credentials","customUserAgent","endpoint","get","then","cred","shear","_this","catch","warn","_getNextSequenceToken","undefined","logStream","err_4","_safeUploadLogEvents","seqToken","logBatch","_getBufferedBatchOfLogs","putLogsPayload","sequenceToken","sendLogEventsResponse","nextSequenceToken","err_5","includes","name","_getNewSequenceTokenAndSubmit","currentEventIdx","totalByteSize","currentEvent","eventSize","TextEncoder","encode","message","substring","splice","payload","sendLogEventsRepsonse","err_6","_timer","clearInterval","setInterval","__awaiter","_getDocUploadPermissibility","err_7"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\core\\src\\Providers\\AWSCloudWatchProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n\tCloudWatchLogsClient,\n\tCreateLogGroupCommand,\n\tCreateLogGroupCommandInput,\n\tCreateLogGroupCommandOutput,\n\tCreateLogStreamCommand,\n\tCreateLogStreamCommandInput,\n\tCreateLogStreamCommandOutput,\n\tDescribeLogGroupsCommand,\n\tDescribeLogGroupsCommandInput,\n\tDescribeLogGroupsCommandOutput,\n\tDescribeLogStreamsCommand,\n\tDescribeLogStreamsCommandInput,\n\tDescribeLogStreamsCommandOutput,\n\tGetLogEventsCommand,\n\tGetLogEventsCommandInput,\n\tGetLogEventsCommandOutput,\n\tInputLogEvent,\n\tLogGroup,\n\tLogStream,\n\tPutLogEventsCommand,\n\tPutLogEventsCommandInput,\n\tPutLogEventsCommandOutput,\n} from '@aws-sdk/client-cloudwatch-logs';\nimport {\n\tAWSCloudWatchProviderOptions,\n\tCloudWatchDataTracker,\n\tLoggingProvider,\n} from '../types/types';\nimport { Credentials } from '../..';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { getAmplifyUserAgent } from '../Platform';\nimport { parseAWSExports } from '../parseAWSExports';\nimport {\n\tAWS_CLOUDWATCH_BASE_BUFFER_SIZE,\n\tAWS_CLOUDWATCH_CATEGORY,\n\tAWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE,\n\tAWS_CLOUDWATCH_MAX_EVENT_SIZE,\n\tAWS_CLOUDWATCH_PROVIDER_NAME,\n\tNO_CREDS_ERROR_STRING,\n\tRETRY_ERROR_CODES,\n} from '../Util/Constants';\n\nconst logger = new Logger('AWSCloudWatch');\n\nclass AWSCloudWatchProvider implements LoggingProvider {\n\tstatic readonly PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;\n\tstatic readonly CATEGORY = AWS_CLOUDWATCH_CATEGORY;\n\n\tprivate _config: AWSCloudWatchProviderOptions;\n\tprivate _dataTracker: CloudWatchDataTracker;\n\tprivate _currentLogBatch: InputLogEvent[];\n\tprivate _timer;\n\tprivate _nextSequenceToken: string | undefined;\n\n\tconstructor(config?: AWSCloudWatchProviderOptions) {\n\t\tthis.configure(config);\n\t\tthis._dataTracker = {\n\t\t\teventUploadInProgress: false,\n\t\t\tlogEvents: [],\n\t\t};\n\t\tthis._currentLogBatch = [];\n\t\tthis._initiateLogPushInterval();\n\t}\n\n\tpublic getProviderName(): string {\n\t\treturn AWSCloudWatchProvider.PROVIDER_NAME;\n\t}\n\n\tpublic getCategoryName(): string {\n\t\treturn AWSCloudWatchProvider.CATEGORY;\n\t}\n\n\tpublic getLogQueue(): InputLogEvent[] {\n\t\treturn this._dataTracker.logEvents;\n\t}\n\n\tpublic configure(\n\t\tconfig?: AWSCloudWatchProviderOptions\n\t): AWSCloudWatchProviderOptions {\n\t\tif (!config) return this._config || {};\n\n\t\tconst conf = Object.assign(\n\t\t\t{},\n\t\t\tthis._config,\n\t\t\tparseAWSExports(config).Logging,\n\t\t\tconfig\n\t\t);\n\t\tthis._config = conf;\n\n\t\treturn this._config;\n\t}\n\n\tpublic async createLogGroup(\n\t\tparams: CreateLogGroupCommandInput\n\t): Promise<CreateLogGroupCommandOutput> {\n\t\tlogger.debug(\n\t\t\t'creating new log group in CloudWatch - ',\n\t\t\tparams.logGroupName\n\t\t);\n\t\tconst cmd = new CreateLogGroupCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error creating log group - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async getLogGroups(\n\t\tparams: DescribeLogGroupsCommandInput\n\t): Promise<DescribeLogGroupsCommandOutput> {\n\t\tlogger.debug('getting list of log groups');\n\n\t\tconst cmd = new DescribeLogGroupsCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error getting log group - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async createLogStream(\n\t\tparams: CreateLogStreamCommandInput\n\t): Promise<CreateLogStreamCommandOutput> {\n\t\tlogger.debug(\n\t\t\t'creating new log stream in CloudWatch - ',\n\t\t\tparams.logStreamName\n\t\t);\n\t\tconst cmd = new CreateLogStreamCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error creating log stream - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async getLogStreams(\n\t\tparams: DescribeLogStreamsCommandInput\n\t): Promise<DescribeLogStreamsCommandOutput> {\n\t\tlogger.debug('getting list of log streams');\n\t\tconst cmd = new DescribeLogStreamsCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error getting log stream - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async getLogEvents(\n\t\tparams: GetLogEventsCommandInput\n\t): Promise<GetLogEventsCommandOutput> {\n\t\tlogger.debug('getting log events from stream - ', params.logStreamName);\n\t\tconst cmd = new GetLogEventsCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error getting log events - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic pushLogs(logs: InputLogEvent[]): void {\n\t\tlogger.debug('pushing log events to Cloudwatch...');\n\t\tthis._dataTracker.logEvents = [...this._dataTracker.logEvents, ...logs];\n\t}\n\n\tprivate async _validateLogGroupExistsAndCreate(\n\t\tlogGroupName: string\n\t): Promise<LogGroup> {\n\t\tif (this._dataTracker.verifiedLogGroup) {\n\t\t\treturn this._dataTracker.verifiedLogGroup;\n\t\t}\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst currGroups = await this.getLogGroups({\n\t\t\t\tlogGroupNamePrefix: logGroupName,\n\t\t\t});\n\n\t\t\tif (!(typeof currGroups === 'string') && currGroups.logGroups) {\n\t\t\t\tconst foundGroups = currGroups.logGroups.filter(\n\t\t\t\t\tgroup => group.logGroupName === logGroupName\n\t\t\t\t);\n\t\t\t\tif (foundGroups.length > 0) {\n\t\t\t\t\tthis._dataTracker.verifiedLogGroup = foundGroups[0];\n\n\t\t\t\t\treturn foundGroups[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * If we get to this point, it means that the specified log group does not exist\n\t\t\t * and we should create it.\n\t\t\t */\n\t\t\tawait this.createLogGroup({ logGroupName });\n\n\t\t\treturn null;\n\t\t} catch (err) {\n\t\t\tconst errString = `failure during log group search: ${err}`;\n\t\t\tlogger.error(errString);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate async _validateLogStreamExists(\n\t\tlogGroupName: string,\n\t\tlogStreamName: string\n\t): Promise<LogStream> {\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst currStreams = await this.getLogStreams({\n\t\t\t\tlogGroupName,\n\t\t\t\tlogStreamNamePrefix: logStreamName,\n\t\t\t});\n\n\t\t\tif (currStreams.logStreams) {\n\t\t\t\tconst foundStreams = currStreams.logStreams.filter(\n\t\t\t\t\tstream => stream.logStreamName === logStreamName\n\t\t\t\t);\n\t\t\t\tif (foundStreams.length > 0) {\n\t\t\t\t\tthis._nextSequenceToken = foundStreams[0].uploadSequenceToken;\n\n\t\t\t\t\treturn foundStreams[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * If we get to this point, it means that the specified stream does not\n\t\t\t * exist, and we should create it now.\n\t\t\t */\n\t\t\tawait this.createLogStream({\n\t\t\t\tlogGroupName,\n\t\t\t\tlogStreamName,\n\t\t\t});\n\n\t\t\treturn null;\n\t\t} catch (err) {\n\t\t\tconst errString = `failure during log stream search: ${err}`;\n\t\t\tlogger.error(errString);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate async _sendLogEvents(\n\t\tparams: PutLogEventsCommandInput\n\t): Promise<PutLogEventsCommandOutput> {\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tlogger.debug('sending log events to stream - ', params.logStreamName);\n\t\t\tconst cmd = new PutLogEventsCommand(params);\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\n\t\t\treturn output;\n\t\t} catch (err) {\n\t\t\tconst errString = `failure during log push: ${err}`;\n\t\t\tlogger.error(errString);\n\t\t}\n\t}\n\n\tprivate _initCloudWatchLogs() {\n\t\treturn new CloudWatchLogsClient({\n\t\t\tregion: this._config.region,\n\t\t\tcredentials: this._config.credentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t\tendpoint: this._config.endpoint,\n\t\t});\n\t}\n\n\tprivate async _ensureCredentials() {\n\t\treturn await Credentials.get()\n\t\t\t.then(credentials => {\n\t\t\t\tif (!credentials) return false;\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\tlogger.debug('set credentials for logging', cred);\n\t\t\t\tthis._config.credentials = cred;\n\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tlogger.warn('ensure credentials error', error);\n\t\t\t\treturn false;\n\t\t\t});\n\t}\n\n\tprivate async _getNextSequenceToken(): Promise<string> {\n\t\tif (this._nextSequenceToken && this._nextSequenceToken.length > 0) {\n\t\t\treturn this._nextSequenceToken;\n\t\t}\n\n\t\t/**\n\t\t * A sequence token will not exist if any of the following are true:\n\t\t *   ...the log group does not exist\n\t\t *   ...the log stream does not exist\n\t\t *   ...the log stream does exist but has no logs written to it yet\n\t\t */\n\t\ttry {\n\t\t\tawait this._validateLogGroupExistsAndCreate(this._config.logGroupName);\n\n\t\t\tthis._nextSequenceToken = undefined;\n\n\t\t\tconst logStream = await this._validateLogStreamExists(\n\t\t\t\tthis._config.logGroupName,\n\t\t\t\tthis._config.logStreamName\n\t\t\t);\n\n\t\t\tif (logStream) {\n\t\t\t\tthis._nextSequenceToken = logStream.uploadSequenceToken;\n\t\t\t}\n\n\t\t\treturn this._nextSequenceToken;\n\t\t} catch (err) {\n\t\t\tlogger.error(`failure while getting next sequence token: ${err}`);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate async _safeUploadLogEvents(): Promise<PutLogEventsCommandOutput> {\n\t\ttry {\n\t\t\t/**\n\t\t\t * CloudWatch has restrictions on the size of the log events that get sent up.\n\t\t\t * We need to track both the size of each event and the total size of the batch\n\t\t\t * of logs.\n\t\t\t *\n\t\t\t * We also need to ensure that the logs in the batch are sorted in chronological order.\n\t\t\t * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\n\t\t\t */\n\t\t\tconst seqToken = await this._getNextSequenceToken();\n\t\t\tconst logBatch =\n\t\t\t\tthis._currentLogBatch.length === 0\n\t\t\t\t\t? this._getBufferedBatchOfLogs()\n\t\t\t\t\t: this._currentLogBatch;\n\n\t\t\tconst putLogsPayload: PutLogEventsCommandInput = {\n\t\t\t\tlogGroupName: this._config.logGroupName,\n\t\t\t\tlogStreamName: this._config.logStreamName,\n\t\t\t\tlogEvents: logBatch,\n\t\t\t\tsequenceToken: seqToken,\n\t\t\t};\n\n\t\t\tthis._dataTracker.eventUploadInProgress = true;\n\t\t\tconst sendLogEventsResponse = await this._sendLogEvents(putLogsPayload);\n\n\t\t\tthis._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;\n\t\t\tthis._dataTracker.eventUploadInProgress = false;\n\t\t\tthis._currentLogBatch = [];\n\n\t\t\treturn sendLogEventsResponse;\n\t\t} catch (err) {\n\t\t\tlogger.error(`error during _safeUploadLogEvents: ${err}`);\n\n\t\t\tif (RETRY_ERROR_CODES.includes(err.name)) {\n\t\t\t\tthis._getNewSequenceTokenAndSubmit({\n\t\t\t\t\tlogEvents: this._currentLogBatch,\n\t\t\t\t\tlogGroupName: this._config.logGroupName,\n\t\t\t\t\tlogStreamName: this._config.logStreamName,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis._dataTracker.eventUploadInProgress = false;\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _getBufferedBatchOfLogs(): InputLogEvent[] {\n\t\t/**\n\t\t * CloudWatch has restrictions on the size of the log events that get sent up.\n\t\t * We need to track both the size of each event and the total size of the batch\n\t\t * of logs.\n\t\t *\n\t\t * We also need to ensure that the logs in the batch are sorted in chronological order.\n\t\t * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\n\t\t */\n\t\tlet currentEventIdx = 0;\n\t\tlet totalByteSize = 0;\n\n\t\twhile (currentEventIdx < this._dataTracker.logEvents.length) {\n\t\t\tconst currentEvent = this._dataTracker.logEvents[currentEventIdx];\n\t\t\tconst eventSize = currentEvent\n\t\t\t\t? new TextEncoder().encode(currentEvent.message).length +\n\t\t\t\t  AWS_CLOUDWATCH_BASE_BUFFER_SIZE\n\t\t\t\t: 0;\n\t\t\tif (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {\n\t\t\t\tconst errString = `Log entry exceeds maximum size for CloudWatch logs. Log size: ${eventSize}. Truncating log message.`;\n\t\t\t\tlogger.warn(errString);\n\n\t\t\t\tcurrentEvent.message = currentEvent.message.substring(0, eventSize);\n\t\t\t}\n\n\t\t\tif (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE)\n\t\t\t\tbreak;\n\t\t\ttotalByteSize += eventSize;\n\t\t\tcurrentEventIdx++;\n\t\t}\n\n\t\tthis._currentLogBatch = this._dataTracker.logEvents.splice(\n\t\t\t0,\n\t\t\tcurrentEventIdx\n\t\t);\n\n\t\treturn this._currentLogBatch;\n\t}\n\n\tprivate async _getNewSequenceTokenAndSubmit(\n\t\tpayload: PutLogEventsCommandInput\n\t): Promise<PutLogEventsCommandOutput> {\n\t\ttry {\n\t\t\tthis._nextSequenceToken = undefined;\n\t\t\tthis._dataTracker.eventUploadInProgress = true;\n\n\t\t\tconst seqToken = await this._getNextSequenceToken();\n\t\t\tpayload.sequenceToken = seqToken;\n\t\t\tconst sendLogEventsRepsonse = await this._sendLogEvents(payload);\n\n\t\t\tthis._dataTracker.eventUploadInProgress = false;\n\t\t\tthis._currentLogBatch = [];\n\n\t\t\treturn sendLogEventsRepsonse;\n\t\t} catch (err) {\n\t\t\tlogger.error(\n\t\t\t\t`error when retrying log submission with new sequence token: ${err}`\n\t\t\t);\n\t\t\tthis._dataTracker.eventUploadInProgress = false;\n\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate _initiateLogPushInterval(): void {\n\t\tif (this._timer) {\n\t\t\tclearInterval(this._timer);\n\t\t}\n\n\t\tthis._timer = setInterval(async () => {\n\t\t\ttry {\n\t\t\t\tif (this._getDocUploadPermissibility()) {\n\t\t\t\t\tawait this._safeUploadLogEvents();\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error(\n\t\t\t\t\t`error when calling _safeUploadLogEvents in the timer interval - ${err}`\n\t\t\t\t);\n\t\t\t}\n\t\t}, 2000);\n\t}\n\n\tprivate _getDocUploadPermissibility(): boolean {\n\t\treturn (\n\t\t\t(this._dataTracker.logEvents.length !== 0 ||\n\t\t\t\tthis._currentLogBatch.length !== 0) &&\n\t\t\t!this._dataTracker.eventUploadInProgress\n\t\t);\n\t}\n}\n\nexport { AWSCloudWatchProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}