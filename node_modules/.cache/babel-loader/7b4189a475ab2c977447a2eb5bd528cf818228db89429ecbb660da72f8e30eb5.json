{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getHashedDataAsHex } from './dataHashHelpers';\nimport { getCanonicalRequest } from './getCanonicalRequest';\nimport { getSigningKey } from './getSigningKey';\nimport { getStringToSign } from './getStringToSign';\n/**\n * Calculates and returns an AWS API Signature.\n * https://docs.aws.amazon.com/IAM/latest/UserGuide/create-signed-request.html\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns AWS API Signature to sign a request or url with.\n *\n * @internal\n */\nexport var getSignature = function (request, _a) {\n  var credentialScope = _a.credentialScope,\n    longDate = _a.longDate,\n    secretAccessKey = _a.secretAccessKey,\n    shortDate = _a.shortDate,\n    signingRegion = _a.signingRegion,\n    signingService = _a.signingService;\n  // step 1: create a canonical request\n  var canonicalRequest = getCanonicalRequest(request);\n  // step 2: create a hash of the canonical request\n  var hashedRequest = getHashedDataAsHex(null, canonicalRequest);\n  // step 3: create a string to sign\n  var stringToSign = getStringToSign(longDate, credentialScope, hashedRequest);\n  // step 4: calculate the signature\n  var signature = getHashedDataAsHex(getSigningKey(secretAccessKey, shortDate, signingRegion, signingService), stringToSign);\n  return signature;\n};","map":{"version":3,"names":["getHashedDataAsHex","getCanonicalRequest","getSigningKey","getStringToSign","getSignature","request","_a","credentialScope","longDate","secretAccessKey","shortDate","signingRegion","signingService","canonicalRequest","hashedRequest","stringToSign","signature"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\utils\\getSignature.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HttpRequest } from '../../../../../types';\nimport { SigningValues } from '../types/signer';\nimport { getHashedDataAsHex } from './dataHashHelpers';\nimport { getCanonicalRequest } from './getCanonicalRequest';\nimport { getSigningKey } from './getSigningKey';\nimport { getStringToSign } from './getStringToSign';\n\n/**\n * Calculates and returns an AWS API Signature.\n * https://docs.aws.amazon.com/IAM/latest/UserGuide/create-signed-request.html\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns AWS API Signature to sign a request or url with.\n *\n * @internal\n */\nexport const getSignature = (\n\trequest: HttpRequest,\n\t{\n\t\tcredentialScope,\n\t\tlongDate,\n\t\tsecretAccessKey,\n\t\tshortDate,\n\t\tsigningRegion,\n\t\tsigningService,\n\t}: SigningValues\n): string => {\n\t// step 1: create a canonical request\n\tconst canonicalRequest = getCanonicalRequest(request);\n\n\t// step 2: create a hash of the canonical request\n\tconst hashedRequest = getHashedDataAsHex(null, canonicalRequest);\n\n\t// step 3: create a string to sign\n\tconst stringToSign = getStringToSign(\n\t\tlongDate,\n\t\tcredentialScope,\n\t\thashedRequest\n\t);\n\n\t// step 4: calculate the signature\n\tconst signature = getHashedDataAsHex(\n\t\tgetSigningKey(secretAccessKey, shortDate, signingRegion, signingService),\n\t\tstringToSign\n\t);\n\n\treturn signature;\n};\n"],"mappings":"AAAA;AACA;AAIA,SAASA,kBAAkB,QAAQ,mBAAmB;AACtD,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,eAAe,QAAQ,mBAAmB;AAEnD;;;;;;;;;;AAUA,OAAO,IAAMC,YAAY,GAAG,SAAAA,CAC3BC,OAAoB,EACpBC,EAOgB;MANfC,eAAA,GAAAD,EAAA,CAAAC,eAAe;IACfC,QAAA,GAAAF,EAAA,CAAAE,QAAQ;IACRC,eAAA,GAAAH,EAAA,CAAAG,eAAe;IACfC,SAAA,GAAAJ,EAAA,CAAAI,SAAS;IACTC,aAAA,GAAAL,EAAA,CAAAK,aAAa;IACbC,cAAA,GAAAN,EAAA,CAAAM,cAAc;EAGf;EACA,IAAMC,gBAAgB,GAAGZ,mBAAmB,CAACI,OAAO,CAAC;EAErD;EACA,IAAMS,aAAa,GAAGd,kBAAkB,CAAC,IAAI,EAAEa,gBAAgB,CAAC;EAEhE;EACA,IAAME,YAAY,GAAGZ,eAAe,CACnCK,QAAQ,EACRD,eAAe,EACfO,aAAa,CACb;EAED;EACA,IAAME,SAAS,GAAGhB,kBAAkB,CACnCE,aAAa,CAACO,eAAe,EAAEC,SAAS,EAAEC,aAAa,EAAEC,cAAc,CAAC,EACxEG,YAAY,CACZ;EAED,OAAOC,SAAS;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}