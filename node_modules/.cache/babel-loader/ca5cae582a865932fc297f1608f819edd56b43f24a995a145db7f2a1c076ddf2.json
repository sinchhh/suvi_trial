{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { ClientDevice, Credentials, getAmplifyUserAgent, StorageHelper, transferKeyToUpperCase } from '@aws-amplify/core';\nimport { Cache } from '@aws-amplify/cache';\nimport { UpdateEndpointCommand, PinpointClient, PutEventsCommand } from '@aws-sdk/client-pinpoint';\nimport { v4 as uuid } from 'uuid';\nvar AWSPinpointProviderCommon = /** @class */function () {\n  function AWSPinpointProviderCommon(logger) {\n    var _this = this;\n    var _a;\n    this.config = {};\n    this.endpointInitialized = false;\n    this.initialized = false;\n    this.identifyUser = function (userId, userInfo) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var err_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!!this.initialized) return [3 /*break*/, 2];\n              return [4 /*yield*/, this.init()];\n            case 1:\n              _a.sent();\n              _a.label = 2;\n            case 2:\n              _a.trys.push([2, 4,, 5]);\n              return [4 /*yield*/, this.updateEndpoint(userId, userInfo)];\n            case 3:\n              _a.sent();\n              return [3 /*break*/, 5];\n            case 4:\n              err_1 = _a.sent();\n              this.logger.error('Error identifying user', err_1);\n              throw err_1;\n            case 5:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    this.init = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, endpointId, storage, providerName, _b, err_2;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              _a = this.config, endpointId = _a.endpointId, storage = _a.storage;\n              providerName = this.getProviderName();\n              _c.label = 1;\n            case 1:\n              _c.trys.push([1, 6,, 7]);\n              if (!(typeof storage.sync === 'function')) return [3 /*break*/, 3];\n              return [4 /*yield*/, storage.sync()];\n            case 2:\n              _c.sent();\n              _c.label = 3;\n            case 3:\n              if (!!endpointId) return [3 /*break*/, 5];\n              _b = this.config;\n              return [4 /*yield*/, this.getEndpointId()];\n            case 4:\n              _b.endpointId = _c.sent();\n              _c.label = 5;\n            case 5:\n              this.initialized = true;\n              return [3 /*break*/, 7];\n            case 6:\n              err_2 = _c.sent();\n              this.logger.error(\"Failed to initialize \" + providerName, err_2);\n              return [3 /*break*/, 7];\n            case 7:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    this.recordAnalyticsEvent = function (event) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, appId, credentials, endpointId, pinpointClient, currentCredentials, credentialsUpdated, input, command, err_3;\n        var _b, _c;\n        return __generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              _a = this.config, appId = _a.appId, credentials = _a.credentials, endpointId = _a.endpointId, pinpointClient = _a.pinpointClient;\n              return [4 /*yield*/, this.getCredentials()];\n            case 1:\n              currentCredentials = _d.sent();\n              credentialsUpdated = !credentials || Object.keys(currentCredentials).some(function (key) {\n                return currentCredentials[key] !== credentials[key];\n              });\n              // Update credentials\n              this.config.credentials = currentCredentials;\n              _d.label = 2;\n            case 2:\n              _d.trys.push([2, 6,, 7]);\n              if (!(!pinpointClient || credentialsUpdated)) return [3 /*break*/, 4];\n              return [4 /*yield*/, this.initPinpointClient()];\n            case 3:\n              _d.sent();\n              _d.label = 4;\n            case 4:\n              input = {\n                ApplicationId: appId,\n                EventsRequest: {\n                  BatchItem: (_b = {}, _b[endpointId] = {\n                    Endpoint: {},\n                    Events: (_c = {}, _c[uuid()] = event, _c)\n                  }, _b)\n                }\n              };\n              command = new PutEventsCommand(input);\n              this.logger.debug('recording analytics event');\n              return [4 /*yield*/, this.config.pinpointClient.send(command)];\n            case 5:\n              _d.sent();\n              return [3 /*break*/, 7];\n            case 6:\n              err_3 = _d.sent();\n              this.logger.error('Error recording analytics event', err_3);\n              throw err_3;\n            case 7:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    this.updateEndpoint = function (userId, userInfo) {\n      if (userId === void 0) {\n        userId = null;\n      }\n      if (userInfo === void 0) {\n        userInfo = null;\n      }\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, appId, credentials, endpointId, _b, endpointInfo, pinpointClient, currentCredentials, credentialsUpdated, _c, address, attributes, demographic, location_1, metrics, optOut, _d, appVersion, make, model, platform, version, input, command, err_4;\n        var _e;\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              _a = this.config, appId = _a.appId, credentials = _a.credentials, endpointId = _a.endpointId, _b = _a.endpointInfo, endpointInfo = _b === void 0 ? {} : _b, pinpointClient = _a.pinpointClient;\n              return [4 /*yield*/, this.getCredentials()];\n            case 1:\n              currentCredentials = _f.sent();\n              credentialsUpdated = !credentials || Object.keys(currentCredentials).some(function (key) {\n                return currentCredentials[key] !== credentials[key];\n              });\n              // If endpoint is already initialized, and nothing else is changing, just early return\n              if (this.endpointInitialized && !credentialsUpdated && !userId && !userInfo) {\n                return [2 /*return*/];\n              }\n              // Update credentials\n              this.config.credentials = currentCredentials;\n              _f.label = 2;\n            case 2:\n              _f.trys.push([2, 4,, 5]);\n              // Initialize a new pinpoint client if one isn't already configured or if credentials changed\n              if (!pinpointClient || credentialsUpdated) {\n                this.initPinpointClient();\n              }\n              _c = userInfo !== null && userInfo !== void 0 ? userInfo : {}, address = _c.address, attributes = _c.attributes, demographic = _c.demographic, location_1 = _c.location, metrics = _c.metrics, optOut = _c.optOut;\n              _d = this.clientInfo, appVersion = _d.appVersion, make = _d.make, model = _d.model, platform = _d.platform, version = _d.version;\n              input = {\n                ApplicationId: appId,\n                EndpointId: endpointId,\n                EndpointRequest: {\n                  RequestId: uuid(),\n                  EffectiveDate: new Date().toISOString(),\n                  ChannelType: endpointInfo.channelType,\n                  Address: address !== null && address !== void 0 ? address : endpointInfo.address,\n                  Attributes: __assign(__assign({}, endpointInfo.attributes), attributes),\n                  Demographic: __assign({\n                    AppVersion: appVersion,\n                    Make: make,\n                    Model: model,\n                    ModelVersion: version,\n                    Platform: platform\n                  }, transferKeyToUpperCase(__assign(__assign({}, endpointInfo.demographic), demographic))),\n                  Location: transferKeyToUpperCase(__assign(__assign({}, endpointInfo.location), location_1)),\n                  Metrics: __assign(__assign({}, endpointInfo.metrics), metrics),\n                  OptOut: optOut !== null && optOut !== void 0 ? optOut : endpointInfo.optOut,\n                  User: {\n                    UserId: (_e = userId !== null && userId !== void 0 ? userId : endpointInfo.userId) !== null && _e !== void 0 ? _e : currentCredentials.identityId,\n                    UserAttributes: attributes !== null && attributes !== void 0 ? attributes : endpointInfo.userAttributes\n                  }\n                }\n              };\n              command = new UpdateEndpointCommand(input);\n              this.logger.debug('updating endpoint');\n              return [4 /*yield*/, this.config.pinpointClient.send(command)];\n            case 3:\n              _f.sent();\n              this.endpointInitialized = true;\n              return [3 /*break*/, 5];\n            case 4:\n              err_4 = _f.sent();\n              throw err_4;\n            case 5:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    this.initPinpointClient = function () {\n      var _a = _this.config,\n        appId = _a.appId,\n        credentials = _a.credentials,\n        pinpointClient = _a.pinpointClient,\n        region = _a.region;\n      if (!appId || !credentials || !region) {\n        throw new Error('One or more of credentials, appId or region is not configured');\n      }\n      if (pinpointClient) {\n        pinpointClient.destroy();\n      }\n      _this.config.pinpointClient = new PinpointClient({\n        region: region,\n        credentials: credentials,\n        customUserAgent: getAmplifyUserAgent(\"/\" + _this.getSubCategory())\n      });\n    };\n    this.getEndpointId = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var appId, cacheKey, cachedEndpointId, endpointId, ttl, expiration;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              appId = this.config.appId;\n              cacheKey = this.getSubCategory() === 'PushNotification' ? this.getProviderName() + \"_\" + appId : this.getSubCategory() + \":\" + this.getProviderName() + \":\" + appId;\n              return [4 /*yield*/, Cache.getItem(cacheKey)];\n            case 1:\n              cachedEndpointId = _a.sent();\n              // Found in cache, just return it\n              if (cachedEndpointId) {\n                return [2 /*return*/, cachedEndpointId];\n              }\n              endpointId = uuid();\n              ttl = 1000 * 60 * 60 * 24 * 365 * 100;\n              expiration = new Date().getTime() + ttl;\n              Cache.setItem(cacheKey, endpointId, {\n                expires: expiration,\n                priority: 1\n              });\n              return [2 /*return*/, endpointId];\n          }\n        });\n      });\n    };\n    this.getCredentials = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, err_5;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n              return [4 /*yield*/, Credentials.get()];\n            case 1:\n              credentials = _a.sent();\n              if (!credentials) {\n                this.logger.debug('no credentials found');\n                return [2 /*return*/, null];\n              }\n              return [2 /*return*/, Credentials.shear(credentials)];\n            case 2:\n              err_5 = _a.sent();\n              this.logger.error('Error getting credentials:', err_5);\n              return [2 /*return*/, null];\n            case 3:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    this.config = {\n      storage: new StorageHelper().getStorage()\n    };\n    this.clientInfo = (_a = ClientDevice.clientInfo()) !== null && _a !== void 0 ? _a : {};\n    this.logger = logger;\n  }\n  /**\n   * get the category of the plugin\n   */\n  AWSPinpointProviderCommon.prototype.getCategory = function () {\n    return AWSPinpointProviderCommon.category;\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AWSPinpointProviderCommon.prototype.getProviderName = function () {\n    return AWSPinpointProviderCommon.providerName;\n  };\n  AWSPinpointProviderCommon.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n    this.config = __assign(__assign({}, this.config), config);\n    this.logger.debug(\"configure \" + this.getProviderName() + this.getSubCategory() + \"Provider\", this.config);\n    return this.config;\n  };\n  AWSPinpointProviderCommon.category = 'Notifications';\n  AWSPinpointProviderCommon.providerName = 'AWSPinpoint';\n  return AWSPinpointProviderCommon;\n}();\nexport default AWSPinpointProviderCommon;","map":{"version":3,"names":["ClientDevice","Credentials","getAmplifyUserAgent","StorageHelper","transferKeyToUpperCase","Cache","UpdateEndpointCommand","PinpointClient","PutEventsCommand","v4","uuid","AWSPinpointProviderCommon","logger","_this","config","endpointInitialized","initialized","identifyUser","userId","userInfo","__awaiter","init","_a","sent","updateEndpoint","error","err_1","endpointId","storage","providerName","getProviderName","sync","_c","_b","getEndpointId","err_2","recordAnalyticsEvent","event","appId","credentials","pinpointClient","getCredentials","currentCredentials","_d","credentialsUpdated","Object","keys","some","key","initPinpointClient","input","ApplicationId","EventsRequest","BatchItem","Endpoint","Events","command","debug","send","err_3","endpointInfo","_f","address","attributes","demographic","location_1","location","metrics","optOut","clientInfo","appVersion","make","model","platform","version","EndpointId","EndpointRequest","RequestId","EffectiveDate","Date","toISOString","ChannelType","channelType","Address","Attributes","__assign","Demographic","AppVersion","Make","Model","ModelVersion","Platform","Location","Metrics","OptOut","User","UserId","_e","identityId","UserAttributes","userAttributes","err_4","region","Error","destroy","customUserAgent","getSubCategory","cacheKey","getItem","cachedEndpointId","ttl","expiration","getTime","setItem","expires","priority","get","shear","err_5","getStorage","prototype","getCategory","category","configure"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\notifications\\src\\common\\AWSPinpointProviderCommon\\index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n\tClientDevice,\n\tConsoleLogger,\n\tCredentials,\n\tgetAmplifyUserAgent,\n\tStorageHelper,\n\ttransferKeyToUpperCase,\n} from '@aws-amplify/core';\nimport { Cache } from '@aws-amplify/cache';\nimport {\n\tEvent as AWSPinpointAnalyticsEvent,\n\tUpdateEndpointCommand,\n\tUpdateEndpointCommandInput,\n\tPinpointClient,\n\tPutEventsCommand,\n\tPutEventsCommandInput,\n} from '@aws-sdk/client-pinpoint';\nimport { v4 as uuid } from 'uuid';\n\nimport {\n\tNotificationsCategory,\n\tNotificationsSubCategory,\n\tNotificationsProvider,\n\tUserInfo,\n} from '../../types';\nimport { AWSPinpointUserInfo } from './types';\n\nexport default abstract class AWSPinpointProviderCommon\n\timplements NotificationsProvider\n{\n\tstatic category: NotificationsCategory = 'Notifications';\n\tstatic providerName = 'AWSPinpoint';\n\n\tprotected clientInfo;\n\tprotected config: Record<string, any> = {};\n\tprotected endpointInitialized = false;\n\tprotected initialized = false;\n\tprotected logger: ConsoleLogger;\n\n\tconstructor(logger) {\n\t\tthis.config = { storage: new StorageHelper().getStorage() };\n\t\tthis.clientInfo = ClientDevice.clientInfo() ?? {};\n\t\tthis.logger = logger;\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tgetCategory() {\n\t\treturn AWSPinpointProviderCommon.category;\n\t}\n\n\t/**\n\t * get the sub-category of the plugin\n\t */\n\tabstract getSubCategory(): NotificationsSubCategory;\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tgetProviderName(): string {\n\t\treturn AWSPinpointProviderCommon.providerName;\n\t}\n\n\tconfigure(config = {}): Record<string, any> {\n\t\tthis.config = { ...this.config, ...config };\n\t\tthis.logger.debug(\n\t\t\t`configure ${this.getProviderName()}${this.getSubCategory()}Provider`,\n\t\t\tthis.config\n\t\t);\n\t\treturn this.config;\n\t}\n\n\tidentifyUser = async (userId: string, userInfo: UserInfo): Promise<void> => {\n\t\tif (!this.initialized) {\n\t\t\tawait this.init();\n\t\t}\n\t\ttry {\n\t\t\tawait this.updateEndpoint(userId, userInfo);\n\t\t} catch (err) {\n\t\t\tthis.logger.error('Error identifying user', err);\n\t\t\tthrow err;\n\t\t}\n\t};\n\n\tprotected init = async (): Promise<void> => {\n\t\tconst { endpointId, storage } = this.config;\n\t\tconst providerName = this.getProviderName();\n\t\ttry {\n\t\t\t// Only run sync() if it's available (i.e. React Native)\n\t\t\tif (typeof storage.sync === 'function') {\n\t\t\t\tawait storage.sync();\n\t\t\t}\n\t\t\t// If an endpoint was not provided via configuration, try to get it from cache\n\t\t\tif (!endpointId) {\n\t\t\t\tthis.config.endpointId = await this.getEndpointId();\n\t\t\t}\n\t\t\tthis.initialized = true;\n\t\t} catch (err) {\n\t\t\tthis.logger.error(`Failed to initialize ${providerName}`, err);\n\t\t}\n\t};\n\n\tprotected recordAnalyticsEvent = async (\n\t\tevent: AWSPinpointAnalyticsEvent\n\t): Promise<void> => {\n\t\tconst { appId, credentials, endpointId, pinpointClient } = this.config;\n\t\tconst currentCredentials = await this.getCredentials();\n\t\t// Shallow compare to determine if credentials stored here are outdated\n\t\tconst credentialsUpdated =\n\t\t\t!credentials ||\n\t\t\tObject.keys(currentCredentials).some(\n\t\t\t\tkey => currentCredentials[key] !== credentials[key]\n\t\t\t);\n\t\t// Update credentials\n\t\tthis.config.credentials = currentCredentials;\n\t\ttry {\n\t\t\t// Initialize a new pinpoint client if one isn't already configured or if credentials changed\n\t\t\tif (!pinpointClient || credentialsUpdated) {\n\t\t\t\tawait this.initPinpointClient();\n\t\t\t}\n\t\t\t// Create the PutEvents input\n\t\t\tconst input: PutEventsCommandInput = {\n\t\t\t\tApplicationId: appId,\n\t\t\t\tEventsRequest: {\n\t\t\t\t\tBatchItem: {\n\t\t\t\t\t\t[endpointId]: {\n\t\t\t\t\t\t\tEndpoint: {},\n\t\t\t\t\t\t\tEvents: {\n\t\t\t\t\t\t\t\t[uuid()]: event,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst command: PutEventsCommand = new PutEventsCommand(input);\n\t\t\tthis.logger.debug('recording analytics event');\n\t\t\tawait this.config.pinpointClient.send(command);\n\t\t} catch (err) {\n\t\t\tthis.logger.error('Error recording analytics event', err);\n\t\t\tthrow err;\n\t\t}\n\t};\n\n\tprotected updateEndpoint = async (\n\t\tuserId: string = null,\n\t\tuserInfo: AWSPinpointUserInfo = null\n\t): Promise<void> => {\n\t\tconst {\n\t\t\tappId,\n\t\t\tcredentials,\n\t\t\tendpointId,\n\t\t\tendpointInfo = {},\n\t\t\tpinpointClient,\n\t\t} = this.config;\n\t\tconst currentCredentials = await this.getCredentials();\n\t\t// Shallow compare to determine if credentials stored here are outdated\n\t\tconst credentialsUpdated =\n\t\t\t!credentials ||\n\t\t\tObject.keys(currentCredentials).some(\n\t\t\t\tkey => currentCredentials[key] !== credentials[key]\n\t\t\t);\n\t\t// If endpoint is already initialized, and nothing else is changing, just early return\n\t\tif (\n\t\t\tthis.endpointInitialized &&\n\t\t\t!credentialsUpdated &&\n\t\t\t!userId &&\n\t\t\t!userInfo\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\t// Update credentials\n\t\tthis.config.credentials = currentCredentials;\n\t\ttry {\n\t\t\t// Initialize a new pinpoint client if one isn't already configured or if credentials changed\n\t\t\tif (!pinpointClient || credentialsUpdated) {\n\t\t\t\tthis.initPinpointClient();\n\t\t\t}\n\t\t\tconst { address, attributes, demographic, location, metrics, optOut } =\n\t\t\t\tuserInfo ?? {};\n\t\t\tconst { appVersion, make, model, platform, version } = this.clientInfo;\n\t\t\t// Create the UpdateEndpoint input, prioritizing passed in user info and falling back to\n\t\t\t// defaults (if any) obtained from the config\n\t\t\tconst input: UpdateEndpointCommandInput = {\n\t\t\t\tApplicationId: appId,\n\t\t\t\tEndpointId: endpointId,\n\t\t\t\tEndpointRequest: {\n\t\t\t\t\tRequestId: uuid(),\n\t\t\t\t\tEffectiveDate: new Date().toISOString(),\n\t\t\t\t\tChannelType: endpointInfo.channelType,\n\t\t\t\t\tAddress: address ?? endpointInfo.address,\n\t\t\t\t\tAttributes: {\n\t\t\t\t\t\t...endpointInfo.attributes,\n\t\t\t\t\t\t...attributes,\n\t\t\t\t\t},\n\t\t\t\t\tDemographic: {\n\t\t\t\t\t\tAppVersion: appVersion,\n\t\t\t\t\t\tMake: make,\n\t\t\t\t\t\tModel: model,\n\t\t\t\t\t\tModelVersion: version,\n\t\t\t\t\t\tPlatform: platform,\n\t\t\t\t\t\t...transferKeyToUpperCase({\n\t\t\t\t\t\t\t...endpointInfo.demographic,\n\t\t\t\t\t\t\t...demographic,\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t\tLocation: transferKeyToUpperCase({\n\t\t\t\t\t\t...endpointInfo.location,\n\t\t\t\t\t\t...location,\n\t\t\t\t\t}),\n\t\t\t\t\tMetrics: {\n\t\t\t\t\t\t...endpointInfo.metrics,\n\t\t\t\t\t\t...metrics,\n\t\t\t\t\t},\n\t\t\t\t\tOptOut: optOut ?? endpointInfo.optOut,\n\t\t\t\t\tUser: {\n\t\t\t\t\t\tUserId:\n\t\t\t\t\t\t\tuserId ?? endpointInfo.userId ?? currentCredentials.identityId,\n\t\t\t\t\t\tUserAttributes: attributes ?? endpointInfo.userAttributes,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst command: UpdateEndpointCommand = new UpdateEndpointCommand(input);\n\t\t\tthis.logger.debug('updating endpoint');\n\t\t\tawait this.config.pinpointClient.send(command);\n\t\t\tthis.endpointInitialized = true;\n\t\t} catch (err) {\n\t\t\tthrow err;\n\t\t}\n\t};\n\n\tprivate initPinpointClient = (): void => {\n\t\tconst { appId, credentials, pinpointClient, region } = this.config;\n\n\t\tif (!appId || !credentials || !region) {\n\t\t\tthrow new Error(\n\t\t\t\t'One or more of credentials, appId or region is not configured'\n\t\t\t);\n\t\t}\n\n\t\tif (pinpointClient) {\n\t\t\tpinpointClient.destroy();\n\t\t}\n\n\t\tthis.config.pinpointClient = new PinpointClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(`/${this.getSubCategory()}`),\n\t\t});\n\t};\n\n\tprivate getEndpointId = async (): Promise<string> => {\n\t\tconst { appId } = this.config;\n\t\t// Each Pinpoint channel requires its own Endpoint ID\n\t\t// However, Push will share the Analytics endpoint for now so as to not break existing customers\n\t\tconst cacheKey =\n\t\t\tthis.getSubCategory() === 'PushNotification'\n\t\t\t\t? `${this.getProviderName()}_${appId}`\n\t\t\t\t: `${this.getSubCategory()}:${this.getProviderName()}:${appId}`;\n\t\t// First attempt to retrieve the ID from cache\n\t\tconst cachedEndpointId = await Cache.getItem(cacheKey);\n\t\t// Found in cache, just return it\n\t\tif (cachedEndpointId) {\n\t\t\treturn cachedEndpointId;\n\t\t}\n\t\t// Otherwise, generate a new ID and store it in long-lived cache before returning it\n\t\tconst endpointId = uuid();\n\t\t// Set a longer TTL to avoid endpoint id being deleted after the default TTL (3 days)\n\t\t// Also set its priority to the highest to reduce its chance of being deleted when cache is full\n\t\tconst ttl = 1000 * 60 * 60 * 24 * 365 * 100; // 100 years\n\t\tconst expiration = new Date().getTime() + ttl;\n\t\tCache.setItem(cacheKey, endpointId, {\n\t\t\texpires: expiration,\n\t\t\tpriority: 1,\n\t\t});\n\t\treturn endpointId;\n\t};\n\n\tprivate getCredentials = async () => {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) {\n\t\t\t\tthis.logger.debug('no credentials found');\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn Credentials.shear(credentials);\n\t\t} catch (err) {\n\t\t\tthis.logger.error('Error getting credentials:', err);\n\t\t\treturn null;\n\t\t}\n\t};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}