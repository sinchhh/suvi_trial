{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// TODO: V6 update to different crypto dependency?\nimport { Sha256 } from '@aws-crypto/sha256-js';\nimport { toHex } from '@aws-sdk/util-hex-encoding';\n/**\n * Returns the hashed data a `Uint8Array`.\n *\n * @param key `SourceData` to be used as hashing key.\n * @param data Hashable `SourceData`.\n * @returns `Uint8Array` created from the data as input to a hash function.\n */\nexport var getHashedData = function (key, data) {\n  var sha256 = new Sha256(key);\n  sha256.update(data);\n  // TODO: V6 flip to async digest\n  var hashedData = sha256.digestSync();\n  return hashedData;\n};\n/**\n * Returns the hashed data as a hex string.\n *\n * @param key `SourceData` to be used as hashing key.\n * @param data Hashable `SourceData`.\n * @returns String using lowercase hexadecimal characters created from the data as input to a hash function.\n *\n * @internal\n */\nexport var getHashedDataAsHex = function (key, data) {\n  var hashedData = getHashedData(key, data);\n  return toHex(hashedData);\n};","map":{"version":3,"names":["Sha256","toHex","getHashedData","key","data","sha256","update","hashedData","digestSync","getHashedDataAsHex"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\utils\\dataHashHelpers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n// TODO: V6 update to different crypto dependency?\nimport { Sha256 } from '@aws-crypto/sha256-js';\nimport { SourceData } from '@aws-sdk/types';\nimport { toHex } from '@aws-sdk/util-hex-encoding';\n\n/**\n * Returns the hashed data a `Uint8Array`.\n *\n * @param key `SourceData` to be used as hashing key.\n * @param data Hashable `SourceData`.\n * @returns `Uint8Array` created from the data as input to a hash function.\n */\nexport const getHashedData = (\n\tkey: SourceData | null,\n\tdata: SourceData\n): Uint8Array => {\n\tconst sha256 = new Sha256(key);\n\tsha256.update(data);\n\t// TODO: V6 flip to async digest\n\tconst hashedData = sha256.digestSync();\n\treturn hashedData;\n};\n\n/**\n * Returns the hashed data as a hex string.\n *\n * @param key `SourceData` to be used as hashing key.\n * @param data Hashable `SourceData`.\n * @returns String using lowercase hexadecimal characters created from the data as input to a hash function.\n *\n * @internal\n */\nexport const getHashedDataAsHex = (\n\tkey: SourceData | null,\n\tdata: SourceData\n): string => {\n\tconst hashedData = getHashedData(key, data);\n\treturn toHex(hashedData);\n};\n"],"mappings":"AAAA;AACA;AAEA;AACA,SAASA,MAAM,QAAQ,uBAAuB;AAE9C,SAASC,KAAK,QAAQ,4BAA4B;AAElD;;;;;;;AAOA,OAAO,IAAMC,aAAa,GAAG,SAAAA,CAC5BC,GAAsB,EACtBC,IAAgB;EAEhB,IAAMC,MAAM,GAAG,IAAIL,MAAM,CAACG,GAAG,CAAC;EAC9BE,MAAM,CAACC,MAAM,CAACF,IAAI,CAAC;EACnB;EACA,IAAMG,UAAU,GAAGF,MAAM,CAACG,UAAU,EAAE;EACtC,OAAOD,UAAU;AAClB,CAAC;AAED;;;;;;;;;AASA,OAAO,IAAME,kBAAkB,GAAG,SAAAA,CACjCN,GAAsB,EACtBC,IAAgB;EAEhB,IAAMG,UAAU,GAAGL,aAAa,CAACC,GAAG,EAAEC,IAAI,CAAC;EAC3C,OAAOH,KAAK,CAACM,UAAU,CAAC;AACzB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}