{"ast":null,"code":"import { __awaiter, __extends, __generator, __values } from \"tslib\";\n/**\n * @private For internal Amplify use.\n *\n * Creates a new scope for promises, observables, and other types of work or\n * processes that may be running in the background. This manager provides\n * an singular entrypoint to request termination and await completion.\n *\n * As work completes on its own prior to close, the manager removes them\n * from the registry to avoid holding references to completed jobs.\n */\nvar BackgroundProcessManager = /** @class */function () {\n  /**\n   * Creates a new manager for promises, observables, and other types\n   * of work that may be running in the background. This manager provides\n   * a centralized mechanism to request termination and await completion.\n   */\n  function BackgroundProcessManager() {\n    /**\n     * A string indicating whether the manager is accepting new work (\"Open\"),\n     * waiting for work to complete (\"Closing\"), or fully done with all\n     * submitted work and *not* accepting new jobs (\"Closed\").\n     */\n    this._state = BackgroundProcessManagerState.Open;\n    /**\n     * The list of outstanding jobs we'll need to wait for upon `close()`\n     */\n    this.jobs = new Set();\n  }\n  BackgroundProcessManager.prototype.add = function (jobOrDescription, optionalDescription) {\n    var job;\n    var description;\n    if (typeof jobOrDescription === 'string') {\n      job = undefined;\n      description = jobOrDescription;\n    } else {\n      job = jobOrDescription;\n      description = optionalDescription;\n    }\n    var error = this.closedFailure(description);\n    if (error) return error;\n    if (job === undefined) {\n      return this.addHook(description);\n    } else if (typeof job === 'function') {\n      return this.addFunction(job, description);\n    } else if (job instanceof BackgroundProcessManager) {\n      return this.addManager(job, description);\n    } else {\n      throw new Error('If `job` is provided, it must be an Observable, Function, or BackgroundProcessManager.');\n    }\n  };\n  /**\n   * Adds a **cleaner** function that doesn't immediately get executed.\n   * Instead, the caller gets a **terminate** function back. The *cleaner* is\n   * invoked only once the mananger *closes* or the returned **terminate**\n   * function is called.\n   *\n   * @param clean The cleanup function.\n   * @param description Optional description to help identify pending jobs.\n   * @returns A terminate function.\n   */\n  BackgroundProcessManager.prototype.addCleaner = function (clean, description) {\n    var _this = this;\n    var _a = this.addHook(description),\n      resolve = _a.resolve,\n      onTerminate = _a.onTerminate;\n    var proxy = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, clean()];\n            case 1:\n              _a.sent();\n              resolve();\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    onTerminate.then(proxy);\n    return proxy;\n  };\n  BackgroundProcessManager.prototype.addFunction = function (job, description) {\n    // the function we call when we want to try to terminate this job.\n    var terminate;\n    // the promise the job can opt into listening to for termination.\n    var onTerminate = new Promise(function (resolve) {\n      terminate = resolve;\n    });\n    // finally! start the job.\n    var jobResult = job(onTerminate);\n    // depending on what the job gives back, register the result\n    // so we can monitor for completion.\n    if (typeof (jobResult === null || jobResult === void 0 ? void 0 : jobResult.then) === 'function') {\n      this.registerPromise(jobResult, terminate, description);\n    }\n    // At the end of the day, or you know, method call, it doesn't matter\n    // what the return value is at all; we just pass it through to the\n    // caller.\n    return jobResult;\n  };\n  BackgroundProcessManager.prototype.addManager = function (manager, description) {\n    var _this = this;\n    this.addCleaner(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, manager.close()];\n            case 1:\n              return [2 /*return*/, _a.sent()];\n          }\n        });\n      });\n    }, description);\n  };\n  /**\n   * Creates and registers a fabricated job for processes that need to operate\n   * with callbacks/hooks. The returned `resolve` and `reject`\n   * functions can be used to signal the job is done successfully or not.\n   * The returned `onTerminate` is a promise that will resolve when the\n   * manager is requesting the termination of the job.\n   *\n   * @param description Optional description to help identify pending jobs.\n   * @returns `{ resolve, reject, onTerminate }`\n   */\n  BackgroundProcessManager.prototype.addHook = function (description) {\n    // the resolve/reject functions we'll provide to the caller to signal\n    // the state of the job.\n    var resolve;\n    var reject;\n    // the underlying promise we'll use to manage it, pretty much like\n    // any other promise.\n    var promise = new Promise(function (res, rej) {\n      resolve = res;\n      reject = rej;\n    });\n    // the function we call when we want to try to terminate this job.\n    var terminate;\n    // the promise the job can opt into listening to for termination.\n    var onTerminate = new Promise(function (resolveTerminate) {\n      terminate = resolveTerminate;\n    });\n    this.registerPromise(promise, terminate, description);\n    return {\n      resolve: resolve,\n      reject: reject,\n      onTerminate: onTerminate\n    };\n  };\n  /**\n   * Adds a Promise based job to the list of jobs for monitoring and listens\n   * for either a success or failure, upon which the job is considered \"done\"\n   * and removed from the registry.\n   *\n   * @param promise A promise that is on its way to being returned to a\n   * caller, which needs to be tracked as a background job.\n   * @param terminate The termination function to register, which can be\n   * invoked to request the job stop.\n   * @param description Optional description to help identify pending jobs.\n   */\n  BackgroundProcessManager.prototype.registerPromise = function (promise, terminate, description) {\n    var _this = this;\n    var jobEntry = {\n      promise: promise,\n      terminate: terminate,\n      description: description\n    };\n    this.jobs.add(jobEntry);\n    // in all of my testing, it is safe to multi-subscribe to a promise.\n    // so, rather than create another layer of promising, we're just going\n    // to hook into the promise we already have, and when it's done\n    // (successfully or not), we no longer need to wait for it upon close.\n    //\n    // sorry this is a bit hand-wavy:\n    //\n    // i believe we use `.then` and `.catch` instead of `.finally` because\n    // `.finally` is invoked in a different order in the sequence, and this\n    // breaks assumptions throughout and causes failures.\n    promise.then(function () {\n      _this.jobs.delete(jobEntry);\n    }).catch(function () {\n      _this.jobs.delete(jobEntry);\n    });\n  };\n  Object.defineProperty(BackgroundProcessManager.prototype, \"length\", {\n    /**\n     * The number of jobs being waited on.\n     *\n     * We don't use this for anything. It's just informational for the caller,\n     * and can be used in logging and testing.\n     *\n     * @returns the number of jobs.\n     */\n    get: function () {\n      return this.jobs.size;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"state\", {\n    /**\n     * The execution state of the manager. One of:\n     *\n     * 1. \"Open\" -> Accepting new jobs\n     * 1. \"Closing\" -> Not accepting new work. Waiting for jobs to complete.\n     * 1. \"Closed\" -> Not accepting new work. All submitted jobs are complete.\n     */\n    get: function () {\n      return this._state;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"pending\", {\n    /**\n     * The registered `description` of all still-pending jobs.\n     *\n     * @returns descriptions as an array.\n     */\n    get: function () {\n      return Array.from(this.jobs).map(function (job) {\n        return job.description;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"isOpen\", {\n    /**\n     * Whether the manager is accepting new jobs.\n     */\n    get: function () {\n      return this._state === BackgroundProcessManagerState.Open;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"isClosing\", {\n    /**\n     * Whether the manager is rejecting new work, but still waiting for\n     * submitted work to complete.\n     */\n    get: function () {\n      return this._state === BackgroundProcessManagerState.Closing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"isClosed\", {\n    /**\n     * Whether the manager is rejecting work and done waiting for submitted\n     * work to complete.\n     */\n    get: function () {\n      return this._state === BackgroundProcessManagerState.Closed;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  BackgroundProcessManager.prototype.closedFailure = function (description) {\n    if (!this.isOpen) {\n      return Promise.reject(new BackgroundManagerNotOpenError([\"The manager is \" + this.state + \".\", \"You tried to add \\\"\" + description + \"\\\".\", \"Pending jobs: [\\n\" + this.pending.map(function (t) {\n        return '    ' + t;\n      }).join(',\\n') + \"\\n]\"].join('\\n')));\n    }\n  };\n  /**\n   * Signals jobs to stop (for those that accept interruptions) and waits\n   * for confirmation that jobs have stopped.\n   *\n   * This immediately puts the manager into a closing state and just begins\n   * to reject new work. After all work in the manager is complete, the\n   * manager goes into a `Completed` state and `close()` returns.\n   *\n   * This call is idempotent.\n   *\n   * If the manager is already closing or closed, `finalCleaup` is not executed.\n   *\n   * @param onClosed\n   * @returns The settled results of each still-running job's promise. If the\n   * manager is already closed, this will contain the results as of when the\n   * manager's `close()` was called in an `Open` state.\n   */\n  BackgroundProcessManager.prototype.close = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, job;\n      var e_1, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (!this.isOpen) return [3 /*break*/, 2];\n            this._state = BackgroundProcessManagerState.Closing;\n            try {\n              for (_a = __values(Array.from(this.jobs)), _b = _a.next(); !_b.done; _b = _a.next()) {\n                job = _b.value;\n                try {\n                  job.terminate();\n                } catch (error) {\n                  // Due to potential races with a job's natural completion, it's\n                  // reasonable to expect the termination call to fail. Hence,\n                  // not logging as an error.\n                  console.warn(\"Failed to send termination signal to job. Error: \" + error.message, job);\n                }\n              }\n            } catch (e_1_1) {\n              e_1 = {\n                error: e_1_1\n              };\n            } finally {\n              try {\n                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n            }\n            // Use `allSettled()` because we want to wait for all to finish. We do\n            // not want to stop waiting if there is a failure.\n            this._closingPromise = Promise.allSettled(Array.from(this.jobs).map(function (j) {\n              return j.promise;\n            }));\n            return [4 /*yield*/, this._closingPromise];\n          case 1:\n            _d.sent();\n            this._state = BackgroundProcessManagerState.Closed;\n            _d.label = 2;\n          case 2:\n            return [2 /*return*/, this._closingPromise];\n        }\n      });\n    });\n  };\n  /**\n   * Signals the manager to start accepting work (again) and returns once\n   * the manager is ready to do so.\n   *\n   * If the state is already `Open`, this call is a no-op.\n   *\n   * If the state is `Closed`, this call simply updates state and returns.\n   *\n   * If the state is `Closing`, this call waits for completion before it\n   * updates the state and returns.\n   */\n  BackgroundProcessManager.prototype.open = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isClosing) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.close()];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            this._state = BackgroundProcessManagerState.Open;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return BackgroundProcessManager;\n}();\nexport { BackgroundProcessManager };\n/**\n *\n */\nvar BackgroundManagerNotOpenError = /** @class */function (_super) {\n  __extends(BackgroundManagerNotOpenError, _super);\n  function BackgroundManagerNotOpenError(message) {\n    return _super.call(this, \"BackgroundManagerNotOpenError: \" + message) || this;\n  }\n  return BackgroundManagerNotOpenError;\n}(Error);\nexport { BackgroundManagerNotOpenError };\n/**\n * All possible states a `BackgroundProcessManager` instance can be in.\n */\nexport var BackgroundProcessManagerState;\n(function (BackgroundProcessManagerState) {\n  /**\n   * Accepting new jobs.\n   */\n  BackgroundProcessManagerState[\"Open\"] = \"Open\";\n  /**\n   * Not accepting new jobs. Waiting for submitted jobs to complete.\n   */\n  BackgroundProcessManagerState[\"Closing\"] = \"Closing\";\n  /**\n   * Not accepting new jobs. All submitted jobs are complete.\n   */\n  BackgroundProcessManagerState[\"Closed\"] = \"Closed\";\n})(BackgroundProcessManagerState || (BackgroundProcessManagerState = {}));","map":{"version":3,"names":["BackgroundProcessManager","_state","BackgroundProcessManagerState","Open","jobs","Set","prototype","add","jobOrDescription","optionalDescription","job","description","undefined","error","closedFailure","addHook","addFunction","addManager","Error","addCleaner","clean","_this","_a","resolve","onTerminate","proxy","__awaiter","sent","then","terminate","Promise","jobResult","registerPromise","manager","__generator","close","reject","promise","res","rej","resolveTerminate","jobEntry","delete","catch","Object","defineProperty","get","size","Array","from","map","Closing","Closed","isOpen","BackgroundManagerNotOpenError","state","pending","t","join","__values","_b","next","done","value","console","warn","message","_closingPromise","allSettled","j","_d","open","isClosing","_super","__extends","call"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\core\\src\\Util\\BackgroundProcessManager.ts"],"sourcesContent":["/**\n * @private For internal Amplify use.\n *\n * Creates a new scope for promises, observables, and other types of work or\n * processes that may be running in the background. This manager provides\n * an singular entrypoint to request termination and await completion.\n *\n * As work completes on its own prior to close, the manager removes them\n * from the registry to avoid holding references to completed jobs.\n */\nexport class BackgroundProcessManager {\n\t/**\n\t * A string indicating whether the manager is accepting new work (\"Open\"),\n\t * waiting for work to complete (\"Closing\"), or fully done with all\n\t * submitted work and *not* accepting new jobs (\"Closed\").\n\t */\n\tprivate _state = BackgroundProcessManagerState.Open;\n\n\tprivate _closingPromise: Promise<PromiseSettledResult<any>[]> | undefined;\n\n\t/**\n\t * The list of outstanding jobs we'll need to wait for upon `close()`\n\t */\n\tprivate jobs = new Set<JobEntry>();\n\n\t/**\n\t * Creates a new manager for promises, observables, and other types\n\t * of work that may be running in the background. This manager provides\n\t * a centralized mechanism to request termination and await completion.\n\t */\n\tconstructor() {}\n\n\t/**\n\t * Executes an async `job` function, passing the return value through to\n\t * the caller, registering it as a running job in the manager. When the\n\t * manager *closes*, it will `await` the job.\n\t *\n\t * @param job The function to execute.\n\t * @param description Optional description to help identify pending jobs.\n\t * @returns The return value from the given function.\n\t */\n\tadd<T>(job: () => Promise<T>, description?: string): Promise<T>;\n\n\t/**\n\t * Executes an async `job` function, passing the return value through to\n\t * the caller, registering it as a running job in the manager. When the\n\t * manager *closes*, it will request termination by resolving the\n\t * provided `onTerminate` promise. It will then `await` the job, so it is\n\t * important that the job still `resolve()` or `reject()` when responding\n\t * to a termination request.\n\t *\n\t * @param job The function to execute.\n\t * @param description Optional description to help identify pending jobs.\n\t * @returns The return value from the given function.\n\t */\n\tadd<T>(\n\t\tjob: (onTerminate: Promise<void>) => Promise<T>,\n\t\tdescription?: string\n\t): Promise<T>;\n\n\t/**\n\t * Create a no-op job, registers it with the manager, and returns hooks\n\t * to the caller to signal the job's completion and respond to termination\n\t * requests.\n\t *\n\t * When the manager closes, the no-op job will be `await`-ed, so its\n\t * important to always `resolve()` or `reject()` when done responding to an\n\t * `onTerminate` signal.\n\t * @param description Optional description to help identify pending jobs.\n\t * @returns Job promise hooks + onTerminate signaling promise\n\t */\n\tadd(description?: string): {\n\t\tresolve: (value?: unknown) => void;\n\t\treject: (reason?: any) => void;\n\t\tonTerminate: Promise<void>;\n\t};\n\n\t/**\n\t * Adds another job manager to await on at the time of closing. the inner\n\t * manager's termination is signaled when this manager's `close()` is\n\t * called for.\n\t *\n\t * @param job The inner job manager to await.\n\t * @param description Optional description to help identify pending jobs.\n\t */\n\tadd(job: BackgroundProcessManager, description?: string);\n\n\tadd(jobOrDescription?, optionalDescription?) {\n\t\tlet job;\n\t\tlet description: string;\n\n\t\tif (typeof jobOrDescription === 'string') {\n\t\t\tjob = undefined;\n\t\t\tdescription = jobOrDescription;\n\t\t} else {\n\t\t\tjob = jobOrDescription;\n\t\t\tdescription = optionalDescription;\n\t\t}\n\n\t\tconst error = this.closedFailure(description);\n\t\tif (error) return error;\n\n\t\tif (job === undefined) {\n\t\t\treturn this.addHook(description);\n\t\t} else if (typeof job === 'function') {\n\t\t\treturn this.addFunction(job, description);\n\t\t} else if (job instanceof BackgroundProcessManager) {\n\t\t\treturn this.addManager(job, description);\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\t'If `job` is provided, it must be an Observable, Function, or BackgroundProcessManager.'\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a **cleaner** function that doesn't immediately get executed.\n\t * Instead, the caller gets a **terminate** function back. The *cleaner* is\n\t * invoked only once the mananger *closes* or the returned **terminate**\n\t * function is called.\n\t *\n\t * @param clean The cleanup function.\n\t * @param description Optional description to help identify pending jobs.\n\t * @returns A terminate function.\n\t */\n\taddCleaner<T>(\n\t\tclean: () => Promise<T>,\n\t\tdescription?: string\n\t): () => Promise<void> {\n\t\tconst { resolve, onTerminate } = this.addHook(description);\n\n\t\tconst proxy = async () => {\n\t\t\tawait clean();\n\t\t\tresolve();\n\t\t};\n\n\t\tonTerminate.then(proxy);\n\n\t\treturn proxy;\n\t}\n\n\tprivate addFunction<T>(\n\t\tjob: () => Promise<T>,\n\t\tdescription?: string\n\t): Promise<T>;\n\tprivate addFunction<T>(\n\t\tjob: (onTerminate: Promise<void>) => Promise<T>,\n\t\tdescription?: string\n\t): Promise<T>;\n\tprivate addFunction(job, description) {\n\t\t// the function we call when we want to try to terminate this job.\n\t\tlet terminate;\n\n\t\t// the promise the job can opt into listening to for termination.\n\t\tconst onTerminate = new Promise(resolve => {\n\t\t\tterminate = resolve;\n\t\t});\n\n\t\t// finally! start the job.\n\t\tconst jobResult = job(onTerminate);\n\n\t\t// depending on what the job gives back, register the result\n\t\t// so we can monitor for completion.\n\t\tif (typeof jobResult?.then === 'function') {\n\t\t\tthis.registerPromise(jobResult, terminate, description);\n\t\t}\n\n\t\t// At the end of the day, or you know, method call, it doesn't matter\n\t\t// what the return value is at all; we just pass it through to the\n\t\t// caller.\n\t\treturn jobResult;\n\t}\n\n\tprivate addManager(manager: BackgroundProcessManager, description?: string) {\n\t\tthis.addCleaner(async () => await manager.close(), description);\n\t}\n\n\t/**\n\t * Creates and registers a fabricated job for processes that need to operate\n\t * with callbacks/hooks. The returned `resolve` and `reject`\n\t * functions can be used to signal the job is done successfully or not.\n\t * The returned `onTerminate` is a promise that will resolve when the\n\t * manager is requesting the termination of the job.\n\t *\n\t * @param description Optional description to help identify pending jobs.\n\t * @returns `{ resolve, reject, onTerminate }`\n\t */\n\tprivate addHook(description?: string) {\n\t\t// the resolve/reject functions we'll provide to the caller to signal\n\t\t// the state of the job.\n\t\tlet resolve!: (value?: unknown) => void;\n\t\tlet reject!: (reason?: any) => void;\n\n\t\t// the underlying promise we'll use to manage it, pretty much like\n\t\t// any other promise.\n\t\tconst promise = new Promise((res, rej) => {\n\t\t\tresolve = res;\n\t\t\treject = rej;\n\t\t});\n\n\t\t// the function we call when we want to try to terminate this job.\n\t\tlet terminate;\n\n\t\t// the promise the job can opt into listening to for termination.\n\t\tconst onTerminate = new Promise(resolveTerminate => {\n\t\t\tterminate = resolveTerminate;\n\t\t});\n\n\t\tthis.registerPromise(promise, terminate, description);\n\n\t\treturn {\n\t\t\tresolve,\n\t\t\treject,\n\t\t\tonTerminate,\n\t\t};\n\t}\n\n\t/**\n\t * Adds a Promise based job to the list of jobs for monitoring and listens\n\t * for either a success or failure, upon which the job is considered \"done\"\n\t * and removed from the registry.\n\t *\n\t * @param promise A promise that is on its way to being returned to a\n\t * caller, which needs to be tracked as a background job.\n\t * @param terminate The termination function to register, which can be\n\t * invoked to request the job stop.\n\t * @param description Optional description to help identify pending jobs.\n\t */\n\tprivate registerPromise<T extends Promise<any>>(\n\t\tpromise: T,\n\t\tterminate: () => void,\n\t\tdescription?: string\n\t) {\n\t\tconst jobEntry = { promise, terminate, description };\n\t\tthis.jobs.add(jobEntry);\n\n\t\t// in all of my testing, it is safe to multi-subscribe to a promise.\n\t\t// so, rather than create another layer of promising, we're just going\n\t\t// to hook into the promise we already have, and when it's done\n\t\t// (successfully or not), we no longer need to wait for it upon close.\n\n\t\t//\n\t\t// sorry this is a bit hand-wavy:\n\t\t//\n\t\t// i believe we use `.then` and `.catch` instead of `.finally` because\n\t\t// `.finally` is invoked in a different order in the sequence, and this\n\t\t// breaks assumptions throughout and causes failures.\n\t\tpromise\n\t\t\t.then(() => {\n\t\t\t\tthis.jobs.delete(jobEntry);\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tthis.jobs.delete(jobEntry);\n\t\t\t});\n\t}\n\n\t/**\n\t * The number of jobs being waited on.\n\t *\n\t * We don't use this for anything. It's just informational for the caller,\n\t * and can be used in logging and testing.\n\t *\n\t * @returns the number of jobs.\n\t */\n\tget length() {\n\t\treturn this.jobs.size;\n\t}\n\n\t/**\n\t * The execution state of the manager. One of:\n\t *\n\t * 1. \"Open\" -> Accepting new jobs\n\t * 1. \"Closing\" -> Not accepting new work. Waiting for jobs to complete.\n\t * 1. \"Closed\" -> Not accepting new work. All submitted jobs are complete.\n\t */\n\tget state() {\n\t\treturn this._state;\n\t}\n\n\t/**\n\t * The registered `description` of all still-pending jobs.\n\t *\n\t * @returns descriptions as an array.\n\t */\n\tget pending() {\n\t\treturn Array.from(this.jobs).map(job => job.description);\n\t}\n\n\t/**\n\t * Whether the manager is accepting new jobs.\n\t */\n\tget isOpen() {\n\t\treturn this._state === BackgroundProcessManagerState.Open;\n\t}\n\n\t/**\n\t * Whether the manager is rejecting new work, but still waiting for\n\t * submitted work to complete.\n\t */\n\tget isClosing() {\n\t\treturn this._state === BackgroundProcessManagerState.Closing;\n\t}\n\n\t/**\n\t * Whether the manager is rejecting work and done waiting for submitted\n\t * work to complete.\n\t */\n\tget isClosed() {\n\t\treturn this._state === BackgroundProcessManagerState.Closed;\n\t}\n\n\tprivate closedFailure(description: string) {\n\t\tif (!this.isOpen) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew BackgroundManagerNotOpenError(\n\t\t\t\t\t[\n\t\t\t\t\t\t`The manager is ${this.state}.`,\n\t\t\t\t\t\t`You tried to add \"${description}\".`,\n\t\t\t\t\t\t`Pending jobs: [\\n${this.pending\n\t\t\t\t\t\t\t.map(t => '    ' + t)\n\t\t\t\t\t\t\t.join(',\\n')}\\n]`,\n\t\t\t\t\t].join('\\n')\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Signals jobs to stop (for those that accept interruptions) and waits\n\t * for confirmation that jobs have stopped.\n\t *\n\t * This immediately puts the manager into a closing state and just begins\n\t * to reject new work. After all work in the manager is complete, the\n\t * manager goes into a `Completed` state and `close()` returns.\n\t *\n\t * This call is idempotent.\n\t *\n\t * If the manager is already closing or closed, `finalCleaup` is not executed.\n\t *\n\t * @param onClosed\n\t * @returns The settled results of each still-running job's promise. If the\n\t * manager is already closed, this will contain the results as of when the\n\t * manager's `close()` was called in an `Open` state.\n\t */\n\tasync close() {\n\t\tif (this.isOpen) {\n\t\t\tthis._state = BackgroundProcessManagerState.Closing;\n\t\t\tfor (const job of Array.from(this.jobs)) {\n\t\t\t\ttry {\n\t\t\t\t\tjob.terminate();\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Due to potential races with a job's natural completion, it's\n\t\t\t\t\t// reasonable to expect the termination call to fail. Hence,\n\t\t\t\t\t// not logging as an error.\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`Failed to send termination signal to job. Error: ${error.message}`,\n\t\t\t\t\t\tjob\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Use `allSettled()` because we want to wait for all to finish. We do\n\t\t\t// not want to stop waiting if there is a failure.\n\t\t\tthis._closingPromise = Promise.allSettled(\n\t\t\t\tArray.from(this.jobs).map(j => j.promise)\n\t\t\t);\n\n\t\t\tawait this._closingPromise;\n\t\t\tthis._state = BackgroundProcessManagerState.Closed;\n\t\t}\n\n\t\treturn this._closingPromise as any;\n\t}\n\n\t/**\n\t * Signals the manager to start accepting work (again) and returns once\n\t * the manager is ready to do so.\n\t *\n\t * If the state is already `Open`, this call is a no-op.\n\t *\n\t * If the state is `Closed`, this call simply updates state and returns.\n\t *\n\t * If the state is `Closing`, this call waits for completion before it\n\t * updates the state and returns.\n\t */\n\tasync open() {\n\t\tif (this.isClosing) {\n\t\t\tawait this.close();\n\t\t}\n\n\t\tthis._state = BackgroundProcessManagerState.Open;\n\t}\n}\n\n/**\n *\n */\nexport class BackgroundManagerNotOpenError extends Error {\n\tconstructor(message: string) {\n\t\tsuper(`BackgroundManagerNotOpenError: ${message}`);\n\t}\n}\n\n/**\n * All possible states a `BackgroundProcessManager` instance can be in.\n */\nexport enum BackgroundProcessManagerState {\n\t/**\n\t * Accepting new jobs.\n\t */\n\tOpen = 'Open',\n\n\t/**\n\t * Not accepting new jobs. Waiting for submitted jobs to complete.\n\t */\n\tClosing = 'Closing',\n\n\t/**\n\t * Not accepting new jobs. All submitted jobs are complete.\n\t */\n\tClosed = 'Closed',\n}\n\n/**\n * Completely internal to `BackgroundProcessManager`, and describes the structure of\n * an entry in the jobs registry.\n */\ntype JobEntry = {\n\t/**\n\t * The underlying promise provided by the job function to wait for.\n\t */\n\tpromise: Promise<any>;\n\n\t/**\n\t * Request the termination of the job.\n\t */\n\tterminate: () => void;\n\n\t/**\n\t * An object provided by the caller that can be used to identify the description\n\t * of the job, which can otherwise be unclear from the `promise` and\n\t * `terminate` function. The `description` can be a string. (May be extended\n\t * later to also support object refs.)\n\t *\n\t * Useful for troubleshooting why a manager is waiting for long periods of time\n\t * on `close()`.\n\t */\n\tdescription?: string;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}