{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { ConsoleLogger as Logger } from './Logger';\nvar logger = new Logger('Parser');\nexport var parseAWSExports = function (config) {\n  var amplifyConfig = {};\n  // Analytics\n  if (config['aws_mobile_analytics_app_id']) {\n    var Analytics = {\n      AWSPinpoint: {\n        appId: config['aws_mobile_analytics_app_id'],\n        region: config['aws_mobile_analytics_app_region']\n      }\n    };\n    amplifyConfig.Analytics = Analytics;\n  }\n  // Auth\n  if (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {\n    amplifyConfig.Auth = {\n      userPoolId: config['aws_user_pools_id'],\n      userPoolWebClientId: config['aws_user_pools_web_client_id'],\n      region: config['aws_cognito_region'],\n      identityPoolId: config['aws_cognito_identity_pool_id'],\n      identityPoolRegion: config['aws_cognito_region'],\n      mandatorySignIn: config['aws_mandatory_sign_in'] === 'enable',\n      signUpVerificationMethod: config['aws_cognito_sign_up_verification_method'] || 'code'\n    };\n  }\n  // Storage\n  var storageConfig;\n  if (config['aws_user_files_s3_bucket']) {\n    storageConfig = {\n      AWSS3: {\n        bucket: config['aws_user_files_s3_bucket'],\n        region: config['aws_user_files_s3_bucket_region'],\n        dangerouslyConnectToHttpEndpointForTesting: config['aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing']\n      }\n    };\n  } else {\n    storageConfig = config ? config.Storage || config : {};\n  }\n  // Logging\n  if (config['Logging']) {\n    amplifyConfig.Logging = __assign(__assign({}, config['Logging']), {\n      region: config['aws_project_region']\n    });\n  }\n  // Geo\n  if (config['geo']) {\n    amplifyConfig.Geo = Object.assign({}, config.geo);\n    if (config.geo['amazon_location_service']) {\n      amplifyConfig.Geo = {\n        AmazonLocationService: config.geo['amazon_location_service']\n      };\n    }\n  }\n  amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);\n  amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);\n  amplifyConfig.Storage = Object.assign({}, storageConfig);\n  amplifyConfig.Logging = Object.assign({}, amplifyConfig.Logging, config.Logging);\n  logger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);\n  return amplifyConfig;\n};","map":{"version":3,"names":["ConsoleLogger","Logger","logger","parseAWSExports","config","amplifyConfig","Analytics","AWSPinpoint","appId","region","Auth","userPoolId","userPoolWebClientId","identityPoolId","identityPoolRegion","mandatorySignIn","signUpVerificationMethod","storageConfig","AWSS3","bucket","dangerouslyConnectToHttpEndpointForTesting","Storage","Logging","__assign","Geo","Object","assign","geo","AmazonLocationService","debug"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\core\\src\\parseAWSExports.ts"],"sourcesContent":["import { AmplifyConfig } from './types';\nimport { ConsoleLogger as Logger } from './Logger';\n\nconst logger = new Logger('Parser');\n\nexport const parseAWSExports = (config): AmplifyConfig => {\n\tconst amplifyConfig: AmplifyConfig = {};\n\t// Analytics\n\tif (config['aws_mobile_analytics_app_id']) {\n\t\tconst Analytics = {\n\t\t\tAWSPinpoint: {\n\t\t\t\tappId: config['aws_mobile_analytics_app_id'],\n\t\t\t\tregion: config['aws_mobile_analytics_app_region'],\n\t\t\t},\n\t\t};\n\t\tamplifyConfig.Analytics = Analytics;\n\t}\n\n\t// Auth\n\tif (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {\n\t\tamplifyConfig.Auth = {\n\t\t\tuserPoolId: config['aws_user_pools_id'],\n\t\t\tuserPoolWebClientId: config['aws_user_pools_web_client_id'],\n\t\t\tregion: config['aws_cognito_region'],\n\t\t\tidentityPoolId: config['aws_cognito_identity_pool_id'],\n\t\t\tidentityPoolRegion: config['aws_cognito_region'],\n\t\t\tmandatorySignIn: config['aws_mandatory_sign_in'] === 'enable',\n\t\t\tsignUpVerificationMethod:\n\t\t\t\tconfig['aws_cognito_sign_up_verification_method'] || 'code',\n\t\t};\n\t}\n\n\t// Storage\n\tlet storageConfig;\n\tif (config['aws_user_files_s3_bucket']) {\n\t\tstorageConfig = {\n\t\t\tAWSS3: {\n\t\t\t\tbucket: config['aws_user_files_s3_bucket'],\n\t\t\t\tregion: config['aws_user_files_s3_bucket_region'],\n\t\t\t\tdangerouslyConnectToHttpEndpointForTesting:\n\t\t\t\t\tconfig[\n\t\t\t\t\t\t'aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing'\n\t\t\t\t\t],\n\t\t\t},\n\t\t};\n\t} else {\n\t\tstorageConfig = config ? config.Storage || config : {};\n\t}\n\n\t// Logging\n\tif (config['Logging']) {\n\t\tamplifyConfig.Logging = {\n\t\t\t...config['Logging'],\n\t\t\tregion: config['aws_project_region'],\n\t\t};\n\t}\n\n\t// Geo\n\tif (config['geo']) {\n\t\tamplifyConfig.Geo = Object.assign({}, config.geo);\n\t\tif (config.geo['amazon_location_service']) {\n\t\t\tamplifyConfig.Geo = {\n\t\t\t\tAmazonLocationService: config.geo['amazon_location_service'],\n\t\t\t};\n\t\t}\n\t}\n\n\tamplifyConfig.Analytics = Object.assign(\n\t\t{},\n\t\tamplifyConfig.Analytics,\n\t\tconfig.Analytics\n\t);\n\tamplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);\n\tamplifyConfig.Storage = Object.assign({}, storageConfig);\n\tamplifyConfig.Logging = Object.assign(\n\t\t{},\n\t\tamplifyConfig.Logging,\n\t\tconfig.Logging\n\t);\n\tlogger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);\n\treturn amplifyConfig;\n};\n"],"mappings":";AACA,SAASA,aAAa,IAAIC,MAAM,QAAQ,UAAU;AAElD,IAAMC,MAAM,GAAG,IAAID,MAAM,CAAC,QAAQ,CAAC;AAEnC,OAAO,IAAME,eAAe,GAAG,SAAAA,CAACC,MAAM;EACrC,IAAMC,aAAa,GAAkB,EAAE;EACvC;EACA,IAAID,MAAM,CAAC,6BAA6B,CAAC,EAAE;IAC1C,IAAME,SAAS,GAAG;MACjBC,WAAW,EAAE;QACZC,KAAK,EAAEJ,MAAM,CAAC,6BAA6B,CAAC;QAC5CK,MAAM,EAAEL,MAAM,CAAC,iCAAiC;;KAEjD;IACDC,aAAa,CAACC,SAAS,GAAGA,SAAS;;EAGpC;EACA,IAAIF,MAAM,CAAC,8BAA8B,CAAC,IAAIA,MAAM,CAAC,mBAAmB,CAAC,EAAE;IAC1EC,aAAa,CAACK,IAAI,GAAG;MACpBC,UAAU,EAAEP,MAAM,CAAC,mBAAmB,CAAC;MACvCQ,mBAAmB,EAAER,MAAM,CAAC,8BAA8B,CAAC;MAC3DK,MAAM,EAAEL,MAAM,CAAC,oBAAoB,CAAC;MACpCS,cAAc,EAAET,MAAM,CAAC,8BAA8B,CAAC;MACtDU,kBAAkB,EAAEV,MAAM,CAAC,oBAAoB,CAAC;MAChDW,eAAe,EAAEX,MAAM,CAAC,uBAAuB,CAAC,KAAK,QAAQ;MAC7DY,wBAAwB,EACvBZ,MAAM,CAAC,yCAAyC,CAAC,IAAI;KACtD;;EAGF;EACA,IAAIa,aAAa;EACjB,IAAIb,MAAM,CAAC,0BAA0B,CAAC,EAAE;IACvCa,aAAa,GAAG;MACfC,KAAK,EAAE;QACNC,MAAM,EAAEf,MAAM,CAAC,0BAA0B,CAAC;QAC1CK,MAAM,EAAEL,MAAM,CAAC,iCAAiC,CAAC;QACjDgB,0CAA0C,EACzChB,MAAM,CACL,oEAAoE;;KAGvE;GACD,MAAM;IACNa,aAAa,GAAGb,MAAM,GAAGA,MAAM,CAACiB,OAAO,IAAIjB,MAAM,GAAG,EAAE;;EAGvD;EACA,IAAIA,MAAM,CAAC,SAAS,CAAC,EAAE;IACtBC,aAAa,CAACiB,OAAO,GAAAC,QAAA,CAAAA,QAAA,KACjBnB,MAAM,CAAC,SAAS,CAAC;MACpBK,MAAM,EAAEL,MAAM,CAAC,oBAAoB;IAAC,EACpC;;EAGF;EACA,IAAIA,MAAM,CAAC,KAAK,CAAC,EAAE;IAClBC,aAAa,CAACmB,GAAG,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEtB,MAAM,CAACuB,GAAG,CAAC;IACjD,IAAIvB,MAAM,CAACuB,GAAG,CAAC,yBAAyB,CAAC,EAAE;MAC1CtB,aAAa,CAACmB,GAAG,GAAG;QACnBI,qBAAqB,EAAExB,MAAM,CAACuB,GAAG,CAAC,yBAAyB;OAC3D;;;EAIHtB,aAAa,CAACC,SAAS,GAAGmB,MAAM,CAACC,MAAM,CACtC,EAAE,EACFrB,aAAa,CAACC,SAAS,EACvBF,MAAM,CAACE,SAAS,CAChB;EACDD,aAAa,CAACK,IAAI,GAAGe,MAAM,CAACC,MAAM,CAAC,EAAE,EAAErB,aAAa,CAACK,IAAI,EAAEN,MAAM,CAACM,IAAI,CAAC;EACvEL,aAAa,CAACgB,OAAO,GAAGI,MAAM,CAACC,MAAM,CAAC,EAAE,EAAET,aAAa,CAAC;EACxDZ,aAAa,CAACiB,OAAO,GAAGG,MAAM,CAACC,MAAM,CACpC,EAAE,EACFrB,aAAa,CAACiB,OAAO,EACrBlB,MAAM,CAACkB,OAAO,CACd;EACDpB,MAAM,CAAC2B,KAAK,CAAC,cAAc,EAAEzB,MAAM,EAAE,kBAAkB,EAAEC,aAAa,CAAC;EACvE,OAAOA,aAAa;AACrB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}