{"ast":null,"code":"export function blobReader(blob, onChunk, chunkSize) {\n  if (chunkSize === void 0) {\n    chunkSize = 1024 * 1024;\n  }\n  return new Promise(function (resolve, reject) {\n    var fileReader = new FileReader();\n    fileReader.addEventListener(\"error\", reject);\n    fileReader.addEventListener(\"abort\", reject);\n    var size = blob.size;\n    var totalBytesRead = 0;\n    function read() {\n      if (totalBytesRead >= size) {\n        resolve();\n        return;\n      }\n      fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));\n    }\n    fileReader.addEventListener(\"load\", function (event) {\n      var result = event.target.result;\n      onChunk(new Uint8Array(result));\n      totalBytesRead += result.byteLength;\n      // read the next block\n      read();\n    });\n    // kick off the read\n    read();\n  });\n}","map":{"version":3,"names":["blobReader","blob","onChunk","chunkSize","Promise","resolve","reject","fileReader","FileReader","addEventListener","size","totalBytesRead","read","readAsArrayBuffer","slice","Math","min","event","result","target","Uint8Array","byteLength"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-sdk\\chunked-blob-reader\\src\\index.ts"],"sourcesContent":["export function blobReader(\n  blob: Blob,\n  onChunk: (chunk: Uint8Array) => void,\n  chunkSize: number = 1024 * 1024\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n\n    fileReader.addEventListener(\"error\", reject);\n    fileReader.addEventListener(\"abort\", reject);\n\n    const size = blob.size;\n    let totalBytesRead = 0;\n\n    function read() {\n      if (totalBytesRead >= size) {\n        resolve();\n        return;\n      }\n      fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));\n    }\n\n    fileReader.addEventListener(\"load\", (event) => {\n      const result = <ArrayBuffer>(event.target as any).result;\n      onChunk(new Uint8Array(result));\n      totalBytesRead += result.byteLength;\n      // read the next block\n      read();\n    });\n\n    // kick off the read\n    read();\n  });\n}\n"],"mappings":"AAAA,OAAM,SAAUA,UAAUA,CACxBC,IAAU,EACVC,OAAoC,EACpCC,SAA+B;EAA/B,IAAAA,SAAA;IAAAA,SAAA,GAAoB,IAAI,GAAG,IAAI;EAAA;EAE/B,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM;IACjC,IAAMC,UAAU,GAAG,IAAIC,UAAU,EAAE;IAEnCD,UAAU,CAACE,gBAAgB,CAAC,OAAO,EAAEH,MAAM,CAAC;IAC5CC,UAAU,CAACE,gBAAgB,CAAC,OAAO,EAAEH,MAAM,CAAC;IAE5C,IAAMI,IAAI,GAAGT,IAAI,CAACS,IAAI;IACtB,IAAIC,cAAc,GAAG,CAAC;IAEtB,SAASC,IAAIA,CAAA;MACX,IAAID,cAAc,IAAID,IAAI,EAAE;QAC1BL,OAAO,EAAE;QACT;;MAEFE,UAAU,CAACM,iBAAiB,CAACZ,IAAI,CAACa,KAAK,CAACH,cAAc,EAAEI,IAAI,CAACC,GAAG,CAACN,IAAI,EAAEC,cAAc,GAAGR,SAAS,CAAC,CAAC,CAAC;IACtG;IAEAI,UAAU,CAACE,gBAAgB,CAAC,MAAM,EAAE,UAACQ,KAAK;MACxC,IAAMC,MAAM,GAAiBD,KAAK,CAACE,MAAc,CAACD,MAAM;MACxDhB,OAAO,CAAC,IAAIkB,UAAU,CAACF,MAAM,CAAC,CAAC;MAC/BP,cAAc,IAAIO,MAAM,CAACG,UAAU;MACnC;MACAT,IAAI,EAAE;IACR,CAAC,CAAC;IAEF;IACAA,IAAI,EAAE;EACR,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}