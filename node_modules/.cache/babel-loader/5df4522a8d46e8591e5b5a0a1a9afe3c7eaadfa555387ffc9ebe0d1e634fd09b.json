{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __read, __rest } from \"tslib\";\nimport { ALGORITHM_QUERY_PARAM, AMZ_DATE_QUERY_PARAM, CREDENTIAL_QUERY_PARAM, EXPIRES_QUERY_PARAM, HOST_HEADER, SHA256_ALGORITHM_IDENTIFIER, SIGNATURE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, TOKEN_QUERY_PARAM } from './constants';\nimport { getSigningValues } from './utils/getSigningValues';\nimport { getSignature } from './utils/getSignature';\n/**\n * Given a `Presignable` object, returns a Signature Version 4 presigned `URL` object.\n *\n * @param presignable `Presignable` object containing at least a url to be presigned with authentication query params.\n * @param presignUrlOptions `PresignUrlOptions` object containing values used to construct the signature.\n * @returns A `URL` with authentication query params which can grant temporary access to AWS resources.\n */\nexport var presignUrl = function (_a, _b) {\n  var _c, _d, _e, _f;\n  var body = _a.body,\n    _g = _a.method,\n    method = _g === void 0 ? 'GET' : _g,\n    url = _a.url;\n  var expiration = _b.expiration,\n    options = __rest(_b, [\"expiration\"]);\n  var signingValues = getSigningValues(options);\n  var accessKeyId = signingValues.accessKeyId,\n    credentialScope = signingValues.credentialScope,\n    longDate = signingValues.longDate,\n    sessionToken = signingValues.sessionToken;\n  // create the request to sign\n  // @ts-ignore URL constructor accepts a URL object\n  var presignedUrl = new URL(url);\n  Object.entries(__assign(__assign((_c = {}, _c[ALGORITHM_QUERY_PARAM] = SHA256_ALGORITHM_IDENTIFIER, _c[CREDENTIAL_QUERY_PARAM] = accessKeyId + \"/\" + credentialScope, _c[AMZ_DATE_QUERY_PARAM] = longDate, _c[SIGNED_HEADERS_QUERY_PARAM] = HOST_HEADER, _c), expiration && (_d = {}, _d[EXPIRES_QUERY_PARAM] = expiration.toString(), _d)), sessionToken && (_e = {}, _e[TOKEN_QUERY_PARAM] = sessionToken, _e))).forEach(function (_a) {\n    var _b = __read(_a, 2),\n      key = _b[0],\n      value = _b[1];\n    presignedUrl.searchParams.append(key, value);\n  });\n  var requestToSign = {\n    body: body,\n    headers: (_f = {}, _f[HOST_HEADER] = url.host, _f),\n    method: method,\n    url: presignedUrl\n  };\n  // calculate and add the signature to the url\n  var signature = getSignature(requestToSign, signingValues);\n  presignedUrl.searchParams.append(SIGNATURE_QUERY_PARAM, signature);\n  return presignedUrl;\n};","map":{"version":3,"names":["ALGORITHM_QUERY_PARAM","AMZ_DATE_QUERY_PARAM","CREDENTIAL_QUERY_PARAM","EXPIRES_QUERY_PARAM","HOST_HEADER","SHA256_ALGORITHM_IDENTIFIER","SIGNATURE_QUERY_PARAM","SIGNED_HEADERS_QUERY_PARAM","TOKEN_QUERY_PARAM","getSigningValues","getSignature","presignUrl","_a","_b","body","_g","method","url","expiration","options","__rest","signingValues","accessKeyId","credentialScope","longDate","sessionToken","presignedUrl","URL","Object","entries","__assign","_c","_d","toString","_e","forEach","__read","key","value","searchParams","append","requestToSign","headers","_f","host","signature"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\presignUrl.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Presignable, PresignUrlOptions } from './types';\nimport {\n\tALGORITHM_QUERY_PARAM,\n\tAMZ_DATE_QUERY_PARAM,\n\tCREDENTIAL_QUERY_PARAM,\n\tEXPIRES_QUERY_PARAM,\n\tHOST_HEADER,\n\tSHA256_ALGORITHM_IDENTIFIER,\n\tSIGNATURE_QUERY_PARAM,\n\tSIGNED_HEADERS_QUERY_PARAM,\n\tTOKEN_QUERY_PARAM,\n} from './constants';\nimport { getSigningValues } from './utils/getSigningValues';\nimport { getSignature } from './utils/getSignature';\n\n/**\n * Given a `Presignable` object, returns a Signature Version 4 presigned `URL` object.\n *\n * @param presignable `Presignable` object containing at least a url to be presigned with authentication query params.\n * @param presignUrlOptions `PresignUrlOptions` object containing values used to construct the signature.\n * @returns A `URL` with authentication query params which can grant temporary access to AWS resources.\n */\nexport const presignUrl = (\n\t{ body, method = 'GET', url }: Presignable,\n\t{ expiration, ...options }: PresignUrlOptions\n): URL => {\n\tconst signingValues = getSigningValues(options);\n\tconst { accessKeyId, credentialScope, longDate, sessionToken } =\n\t\tsigningValues;\n\n\t// create the request to sign\n\t// @ts-ignore URL constructor accepts a URL object\n\tconst presignedUrl = new URL(url);\n\tObject.entries({\n\t\t[ALGORITHM_QUERY_PARAM]: SHA256_ALGORITHM_IDENTIFIER,\n\t\t[CREDENTIAL_QUERY_PARAM]: `${accessKeyId}/${credentialScope}`,\n\t\t[AMZ_DATE_QUERY_PARAM]: longDate,\n\t\t[SIGNED_HEADERS_QUERY_PARAM]: HOST_HEADER,\n\t\t...(expiration && { [EXPIRES_QUERY_PARAM]: expiration.toString() }),\n\t\t...(sessionToken && { [TOKEN_QUERY_PARAM]: sessionToken }),\n\t}).forEach(([key, value]) => {\n\t\tpresignedUrl.searchParams.append(key, value);\n\t});\n\tconst requestToSign = {\n\t\tbody,\n\t\theaders: { [HOST_HEADER]: url.host },\n\t\tmethod,\n\t\turl: presignedUrl,\n\t};\n\n\t// calculate and add the signature to the url\n\tconst signature = getSignature(requestToSign, signingValues);\n\tpresignedUrl.searchParams.append(SIGNATURE_QUERY_PARAM, signature);\n\n\treturn presignedUrl;\n};\n"],"mappings":"AAAA;AACA;;AAGA,SACCA,qBAAqB,EACrBC,oBAAoB,EACpBC,sBAAsB,EACtBC,mBAAmB,EACnBC,WAAW,EACXC,2BAA2B,EAC3BC,qBAAqB,EACrBC,0BAA0B,EAC1BC,iBAAiB,QACX,aAAa;AACpB,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,YAAY,QAAQ,sBAAsB;AAEnD;;;;;;;AAOA,OAAO,IAAMC,UAAU,GAAG,SAAAA,CACzBC,EAA0C,EAC1CC,EAA6C;;MAD3CC,IAAA,GAAAF,EAAA,CAAAE,IAAI;IAAEC,EAAA,GAAAH,EAAA,CAAAI,MAAc;IAAdA,MAAA,GAAAD,EAAA,sBAAAA,EAAc;IAAEE,GAAA,GAAAL,EAAA,CAAAK,GAAG;EACzB,IAAAC,UAAA,GAAAL,EAAA,CAAAK,UAAU;IAAEC,OAAA,GAAAC,MAAA,CAAAP,EAAA,iBAAU;EAExB,IAAMQ,aAAa,GAAGZ,gBAAgB,CAACU,OAAO,CAAC;EACvC,IAAAG,WAAA,GAAAD,aAAA,CAAAC,WAAW;IAAEC,eAAA,GAAAF,aAAA,CAAAE,eAAe;IAAEC,QAAA,GAAAH,aAAA,CAAAG,QAAQ;IAAEC,YAAA,GAAAJ,aAAA,CAAAI,YAAY;EAG5D;EACA;EACA,IAAMC,YAAY,GAAG,IAAIC,GAAG,CAACV,GAAG,CAAC;EACjCW,MAAM,CAACC,OAAO,CAAAC,QAAA,CAAAA,QAAA,EAAAC,EAAA,OAAAA,EAAA,CACZ/B,qBAAqB,IAAGK,2BAA2B,EAAA0B,EAAA,CACnD7B,sBAAsB,IAAMoB,WAAW,SAAIC,eAAiB,EAAAQ,EAAA,CAC5D9B,oBAAoB,IAAGuB,QAAQ,EAAAO,EAAA,CAC/BxB,0BAA0B,IAAGH,WAAW,EAAA2B,EAAA,GACrCb,UAAU,KAAAc,EAAA,OAAMA,EAAA,CAAC7B,mBAAmB,IAAGe,UAAU,CAACe,QAAQ,EAAE,EAAAD,EAAA,CAAG,GAC/DP,YAAY,KAAAS,EAAA,OAAMA,EAAA,CAAC1B,iBAAiB,IAAGiB,YAAY,EAAAS,EAAA,CAAG,EACzD,CAACC,OAAO,CAAC,UAACvB,EAAY;QAAZC,EAAA,GAAAuB,MAAA,CAAAxB,EAAA,IAAY;MAAXyB,GAAA,GAAAxB,EAAA,GAAG;MAAEyB,KAAA,GAAAzB,EAAA,GAAK;IACtBa,YAAY,CAACa,YAAY,CAACC,MAAM,CAACH,GAAG,EAAEC,KAAK,CAAC;EAC7C,CAAC,CAAC;EACF,IAAMG,aAAa,GAAG;IACrB3B,IAAI,EAAAA,IAAA;IACJ4B,OAAO,GAAAC,EAAA,OAAIA,EAAA,CAACvC,WAAW,IAAGa,GAAG,CAAC2B,IAAI,EAAAD,EAAA,CAAE;IACpC3B,MAAM,EAAAA,MAAA;IACNC,GAAG,EAAES;GACL;EAED;EACA,IAAMmB,SAAS,GAAGnC,YAAY,CAAC+B,aAAa,EAAEpB,aAAa,CAAC;EAC5DK,YAAY,CAACa,YAAY,CAACC,MAAM,CAAClC,qBAAqB,EAAEuC,SAAS,CAAC;EAElE,OAAOnB,YAAY;AACpB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}