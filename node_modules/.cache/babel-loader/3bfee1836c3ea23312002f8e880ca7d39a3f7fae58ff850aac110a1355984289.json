{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { validate as validateArn } from \"@aws-sdk/util-arn-parser\";\n/**\n * @internal\n */\nexport function validateBucketNameMiddleware() {\n  var _this = this;\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var Bucket, err;\n        return __generator(this, function (_a) {\n          Bucket = args.input.Bucket;\n          if (typeof Bucket === \"string\" && !validateArn(Bucket) && Bucket.indexOf(\"/\") >= 0) {\n            err = new Error(\"Bucket name shouldn't contain '/', received '\" + Bucket + \"'\");\n            err.name = \"InvalidBucketName\";\n            throw err;\n          }\n          return [2 /*return*/, next(__assign({}, args))];\n        });\n      });\n    };\n  };\n}\n/**\n * @internal\n */\nexport var validateBucketNameMiddlewareOptions = {\n  step: \"initialize\",\n  tags: [\"VALIDATE_BUCKET_NAME\"],\n  name: \"validateBucketNameMiddleware\",\n  override: true\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport var getValidateBucketNamePlugin = function (unused) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"names":["validate","validateArn","validateBucketNameMiddleware","_this","next","args","__awaiter","Bucket","input","indexOf","err","Error","name","__assign","validateBucketNameMiddlewareOptions","step","tags","override","getValidateBucketNamePlugin","unused","applyToStack","clientStack","add"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-sdk\\middleware-sdk-s3\\src\\validate-bucket-name.ts"],"sourcesContent":["import {\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  InitializeMiddleware,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\nimport { validate as validateArn } from \"@aws-sdk/util-arn-parser\";\n\n/**\n * @internal\n */\nexport function validateBucketNameMiddleware(): InitializeMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: InitializeHandler<any, Output>\n  ): InitializeHandler<any, Output> => async (\n    args: InitializeHandlerArguments<any>\n  ): Promise<InitializeHandlerOutput<Output>> => {\n    const {\n      input: { Bucket },\n    } = args;\n    if (typeof Bucket === \"string\" && !validateArn(Bucket) && Bucket.indexOf(\"/\") >= 0) {\n      const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);\n      err.name = \"InvalidBucketName\";\n      throw err;\n    }\n    return next({ ...args });\n  };\n}\n\n/**\n * @internal\n */\nexport const validateBucketNameMiddlewareOptions: InitializeHandlerOptions = {\n  step: \"initialize\",\n  tags: [\"VALIDATE_BUCKET_NAME\"],\n  name: \"validateBucketNameMiddleware\",\n  override: true,\n};\n\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const getValidateBucketNamePlugin = (unused: any): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);\n  },\n});\n"],"mappings":";AASA,SAASA,QAAQ,IAAIC,WAAW,QAAQ,0BAA0B;AAElE;;;AAGA,OAAM,SAAUC,4BAA4BA,CAAA;EAA5C,IAAAC,KAAA;EACE,OAAO,UACLC,IAAoC;IACD,iBACnCC,IAAqC;MAAA,OAAAC,SAAA,CAAAH,KAAA;;;UAG1BI,MAAM,GACbF,IAAI,CAAAG,KAAA,CAAAD,MADS;UAEjB,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAI,CAACN,WAAW,CAACM,MAAM,CAAC,IAAIA,MAAM,CAACE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAC5EC,GAAG,GAAG,IAAIC,KAAK,CAAC,kDAAgDJ,MAAM,MAAG,CAAC;YAChFG,GAAG,CAACE,IAAI,GAAG,mBAAmB;YAC9B,MAAMF,GAAG;;UAEX,sBAAON,IAAI,CAAAS,QAAA,KAAMR,IAAI,EAAG;;;KACzB;EAZoC,CAYpC;AACH;AAEA;;;AAGA,OAAO,IAAMS,mCAAmC,GAA6B;EAC3EC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,CAAC,sBAAsB,CAAC;EAC9BJ,IAAI,EAAE,8BAA8B;EACpCK,QAAQ,EAAE;CACX;AAED;;;AAGA;AACA,OAAO,IAAMC,2BAA2B,GAAG,SAAAA,CAACC,MAAW;EAA0B,OAAC;IAChFC,YAAY,EAAE,SAAAA,CAACC,WAAW;MACxBA,WAAW,CAACC,GAAG,CAACpB,4BAA4B,EAAE,EAAEY,mCAAmC,CAAC;IACtF;GACD;AAJgF,CAI/E"},"metadata":{},"sourceType":"module","externalDependencies":[]}