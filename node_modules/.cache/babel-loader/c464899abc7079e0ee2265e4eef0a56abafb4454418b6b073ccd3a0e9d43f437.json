{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __read } from \"tslib\";\n/**\n * Returns a canonical query string.\n *\n * @param searchParams `searchParams` from the request url.\n * @returns URL-encoded query string parameters, separated by ampersands (&). Percent-encode reserved characters,\n * including the space character. Encode names and values separately. If there are empty parameters, append the equals\n * sign to the parameter name before encoding. After encoding, sort the parameters alphabetically by key name. If there\n * is no query string, use an empty string (\"\").\n *\n * @internal\n */\nexport var getCanonicalQueryString = function (searchParams) {\n  return Array.from(searchParams).sort(function (_a, _b) {\n    var _c = __read(_a, 2),\n      keyA = _c[0],\n      valA = _c[1];\n    var _d = __read(_b, 2),\n      keyB = _d[0],\n      valB = _d[1];\n    if (keyA === keyB) {\n      return valA < valB ? -1 : 1;\n    }\n    return keyA < keyB ? -1 : 1;\n  }).map(function (_a) {\n    var _b = __read(_a, 2),\n      key = _b[0],\n      val = _b[1];\n    return escapeUri(key) + \"=\" + escapeUri(val);\n  }).join('&');\n};\nvar escapeUri = function (uri) {\n  return encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);\n};\nvar hexEncode = function (c) {\n  return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n};","map":{"version":3,"names":["getCanonicalQueryString","searchParams","Array","from","sort","_a","_b","_c","__read","keyA","valA","_d","keyB","valB","map","key","val","escapeUri","join","uri","encodeURIComponent","replace","hexEncode","c","charCodeAt","toString","toUpperCase"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\utils\\getCanonicalQueryString.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Returns a canonical query string.\n *\n * @param searchParams `searchParams` from the request url.\n * @returns URL-encoded query string parameters, separated by ampersands (&). Percent-encode reserved characters,\n * including the space character. Encode names and values separately. If there are empty parameters, append the equals\n * sign to the parameter name before encoding. After encoding, sort the parameters alphabetically by key name. If there\n * is no query string, use an empty string (\"\").\n *\n * @internal\n */\nexport const getCanonicalQueryString = (\n\tsearchParams: URLSearchParams\n): string =>\n\tArray.from(searchParams)\n\t\t.sort(([keyA, valA], [keyB, valB]) => {\n\t\t\tif (keyA === keyB) {\n\t\t\t\treturn valA < valB ? -1 : 1;\n\t\t\t}\n\t\t\treturn keyA < keyB ? -1 : 1;\n\t\t})\n\t\t.map(([key, val]) => `${escapeUri(key)}=${escapeUri(val)}`)\n\t\t.join('&');\n\nconst escapeUri = (uri: string): string =>\n\tencodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);\n\nconst hexEncode = (c: string) =>\n\t`%${c.charCodeAt(0).toString(16).toUpperCase()}`;\n"],"mappings":"AAAA;AACA;;AAEA;;;;;;;;;;;AAWA,OAAO,IAAMA,uBAAuB,GAAG,SAAAA,CACtCC,YAA6B;EAE7B,OAAAC,KAAK,CAACC,IAAI,CAACF,YAAY,CAAC,CACtBG,IAAI,CAAC,UAACC,EAAY,EAAEC,EAAY;QAA1BC,EAAA,GAAAC,MAAA,CAAAH,EAAA,IAAY;MAAXI,IAAA,GAAAF,EAAA,GAAI;MAAEG,IAAA,GAAAH,EAAA,GAAI;QAAGI,EAAA,GAAAH,MAAA,CAAAF,EAAA,IAAY;MAAXM,IAAA,GAAAD,EAAA,GAAI;MAAEE,IAAA,GAAAF,EAAA,GAAI;IAC/B,IAAIF,IAAI,KAAKG,IAAI,EAAE;MAClB,OAAOF,IAAI,GAAGG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;;IAE5B,OAAOJ,IAAI,GAAGG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;EAC5B,CAAC,CAAC,CACDE,GAAG,CAAC,UAACT,EAAU;QAAVC,EAAA,GAAAE,MAAA,CAAAH,EAAA,IAAU;MAATU,GAAA,GAAAT,EAAA,GAAG;MAAEU,GAAA,GAAAV,EAAA,GAAG;IAAM,OAAGW,SAAS,CAACF,GAAG,CAAC,SAAIE,SAAS,CAACD,GAAG,CAAG;EAArC,CAAqC,CAAC,CAC1DE,IAAI,CAAC,GAAG,CAAC;AARX,CAQW;AAEZ,IAAMD,SAAS,GAAG,SAAAA,CAACE,GAAW;EAC7B,OAAAC,kBAAkB,CAACD,GAAG,CAAC,CAACE,OAAO,CAAC,UAAU,EAAEC,SAAS,CAAC;AAAtD,CAAsD;AAEvD,IAAMA,SAAS,GAAG,SAAAA,CAACC,CAAS;EAC3B,aAAIA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,EAAI;AAAhD,CAAgD"},"metadata":{},"sourceType":"module","externalDependencies":[]}