{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign } from \"tslib\";\nimport { DateUtils } from './Util';\nimport { presignUrl, signRequest, TOKEN_QUERY_PARAM } from './clients/middleware/signing/signer/signatureV4';\nvar IOT_SERVICE_NAME = 'iotdevicegateway';\n// Best practice regex to parse the service and region from an AWS endpoint\nvar AWS_ENDPOINT_REGEX = /([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com(.cn)?$/;\nvar Signer = /** @class */function () {\n  function Signer() {}\n  /**\n  * Sign a HTTP request, add 'Authorization' header to request param\n  * @method sign\n  * @memberof Signer\n  * @static\n  *\n  * @param {object} request - HTTP request object\n  <pre>\n  request: {\n      method: GET | POST | PUT ...\n      url: ...,\n      headers: {\n          header1: ...\n      },\n      data: data\n  }\n  </pre>\n  * @param {object} access_info - AWS access credential info\n  <pre>\n  access_info: {\n      access_key: ...,\n      secret_key: ...,\n      session_token: ...\n  }\n  </pre>\n  * @param {object} [service_info] - AWS service type and region, optional,\n  *                                  if not provided then parse out from url\n  <pre>\n  service_info: {\n      service: ...,\n      region: ...\n  }\n  </pre>\n  *\n  * @returns {object} Signed HTTP request\n  */\n  Signer.sign = function (request, accessInfo, serviceInfo) {\n    request.headers = request.headers || {};\n    if (request.body && !request.data) {\n      throw new Error('The attribute \"body\" was found on the request object. Please use the attribute \"data\" instead.');\n    }\n    var requestToSign = __assign(__assign({}, request), {\n      body: request.data,\n      url: new URL(request.url)\n    });\n    var options = getOptions(requestToSign, accessInfo, serviceInfo);\n    var signedRequest = signRequest(requestToSign, options);\n    // Prior to using `signRequest`, Signer accepted urls as strings and outputted urls as string. Coerce the property\n    // back to a string so as not to disrupt consumers of Signer.\n    signedRequest.url = signedRequest.url.toString();\n    // HTTP headers should be case insensitive but, to maintain parity with the previous Signer implementation and\n    // limit the impact of this implementation swap, replace lowercased headers with title cased ones.\n    signedRequest.headers.Authorization = signedRequest.headers.authorization;\n    signedRequest.headers['X-Amz-Security-Token'] = signedRequest.headers['x-amz-security-token'];\n    delete signedRequest.headers.authorization;\n    delete signedRequest.headers['x-amz-security-token'];\n    return signedRequest;\n  };\n  Signer.signUrl = function (urlOrRequest, accessInfo, serviceInfo, expiration) {\n    var urlToSign = typeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;\n    var method = typeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';\n    var body = typeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;\n    var presignable = {\n      body: body,\n      method: method,\n      url: new URL(urlToSign)\n    };\n    var options = getOptions(presignable, accessInfo, serviceInfo, expiration);\n    var signedUrl = presignUrl(presignable, options);\n    if (accessInfo.session_token && !sessionTokenRequiredInSigning(options.signingService)) {\n      signedUrl.searchParams.append(TOKEN_QUERY_PARAM, accessInfo.session_token);\n    }\n    return signedUrl.toString();\n  };\n  return Signer;\n}();\nexport { Signer };\nvar getOptions = function (request, accessInfo, serviceInfo, expiration) {\n  var _a = accessInfo !== null && accessInfo !== void 0 ? accessInfo : {},\n    access_key = _a.access_key,\n    secret_key = _a.secret_key,\n    session_token = _a.session_token;\n  var _b = parseServiceInfo(request.url),\n    urlRegion = _b.region,\n    urlService = _b.service;\n  var _c = serviceInfo !== null && serviceInfo !== void 0 ? serviceInfo : {},\n    _d = _c.region,\n    region = _d === void 0 ? urlRegion : _d,\n    _e = _c.service,\n    service = _e === void 0 ? urlService : _e;\n  var credentials = __assign({\n    accessKeyId: access_key,\n    secretAccessKey: secret_key\n  }, sessionTokenRequiredInSigning(service) ? {\n    sessionToken: session_token\n  } : {});\n  return __assign({\n    credentials: credentials,\n    signingDate: DateUtils.getDateWithClockOffset(),\n    signingRegion: region,\n    signingService: service\n  }, expiration && {\n    expiration: expiration\n  });\n};\n// TODO: V6 investigate whether add to custom clients' general signer implementation.\nvar parseServiceInfo = function (url) {\n  var _a;\n  var host = url.host;\n  var matched = (_a = host.match(AWS_ENDPOINT_REGEX)) !== null && _a !== void 0 ? _a : [];\n  var parsed = matched.slice(1, 3);\n  if (parsed[1] === 'es') {\n    // Elastic Search\n    parsed = parsed.reverse();\n  }\n  return {\n    service: parsed[0],\n    region: parsed[1]\n  };\n};\n// IoT service does not allow the session token in the canonical request\n// https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n// TODO: V6 investigate whether add to custom clients' general signer implementation.\nvar sessionTokenRequiredInSigning = function (service) {\n  return service !== IOT_SERVICE_NAME;\n};","map":{"version":3,"names":["DateUtils","presignUrl","signRequest","TOKEN_QUERY_PARAM","IOT_SERVICE_NAME","AWS_ENDPOINT_REGEX","Signer","sign","request","accessInfo","serviceInfo","headers","body","data","Error","requestToSign","__assign","url","URL","options","getOptions","signedRequest","toString","Authorization","authorization","signUrl","urlOrRequest","expiration","urlToSign","method","undefined","presignable","signedUrl","session_token","sessionTokenRequiredInSigning","signingService","searchParams","append","_a","access_key","secret_key","_b","parseServiceInfo","urlRegion","region","urlService","service","_c","_d","_e","credentials","accessKeyId","secretAccessKey","sessionToken","signingDate","getDateWithClockOffset","signingRegion","host","matched","match","parsed","slice","reverse"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\core\\src\\Signer.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { DateUtils } from './Util';\nimport {\n\tpresignUrl,\n\tsignRequest,\n\tTOKEN_QUERY_PARAM,\n} from './clients/middleware/signing/signer/signatureV4';\n\nconst IOT_SERVICE_NAME = 'iotdevicegateway';\n// Best practice regex to parse the service and region from an AWS endpoint\nconst AWS_ENDPOINT_REGEX = /([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com(.cn)?$/;\n\nexport class Signer {\n\t/**\n    * Sign a HTTP request, add 'Authorization' header to request param\n    * @method sign\n    * @memberof Signer\n    * @static\n    *\n    * @param {object} request - HTTP request object\n    <pre>\n    request: {\n        method: GET | POST | PUT ...\n        url: ...,\n        headers: {\n            header1: ...\n        },\n        data: data\n    }\n    </pre>\n    * @param {object} access_info - AWS access credential info\n    <pre>\n    access_info: {\n        access_key: ...,\n        secret_key: ...,\n        session_token: ...\n    }\n    </pre>\n    * @param {object} [service_info] - AWS service type and region, optional,\n    *                                  if not provided then parse out from url\n    <pre>\n    service_info: {\n        service: ...,\n        region: ...\n    }\n    </pre>\n    *\n    * @returns {object} Signed HTTP request\n    */\n\tstatic sign(request, accessInfo, serviceInfo) {\n\t\trequest.headers = request.headers || {};\n\n\t\tif (request.body && !request.data) {\n\t\t\tthrow new Error(\n\t\t\t\t'The attribute \"body\" was found on the request object. Please use the attribute \"data\" instead.'\n\t\t\t);\n\t\t}\n\n\t\tconst requestToSign = {\n\t\t\t...request,\n\t\t\tbody: request.data,\n\t\t\turl: new URL(request.url as string),\n\t\t};\n\n\t\tconst options = getOptions(requestToSign, accessInfo, serviceInfo);\n\t\tconst signedRequest: any = signRequest(requestToSign, options);\n\t\t// Prior to using `signRequest`, Signer accepted urls as strings and outputted urls as string. Coerce the property\n\t\t// back to a string so as not to disrupt consumers of Signer.\n\t\tsignedRequest.url = signedRequest.url.toString();\n\t\t// HTTP headers should be case insensitive but, to maintain parity with the previous Signer implementation and\n\t\t// limit the impact of this implementation swap, replace lowercased headers with title cased ones.\n\t\tsignedRequest.headers.Authorization = signedRequest.headers.authorization;\n\t\tsignedRequest.headers['X-Amz-Security-Token'] =\n\t\t\tsignedRequest.headers['x-amz-security-token'];\n\t\tdelete signedRequest.headers.authorization;\n\t\tdelete signedRequest.headers['x-amz-security-token'];\n\t\treturn signedRequest;\n\t}\n\n\tstatic signUrl(\n\t\turlToSign: string,\n\t\taccessInfo: any,\n\t\tserviceInfo?: any,\n\t\texpiration?: number\n\t): string;\n\tstatic signUrl(\n\t\trequest: any,\n\t\taccessInfo: any,\n\t\tserviceInfo?: any,\n\t\texpiration?: number\n\t): string;\n\tstatic signUrl(\n\t\turlOrRequest: string | any,\n\t\taccessInfo: any,\n\t\tserviceInfo?: any,\n\t\texpiration?: number\n\t): string {\n\t\tconst urlToSign: string =\n\t\t\ttypeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;\n\t\tconst method: string =\n\t\t\ttypeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';\n\t\tconst body: any =\n\t\t\ttypeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;\n\n\t\tconst presignable = {\n\t\t\tbody,\n\t\t\tmethod,\n\t\t\turl: new URL(urlToSign),\n\t\t};\n\n\t\tconst options = getOptions(\n\t\t\tpresignable,\n\t\t\taccessInfo,\n\t\t\tserviceInfo,\n\t\t\texpiration\n\t\t);\n\t\tconst signedUrl = presignUrl(presignable, options);\n\t\tif (\n\t\t\taccessInfo.session_token &&\n\t\t\t!sessionTokenRequiredInSigning(options.signingService)\n\t\t) {\n\t\t\tsignedUrl.searchParams.append(\n\t\t\t\tTOKEN_QUERY_PARAM,\n\t\t\t\taccessInfo.session_token\n\t\t\t);\n\t\t}\n\t\treturn signedUrl.toString();\n\t}\n}\n\nconst getOptions = (request, accessInfo, serviceInfo, expiration?) => {\n\tconst { access_key, secret_key, session_token } = accessInfo ?? {};\n\tconst { region: urlRegion, service: urlService } = parseServiceInfo(\n\t\trequest.url\n\t);\n\tconst { region = urlRegion, service = urlService } = serviceInfo ?? {};\n\tconst credentials = {\n\t\taccessKeyId: access_key,\n\t\tsecretAccessKey: secret_key,\n\t\t...(sessionTokenRequiredInSigning(service)\n\t\t\t? { sessionToken: session_token }\n\t\t\t: {}),\n\t};\n\treturn {\n\t\tcredentials,\n\t\tsigningDate: DateUtils.getDateWithClockOffset(),\n\t\tsigningRegion: region,\n\t\tsigningService: service,\n\t\t...(expiration && { expiration }),\n\t};\n};\n\n// TODO: V6 investigate whether add to custom clients' general signer implementation.\nconst parseServiceInfo = (url: URL) => {\n\tconst host = url.host;\n\tconst matched = host.match(AWS_ENDPOINT_REGEX) ?? [];\n\tlet parsed = matched.slice(1, 3);\n\n\tif (parsed[1] === 'es') {\n\t\t// Elastic Search\n\t\tparsed = parsed.reverse();\n\t}\n\n\treturn {\n\t\tservice: parsed[0],\n\t\tregion: parsed[1],\n\t};\n};\n\n// IoT service does not allow the session token in the canonical request\n// https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n// TODO: V6 investigate whether add to custom clients' general signer implementation.\nconst sessionTokenRequiredInSigning = (service: string) =>\n\tservice !== IOT_SERVICE_NAME;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}