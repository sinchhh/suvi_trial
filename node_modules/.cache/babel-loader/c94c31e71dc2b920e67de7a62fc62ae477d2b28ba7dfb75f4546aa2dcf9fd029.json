{"ast":null,"code":"import { __assign, __awaiter, __generator, __rest } from \"tslib\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\";\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\nvar S3RequestPresigner = /** @class */function () {\n  function S3RequestPresigner(options) {\n    var resolvedOptions = __assign({\n      // Allow `signingName` because we want to support usecase of supply client's resolved config\n      // directly. Where service equals signingName.\n      service: options.signingName || options.service || \"s3\",\n      uriEscapePath: options.uriEscapePath || false\n    }, options);\n    this.signer = new SignatureV4(resolvedOptions);\n  }\n  S3RequestPresigner.prototype.presign = function (requestToSign, _a) {\n    if (_a === void 0) {\n      _a = {};\n    }\n    var _b = _a.unsignableHeaders,\n      unsignableHeaders = _b === void 0 ? new Set() : _b,\n      _c = _a.unhoistableHeaders,\n      unhoistableHeaders = _c === void 0 ? new Set() : _c,\n      options = __rest(_a, [\"unsignableHeaders\", \"unhoistableHeaders\"]);\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_d) {\n        unsignableHeaders.add(\"content-type\");\n        // S3 requires SSE headers to be signed in headers instead of query\n        // See: https://github.com/aws/aws-sdk-js-v3/issues/1576\n        Object.keys(requestToSign.headers).map(function (header) {\n          return header.toLowerCase();\n        }).filter(function (header) {\n          return header.startsWith(\"x-amz-server-side-encryption\");\n        }).forEach(function (header) {\n          unhoistableHeaders.add(header);\n        });\n        requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;\n        if (!requestToSign.headers[\"host\"]) {\n          requestToSign.headers.host = requestToSign.hostname;\n        }\n        return [2 /*return*/, this.signer.presign(requestToSign, __assign({\n          expiresIn: 900,\n          unsignableHeaders: unsignableHeaders,\n          unhoistableHeaders: unhoistableHeaders\n        }, options))];\n      });\n    });\n  };\n  return S3RequestPresigner;\n}();\nexport { S3RequestPresigner };","map":{"version":3,"names":["SignatureV4","SHA256_HEADER","UNSIGNED_PAYLOAD","S3RequestPresigner","options","resolvedOptions","__assign","service","signingName","uriEscapePath","signer","prototype","presign","requestToSign","_a","_b","unsignableHeaders","Set","_c","unhoistableHeaders","__rest","add","Object","keys","headers","map","header","toLowerCase","filter","startsWith","forEach","host","hostname","expiresIn"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-sdk\\s3-request-presigner\\src\\presigner.ts"],"sourcesContent":["import { SignatureV4, SignatureV4CryptoInit, SignatureV4Init } from \"@aws-sdk/signature-v4\";\nimport { RequestPresigner, RequestPresigningArguments } from \"@aws-sdk/types\";\nimport { HttpRequest as IHttpRequest } from \"@aws-sdk/types\";\n\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\n\n/**\n * PartialBy<T, K> makes properties specified in K optional in interface T\n * see: https://stackoverflow.com/questions/43159887/make-a-single-property-optional-in-typescript\n * */\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport type S3RequestPresignerOptions = PartialBy<\n  SignatureV4Init & SignatureV4CryptoInit,\n  \"service\" | \"uriEscapePath\"\n> & { signingName?: string };\n\nexport class S3RequestPresigner implements RequestPresigner {\n  private readonly signer: SignatureV4;\n  constructor(options: S3RequestPresignerOptions) {\n    const resolvedOptions = {\n      // Allow `signingName` because we want to support usecase of supply client's resolved config\n      // directly. Where service equals signingName.\n      service: options.signingName || options.service || \"s3\",\n      uriEscapePath: options.uriEscapePath || false,\n      ...options,\n    };\n    this.signer = new SignatureV4(resolvedOptions);\n  }\n\n  public async presign(\n    requestToSign: IHttpRequest,\n    { unsignableHeaders = new Set(), unhoistableHeaders = new Set(), ...options }: RequestPresigningArguments = {}\n  ): Promise<IHttpRequest> {\n    unsignableHeaders.add(\"content-type\");\n    // S3 requires SSE headers to be signed in headers instead of query\n    // See: https://github.com/aws/aws-sdk-js-v3/issues/1576\n    Object.keys(requestToSign.headers)\n      .map((header) => header.toLowerCase())\n      .filter((header) => header.startsWith(\"x-amz-server-side-encryption\"))\n      .forEach((header) => {\n        unhoistableHeaders.add(header);\n      });\n    requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;\n    if (!requestToSign.headers[\"host\"]) {\n      requestToSign.headers.host = requestToSign.hostname;\n    }\n    return this.signer.presign(requestToSign, {\n      expiresIn: 900,\n      unsignableHeaders,\n      unhoistableHeaders,\n      ...options,\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,WAAW,QAAgD,uBAAuB;AAI3F,SAASC,aAAa,EAAEC,gBAAgB,QAAQ,aAAa;AAc7D,IAAAC,kBAAA;EAEE,SAAAA,mBAAYC,OAAkC;IAC5C,IAAMC,eAAe,GAAAC,QAAA;MACnB;MACA;MACAC,OAAO,EAAEH,OAAO,CAACI,WAAW,IAAIJ,OAAO,CAACG,OAAO,IAAI,IAAI;MACvDE,aAAa,EAAEL,OAAO,CAACK,aAAa,IAAI;IAAK,GAC1CL,OAAO,CACX;IACD,IAAI,CAACM,MAAM,GAAG,IAAIV,WAAW,CAACK,eAAe,CAAC;EAChD;EAEaF,kBAAA,CAAAQ,SAAA,CAAAC,OAAO,GAApB,UACEC,aAA2B,EAC3BC,EAA8G;IAA9G,IAAAA,EAAA;MAAAA,EAAA,KAA8G;IAAA;IAA5G,IAAAC,EAAA,GAAAD,EAAA,CAAAE,iBAA6B;MAA7BA,iBAAiB,GAAAD,EAAA,cAAG,IAAIE,GAAG,EAAE,GAAAF,EAAA;MAAEG,EAAA,GAAAJ,EAAA,CAAAK,kBAA8B;MAA9BA,kBAAkB,GAAAD,EAAA,cAAG,IAAID,GAAG,EAAE,GAAAC,EAAA;MAAKd,OAAO,GAAAgB,MAAA,CAAAN,EAAA,EAA3E,2CAA6E,CAAF;;;QAE3EE,iBAAiB,CAACK,GAAG,CAAC,cAAc,CAAC;QACrC;QACA;QACAC,MAAM,CAACC,IAAI,CAACV,aAAa,CAACW,OAAO,CAAC,CAC/BC,GAAG,CAAC,UAACC,MAAM;UAAK,OAAAA,MAAM,CAACC,WAAW,EAAE;QAApB,CAAoB,CAAC,CACrCC,MAAM,CAAC,UAACF,MAAM;UAAK,OAAAA,MAAM,CAACG,UAAU,CAAC,8BAA8B,CAAC;QAAjD,CAAiD,CAAC,CACrEC,OAAO,CAAC,UAACJ,MAAM;UACdP,kBAAkB,CAACE,GAAG,CAACK,MAAM,CAAC;QAChC,CAAC,CAAC;QACJb,aAAa,CAACW,OAAO,CAACvB,aAAa,CAAC,GAAGC,gBAAgB;QACvD,IAAI,CAACW,aAAa,CAACW,OAAO,CAAC,MAAM,CAAC,EAAE;UAClCX,aAAa,CAACW,OAAO,CAACO,IAAI,GAAGlB,aAAa,CAACmB,QAAQ;;QAErD,sBAAO,IAAI,CAACtB,MAAM,CAACE,OAAO,CAACC,aAAa,EAAAP,QAAA;UACtC2B,SAAS,EAAE,GAAG;UACdjB,iBAAiB,EAAAA,iBAAA;UACjBG,kBAAkB,EAAAA;QAAA,GACff,OAAO,EACV;;;GACH;EACH,OAAAD,kBAAC;AAAD,CAAC,CArCD"},"metadata":{},"sourceType":"module","externalDependencies":[]}