{"ast":null,"code":"import { __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { UploadPartCommand, CompleteMultipartUploadCommand, AbortMultipartUploadCommand, ListPartsCommand, CreateMultipartUploadCommand, ListObjectsV2Command } from '@aws-sdk/client-s3';\nimport axios from 'axios';\nimport { Logger } from '@aws-amplify/core';\nimport { calculatePartSize, DEFAULT_PART_SIZE, DEFAULT_QUEUE_SIZE, MAX_OBJECT_SIZE } from '../common/S3ClientUtils';\nimport { byteLength, isFile } from '../common/StorageUtils';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nimport { SET_CONTENT_LENGTH_HEADER, UPLOADS_STORAGE_KEY } from '../common/StorageConstants';\nvar logger = new Logger('AWSS3UploadTask');\nexport var AWSS3UploadTaskState;\n(function (AWSS3UploadTaskState) {\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"INIT\"] = 0] = \"INIT\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"IN_PROGRESS\"] = 1] = \"IN_PROGRESS\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"PAUSED\"] = 2] = \"PAUSED\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"CANCELLED\"] = 3] = \"CANCELLED\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"COMPLETED\"] = 4] = \"COMPLETED\";\n})(AWSS3UploadTaskState || (AWSS3UploadTaskState = {}));\nexport var TaskEvents;\n(function (TaskEvents) {\n  TaskEvents[\"CANCEL\"] = \"cancel\";\n  TaskEvents[\"UPLOAD_COMPLETE\"] = \"uploadComplete\";\n  TaskEvents[\"UPLOAD_PROGRESS\"] = \"uploadPartProgress\";\n  TaskEvents[\"ERROR\"] = \"error\";\n})(TaskEvents || (TaskEvents = {}));\nfunction comparePartNumber(a, b) {\n  return a.PartNumber - b.PartNumber;\n}\nvar AWSS3UploadTask = /** @class */function () {\n  function AWSS3UploadTask(_a) {\n    var s3Client = _a.s3Client,\n      file = _a.file,\n      emitter = _a.emitter,\n      storage = _a.storage,\n      params = _a.params,\n      level = _a.level,\n      prefixPromise = _a.prefixPromise;\n    this.queueSize = DEFAULT_QUEUE_SIZE;\n    this.partSize = DEFAULT_PART_SIZE;\n    this.inProgress = [];\n    this.completedParts = [];\n    this.queued = [];\n    this.bytesUploaded = 0;\n    this.totalBytes = 0;\n    this.state = AWSS3UploadTaskState.INIT;\n    this.prefixPromise = prefixPromise;\n    this.s3client = s3Client;\n    this.s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n    this.storage = storage;\n    this.storageSync = Promise.resolve();\n    if (typeof this.storage['sync'] === 'function') {\n      this.storageSync = this.storage['sync']();\n    }\n    this.params = params;\n    this.file = file;\n    this.totalBytes = this.file.size;\n    this.bytesUploaded = 0;\n    this.emitter = emitter;\n    this.queued = [];\n    this.fileId = this._getFileId(level);\n    this._validateParams();\n    // event emitter will re-throw an error if an event emits an error unless there's a listener, attaching a no-op\n    // function to it unless user adds their own onError callback\n    this.emitter.on(TaskEvents.ERROR, function () {});\n  }\n  Object.defineProperty(AWSS3UploadTask.prototype, \"percent\", {\n    get: function () {\n      return this.bytesUploaded / this.totalBytes * 100;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AWSS3UploadTask.prototype, \"isInProgress\", {\n    get: function () {\n      return this.state === AWSS3UploadTaskState.IN_PROGRESS;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AWSS3UploadTask.prototype._listSingleFile = function (_a) {\n    var key = _a.key,\n      bucket = _a.bucket;\n    return __awaiter(this, void 0, void 0, function () {\n      var listObjectRes, _b, Contents, prefix, obj;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this.s3client.send(new ListObjectsV2Command({\n              Bucket: bucket,\n              Prefix: key\n            }))];\n          case 1:\n            listObjectRes = _c.sent();\n            _b = listObjectRes.Contents, Contents = _b === void 0 ? [] : _b;\n            return [4 /*yield*/, this.prefixPromise];\n          case 2:\n            prefix = _c.sent();\n            obj = Contents.find(function (o) {\n              return o.Key === \"\" + prefix + key;\n            });\n            return [2 /*return*/, obj];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._getFileId = function (level) {\n    // We should check if it's a File first because File is also instance of a Blob\n    if (isFile(this.file)) {\n      return [this.file.name, this.file.lastModified, this.file.size, this.file.type, this.params.Bucket, level, this.params.Key].join('-');\n    } else {\n      return [this.file.size, this.file.type, this.params.Bucket, level, this.params.Key].join('-');\n    }\n  };\n  AWSS3UploadTask.prototype._findCachedUploadParts = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests, cachedUploadFileData, listPartsOutput;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._listCachedUploadTasks()];\n          case 1:\n            uploadRequests = _a.sent();\n            if (Object.keys(uploadRequests).length === 0 || !Object.prototype.hasOwnProperty.call(uploadRequests, this.fileId)) {\n              return [2 /*return*/, {\n                parts: [],\n                uploadId: null\n              }];\n            }\n            cachedUploadFileData = uploadRequests[this.fileId];\n            cachedUploadFileData.lastTouched = Date.now();\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [4 /*yield*/, this.s3client.send(new ListPartsCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: cachedUploadFileData.uploadId\n            }))];\n          case 2:\n            listPartsOutput = _a.sent();\n            return [2 /*return*/, {\n              parts: listPartsOutput.Parts || [],\n              uploadId: cachedUploadFileData.uploadId\n            }];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._emitEvent = function (event, payload) {\n    this.emitter.emit(event, payload);\n  };\n  AWSS3UploadTask.prototype._validateParams = function () {\n    if (this.totalBytes > MAX_OBJECT_SIZE) {\n      throw new Error(\"File size bigger than S3 Object limit of 5TB, got \" + this.totalBytes + \" Bytes\");\n    }\n  };\n  AWSS3UploadTask.prototype._listCachedUploadTasks = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var tasks;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.storageSync];\n          case 1:\n            _a.sent();\n            tasks = this.storage.getItem(UPLOADS_STORAGE_KEY) || '{}';\n            return [2 /*return*/, JSON.parse(tasks)];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._cache = function (fileMetadata) {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._listCachedUploadTasks()];\n          case 1:\n            uploadRequests = _a.sent();\n            uploadRequests[this.fileId] = fileMetadata;\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._isCached = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = (_a = Object.prototype.hasOwnProperty).call;\n            return [4 /*yield*/, this._listCachedUploadTasks()];\n          case 1:\n            return [2 /*return*/, _b.apply(_a, [_c.sent(), this.fileId])];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._removeFromCache = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._listCachedUploadTasks()];\n          case 1:\n            uploadRequests = _a.sent();\n            delete uploadRequests[this.fileId];\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._onPartUploadCompletion = function (_a) {\n    var eTag = _a.eTag,\n      partNumber = _a.partNumber,\n      chunk = _a.chunk;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        this.completedParts.push({\n          ETag: eTag,\n          PartNumber: partNumber\n        });\n        this.bytesUploaded += byteLength(chunk);\n        this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n          loaded: this.bytesUploaded,\n          total: this.totalBytes\n        });\n        // Remove the completed item from the inProgress array\n        this.inProgress = this.inProgress.filter(function (job) {\n          return job.uploadPartInput.PartNumber !== partNumber;\n        });\n        if (this.queued.length && this.state !== AWSS3UploadTaskState.PAUSED) this._startNextPart();\n        if (this._isDone()) this._completeUpload();\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._completeUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            return [4 /*yield*/, this.s3client.send(new CompleteMultipartUploadCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: this.uploadId,\n              MultipartUpload: {\n                // Parts are not always completed in order, we need to manually sort them\n                Parts: this.completedParts.sort(comparePartNumber)\n              }\n            }))];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this._verifyFileSize()];\n          case 2:\n            _a.sent();\n            this._emitEvent(TaskEvents.UPLOAD_COMPLETE, {\n              key: this.params.Key\n            });\n            this._removeFromCache();\n            this.state = AWSS3UploadTaskState.COMPLETED;\n            return [3 /*break*/, 4];\n          case 3:\n            err_1 = _a.sent();\n            logger.error('error completing upload', err_1);\n            this._emitEvent(TaskEvents.ERROR, err_1);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._makeUploadPartRequest = function (input, cancelTokenSource) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            return [4 /*yield*/, this.s3client.send(new UploadPartCommand(input), {\n              cancelTokenSource: cancelTokenSource\n            })];\n          case 1:\n            res = _a.sent();\n            return [4 /*yield*/, this._onPartUploadCompletion({\n              eTag: res.ETag,\n              partNumber: input.PartNumber,\n              chunk: input.Body\n            })];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            err_2 = _a.sent();\n            if (this.state === AWSS3UploadTaskState.PAUSED) {\n              logger.log('upload paused');\n            } else if (this.state === AWSS3UploadTaskState.CANCELLED) {\n              logger.log('upload aborted');\n            } else {\n              logger.error('error starting next part of upload: ', err_2);\n            }\n            // axios' cancel will also throw an error, however we don't need to emit an event in that case as it's an\n            // expected behavior\n            if (!axios.isCancel(err_2) && err_2.message !== AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE) {\n              this._emitEvent(TaskEvents.ERROR, err_2);\n              this.pause();\n            }\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._startNextPart = function () {\n    if (this.queued.length > 0 && this.state !== AWSS3UploadTaskState.PAUSED) {\n      var cancelTokenSource = axios.CancelToken.source();\n      var nextPart = this.queued.shift();\n      this.inProgress.push({\n        uploadPartInput: nextPart,\n        s3Request: this._makeUploadPartRequest(nextPart, cancelTokenSource),\n        cancel: cancelTokenSource.cancel\n      });\n    }\n  };\n  /**\n   * Verify on S3 side that the file size matches the one on the client side.\n   *\n   * @async\n   * @throws throws an error if the file size does not match between local copy of the file and the file on s3.\n   */\n  AWSS3UploadTask.prototype._verifyFileSize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var valid, obj, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this._listSingleFile({\n              key: this.params.Key,\n              bucket: this.params.Bucket\n            })];\n          case 1:\n            obj = _a.sent();\n            valid = Boolean(obj && obj.Size === this.file.size);\n            return [3 /*break*/, 3];\n          case 2:\n            e_1 = _a.sent();\n            logger.log('Could not get file on s3 for size matching: ', e_1);\n            // Don't gate verification on auth or other errors\n            // unrelated to file size verification\n            return [2 /*return*/];\n          case 3:\n            if (!valid) {\n              throw new Error('File size does not match between local file and file on s3');\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._isDone = function () {\n    return !this.queued.length && !this.inProgress.length && this.bytesUploaded === this.totalBytes;\n  };\n  AWSS3UploadTask.prototype._createParts = function () {\n    var size = this.file.size;\n    var parts = [];\n    for (var bodyStart = 0; bodyStart < size;) {\n      var bodyEnd = Math.min(bodyStart + this.partSize, size);\n      parts.push({\n        Body: this.file.slice(bodyStart, bodyEnd),\n        Key: this.params.Key,\n        Bucket: this.params.Bucket,\n        PartNumber: parts.length + 1,\n        UploadId: this.uploadId\n      });\n      bodyStart += this.partSize;\n    }\n    return parts;\n  };\n  AWSS3UploadTask.prototype._initCachedUploadParts = function (cachedParts) {\n    this.bytesUploaded += cachedParts.reduce(function (acc, part) {\n      return acc + part.Size;\n    }, 0);\n    // Find the set of part numbers that have already been uploaded\n    var uploadedPartNumSet = new Set(cachedParts.map(function (part) {\n      return part.PartNumber;\n    }));\n    this.queued = this.queued.filter(function (part) {\n      return !uploadedPartNumSet.has(part.PartNumber);\n    });\n    this.completedParts = cachedParts.map(function (part) {\n      return {\n        PartNumber: part.PartNumber,\n        ETag: part.ETag\n      };\n    });\n    this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytes\n    });\n  };\n  AWSS3UploadTask.prototype._initMultipartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.s3client.send(new CreateMultipartUploadCommand(this.params))];\n          case 1:\n            res = _a.sent();\n            this._cache({\n              uploadId: res.UploadId,\n              lastTouched: Date.now(),\n              bucket: this.params.Bucket,\n              key: this.params.Key,\n              fileName: this.file instanceof File ? this.file.name : ''\n            });\n            return [2 /*return*/, res.UploadId];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._initializeUploadTask = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, parts, uploadId, uploadId, err_3;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.state = AWSS3UploadTaskState.IN_PROGRESS;\n            this.partSize = calculatePartSize(this.totalBytes);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 7,, 8]);\n            return [4 /*yield*/, this._isCached()];\n          case 2:\n            if (!_b.sent()) return [3 /*break*/, 4];\n            return [4 /*yield*/, this._findCachedUploadParts()];\n          case 3:\n            _a = _b.sent(), parts = _a.parts, uploadId = _a.uploadId;\n            this.uploadId = uploadId;\n            this.queued = this._createParts();\n            this._initCachedUploadParts(parts);\n            this._startUpload();\n            return [3 /*break*/, 6];\n          case 4:\n            if (!!this.uploadId) return [3 /*break*/, 6];\n            return [4 /*yield*/, this._initMultipartUpload()];\n          case 5:\n            uploadId = _b.sent();\n            this.uploadId = uploadId;\n            this.queued = this._createParts();\n            this._startUpload();\n            _b.label = 6;\n          case 6:\n            return [3 /*break*/, 8];\n          case 7:\n            err_3 = _b.sent();\n            if (!axios.isCancel(err_3)) {\n              logger.error('Error initializing the upload task', err_3);\n              this._emitEvent(TaskEvents.ERROR, err_3);\n            }\n            return [3 /*break*/, 8];\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype.resume = function () {\n    if (this.state === AWSS3UploadTaskState.CANCELLED) {\n      logger.warn('This task has already been cancelled');\n    } else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n      logger.warn('This task has already been completed');\n    } else if (this.state === AWSS3UploadTaskState.IN_PROGRESS) {\n      logger.warn('Upload task already in progress');\n      // first time running resume, find any cached parts on s3 or start a new multipart upload request before\n      // starting the upload\n    } else if (!this.uploadId) {\n      this._initializeUploadTask();\n    } else {\n      this._startUpload();\n    }\n  };\n  AWSS3UploadTask.prototype._startUpload = function () {\n    this.state = AWSS3UploadTaskState.IN_PROGRESS;\n    for (var i = 0; i < this.queueSize; i++) {\n      this._startNextPart();\n    }\n  };\n  AWSS3UploadTask.prototype._cancel = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.state === AWSS3UploadTaskState.CANCELLED)) return [3 /*break*/, 1];\n            logger.warn('This task has already been cancelled');\n            return [2 /*return*/, false];\n          case 1:\n            if (!(this.state === AWSS3UploadTaskState.COMPLETED)) return [3 /*break*/, 2];\n            logger.warn('This task has already been completed');\n            return [2 /*return*/, false];\n          case 2:\n            this.pause();\n            this.queued = [];\n            this.completedParts = [];\n            this.bytesUploaded = 0;\n            this.state = AWSS3UploadTaskState.CANCELLED;\n            _a.label = 3;\n          case 3:\n            _a.trys.push([3, 6,, 7]);\n            return [4 /*yield*/, this.s3client.send(new AbortMultipartUploadCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: this.uploadId\n            }))];\n          case 4:\n            _a.sent();\n            return [4 /*yield*/, this._removeFromCache()];\n          case 5:\n            _a.sent();\n            return [2 /*return*/, true];\n          case 6:\n            err_4 = _a.sent();\n            logger.error('Error cancelling upload task', err_4);\n            return [2 /*return*/, false];\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * pause this particular upload task\n   **/\n  AWSS3UploadTask.prototype.pause = function () {\n    var _a;\n    if (this.state === AWSS3UploadTaskState.CANCELLED) {\n      logger.warn('This task has already been cancelled');\n    } else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n      logger.warn('This task has already been completed');\n    } else if (this.state === AWSS3UploadTaskState.PAUSED) {\n      logger.warn('This task is already paused');\n    }\n    this.state = AWSS3UploadTaskState.PAUSED;\n    // Use axios cancel token to abort the part request immediately\n    // Add the inProgress parts back to pending\n    var removedInProgressReq = this.inProgress.splice(0, this.inProgress.length);\n    removedInProgressReq.forEach(function (req) {\n      req.cancel(AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE);\n    });\n    // Put all removed in progress parts back into the queue\n    (_a = this.queued).unshift.apply(_a, __spread(removedInProgressReq.map(function (req) {\n      return req.uploadPartInput;\n    })));\n  };\n  return AWSS3UploadTask;\n}();\nexport { AWSS3UploadTask };","map":{"version":3,"names":["UploadPartCommand","CompleteMultipartUploadCommand","AbortMultipartUploadCommand","ListPartsCommand","CreateMultipartUploadCommand","ListObjectsV2Command","axios","Logger","calculatePartSize","DEFAULT_PART_SIZE","DEFAULT_QUEUE_SIZE","MAX_OBJECT_SIZE","byteLength","isFile","AWSS3ProviderUploadErrorStrings","SET_CONTENT_LENGTH_HEADER","UPLOADS_STORAGE_KEY","logger","AWSS3UploadTaskState","TaskEvents","comparePartNumber","a","b","PartNumber","AWSS3UploadTask","_a","s3Client","file","emitter","storage","params","level","prefixPromise","queueSize","partSize","inProgress","completedParts","queued","bytesUploaded","totalBytes","state","INIT","s3client","middlewareStack","remove","storageSync","Promise","resolve","size","fileId","_getFileId","_validateParams","on","ERROR","Object","defineProperty","prototype","get","IN_PROGRESS","_listSingleFile","key","bucket","send","Bucket","Prefix","listObjectRes","_c","sent","_b","Contents","prefix","obj","find","o","Key","name","lastModified","type","join","_findCachedUploadParts","_listCachedUploadTasks","uploadRequests","keys","length","hasOwnProperty","call","parts","uploadId","cachedUploadFileData","lastTouched","Date","now","setItem","JSON","stringify","UploadId","listPartsOutput","Parts","_emitEvent","event","payload","emit","Error","tasks","getItem","parse","_cache","fileMetadata","_isCached","apply","_removeFromCache","_onPartUploadCompletion","eTag","partNumber","chunk","push","ETag","UPLOAD_PROGRESS","loaded","total","filter","job","uploadPartInput","PAUSED","_startNextPart","_isDone","_completeUpload","MultipartUpload","sort","_verifyFileSize","UPLOAD_COMPLETE","COMPLETED","error","err_1","_makeUploadPartRequest","input","cancelTokenSource","res","Body","log","CANCELLED","err_2","isCancel","message","UPLOAD_PAUSED_MESSAGE","pause","CancelToken","source","nextPart","shift","s3Request","cancel","valid","Boolean","Size","e_1","_createParts","bodyStart","bodyEnd","Math","min","slice","_initCachedUploadParts","cachedParts","reduce","acc","part","uploadedPartNumSet","Set","map","has","_initMultipartUpload","fileName","File","_initializeUploadTask","_startUpload","err_3","resume","warn","i","_cancel","err_4","removedInProgressReq","splice","forEach","req","unshift","__spread"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\storage\\src\\providers\\AWSS3UploadTask.ts"],"sourcesContent":["import {\n\tUploadPartCommandInput,\n\tCompletedPart,\n\tS3Client,\n\tUploadPartCommand,\n\tCompleteMultipartUploadCommand,\n\tPart,\n\tAbortMultipartUploadCommand,\n\tListPartsCommand,\n\tCreateMultipartUploadCommand,\n\tPutObjectCommandInput,\n\tListObjectsV2Command,\n} from '@aws-sdk/client-s3';\nimport * as events from 'events';\nimport axios, { Canceler, CancelTokenSource } from 'axios';\nimport { HttpHandlerOptions } from '@aws-sdk/types';\nimport { Logger } from '@aws-amplify/core';\nimport { UploadTask } from '../types/Provider';\nimport {\n\tcalculatePartSize,\n\tDEFAULT_PART_SIZE,\n\tDEFAULT_QUEUE_SIZE,\n\tMAX_OBJECT_SIZE,\n} from '../common/S3ClientUtils';\nimport { byteLength, isFile } from '../common/StorageUtils';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nimport {\n\tSET_CONTENT_LENGTH_HEADER,\n\tUPLOADS_STORAGE_KEY,\n} from '../common/StorageConstants';\nimport { StorageAccessLevel } from '..';\n\nconst logger = new Logger('AWSS3UploadTask');\nexport enum AWSS3UploadTaskState {\n\tINIT,\n\tIN_PROGRESS,\n\tPAUSED,\n\tCANCELLED,\n\tCOMPLETED,\n}\n\nexport enum TaskEvents {\n\tCANCEL = 'cancel',\n\tUPLOAD_COMPLETE = 'uploadComplete',\n\tUPLOAD_PROGRESS = 'uploadPartProgress',\n\tERROR = 'error',\n}\n\nexport interface AWSS3UploadTaskParams {\n\ts3Client: S3Client;\n\tfile: Blob;\n\tstorage: Storage;\n\tlevel: StorageAccessLevel;\n\tparams: PutObjectCommandInput;\n\tprefixPromise: Promise<string>;\n\temitter?: events.EventEmitter;\n}\n\nexport interface InProgressRequest {\n\tuploadPartInput: UploadPartCommandInput;\n\ts3Request: Promise<any>;\n\tcancel: Canceler;\n}\n\nexport interface UploadTaskCompleteEvent {\n\tkey?: string;\n}\n\nexport interface UploadTaskProgressEvent {\n\t/**\n\t * bytes that has been sent to S3 so far\n\t */\n\tloaded: number;\n\t/**\n\t * total bytes that needs to be sent to S3\n\t */\n\ttotal: number;\n}\n\nexport interface FileMetadata {\n\tbucket: string;\n\tfileName: string;\n\tkey: string;\n\t// Unix timestamp in ms\n\tlastTouched: number;\n\tuploadId: string;\n}\n\nfunction comparePartNumber(a: CompletedPart, b: CompletedPart) {\n\treturn a.PartNumber - b.PartNumber;\n}\n\nexport class AWSS3UploadTask implements UploadTask {\n\tprivate readonly emitter: events.EventEmitter;\n\tprivate readonly file: Blob;\n\tprivate readonly queueSize = DEFAULT_QUEUE_SIZE;\n\tprivate readonly s3client: S3Client;\n\tprivate readonly storage: Storage;\n\tprivate readonly storageSync: Promise<any>;\n\tprivate readonly fileId: string;\n\tprivate readonly params: PutObjectCommandInput;\n\tprivate readonly prefixPromise: Promise<string>;\n\tprivate partSize: number = DEFAULT_PART_SIZE;\n\tprivate inProgress: InProgressRequest[] = [];\n\tprivate completedParts: CompletedPart[] = [];\n\tprivate queued: UploadPartCommandInput[] = [];\n\tprivate bytesUploaded: number = 0;\n\tprivate totalBytes: number = 0;\n\tprivate uploadId: string;\n\n\tpublic state: AWSS3UploadTaskState = AWSS3UploadTaskState.INIT;\n\n\tconstructor({\n\t\ts3Client,\n\t\tfile,\n\t\temitter,\n\t\tstorage,\n\t\tparams,\n\t\tlevel,\n\t\tprefixPromise,\n\t}: AWSS3UploadTaskParams) {\n\t\tthis.prefixPromise = prefixPromise;\n\t\tthis.s3client = s3Client;\n\t\tthis.s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n\t\tthis.storage = storage;\n\t\tthis.storageSync = Promise.resolve();\n\t\tif (typeof this.storage['sync'] === 'function') {\n\t\t\tthis.storageSync = this.storage['sync']();\n\t\t}\n\t\tthis.params = params;\n\t\tthis.file = file;\n\t\tthis.totalBytes = this.file.size;\n\t\tthis.bytesUploaded = 0;\n\t\tthis.emitter = emitter;\n\t\tthis.queued = [];\n\t\tthis.fileId = this._getFileId(level);\n\t\tthis._validateParams();\n\t\t// event emitter will re-throw an error if an event emits an error unless there's a listener, attaching a no-op\n\t\t// function to it unless user adds their own onError callback\n\t\tthis.emitter.on(TaskEvents.ERROR, () => {});\n\t}\n\n\tget percent() {\n\t\treturn (this.bytesUploaded / this.totalBytes) * 100;\n\t}\n\n\tget isInProgress() {\n\t\treturn this.state === AWSS3UploadTaskState.IN_PROGRESS;\n\t}\n\n\tprivate async _listSingleFile({\n\t\tkey,\n\t\tbucket,\n\t}: {\n\t\tkey: string;\n\t\tbucket: string;\n\t}) {\n\t\tconst listObjectRes = await this.s3client.send(\n\t\t\tnew ListObjectsV2Command({\n\t\t\t\tBucket: bucket,\n\t\t\t\tPrefix: key,\n\t\t\t})\n\t\t);\n\t\tconst { Contents = [] } = listObjectRes;\n\t\tconst prefix = await this.prefixPromise;\n\t\tconst obj = Contents.find(o => o.Key === `${prefix}${key}`);\n\t\treturn obj;\n\t}\n\n\tprivate _getFileId(level: StorageAccessLevel): string {\n\t\t// We should check if it's a File first because File is also instance of a Blob\n\t\tif (isFile(this.file)) {\n\t\t\treturn [\n\t\t\t\tthis.file.name,\n\t\t\t\tthis.file.lastModified,\n\t\t\t\tthis.file.size,\n\t\t\t\tthis.file.type,\n\t\t\t\tthis.params.Bucket,\n\t\t\t\tlevel,\n\t\t\t\tthis.params.Key,\n\t\t\t].join('-');\n\t\t} else {\n\t\t\treturn [\n\t\t\t\tthis.file.size,\n\t\t\t\tthis.file.type,\n\t\t\t\tthis.params.Bucket,\n\t\t\t\tlevel,\n\t\t\t\tthis.params.Key,\n\t\t\t].join('-');\n\t\t}\n\t}\n\n\tprivate async _findCachedUploadParts(): Promise<{\n\t\tparts: Part[];\n\t\tuploadId: string;\n\t}> {\n\t\tconst uploadRequests = await this._listCachedUploadTasks();\n\n\t\tif (\n\t\t\tObject.keys(uploadRequests).length === 0 ||\n\t\t\t!Object.prototype.hasOwnProperty.call(uploadRequests, this.fileId)\n\t\t) {\n\t\t\treturn { parts: [], uploadId: null };\n\t\t}\n\n\t\tconst cachedUploadFileData = uploadRequests[this.fileId];\n\t\tcachedUploadFileData.lastTouched = Date.now();\n\t\tthis.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n\n\t\tconst listPartsOutput = await this.s3client.send(\n\t\t\tnew ListPartsCommand({\n\t\t\t\tBucket: this.params.Bucket,\n\t\t\t\tKey: this.params.Key,\n\t\t\t\tUploadId: cachedUploadFileData.uploadId,\n\t\t\t})\n\t\t);\n\n\t\treturn {\n\t\t\tparts: listPartsOutput.Parts || [],\n\t\t\tuploadId: cachedUploadFileData.uploadId,\n\t\t};\n\t}\n\n\tprivate _emitEvent<T = any>(event: string, payload: T) {\n\t\tthis.emitter.emit(event, payload);\n\t}\n\n\tprivate _validateParams() {\n\t\tif (this.totalBytes > MAX_OBJECT_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`File size bigger than S3 Object limit of 5TB, got ${this.totalBytes} Bytes`\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async _listCachedUploadTasks(): Promise<\n\t\tRecord<string, FileMetadata>\n\t> {\n\t\tawait this.storageSync;\n\t\tconst tasks = this.storage.getItem(UPLOADS_STORAGE_KEY) || '{}';\n\t\treturn JSON.parse(tasks);\n\t}\n\n\tprivate async _cache(fileMetadata: FileMetadata): Promise<void> {\n\t\tconst uploadRequests = await this._listCachedUploadTasks();\n\t\tuploadRequests[this.fileId] = fileMetadata;\n\t\tthis.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n\t}\n\n\tprivate async _isCached(): Promise<boolean> {\n\t\treturn Object.prototype.hasOwnProperty.call(\n\t\t\tawait this._listCachedUploadTasks(),\n\t\t\tthis.fileId\n\t\t);\n\t}\n\n\tprivate async _removeFromCache(): Promise<void> {\n\t\tconst uploadRequests = await this._listCachedUploadTasks();\n\t\tdelete uploadRequests[this.fileId];\n\t\tthis.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n\t}\n\n\tprivate async _onPartUploadCompletion({\n\t\teTag,\n\t\tpartNumber,\n\t\tchunk,\n\t}: {\n\t\teTag: string;\n\t\tpartNumber: number;\n\t\tchunk: UploadPartCommandInput['Body'];\n\t}) {\n\t\tthis.completedParts.push({\n\t\t\tETag: eTag,\n\t\t\tPartNumber: partNumber,\n\t\t});\n\t\tthis.bytesUploaded += byteLength(chunk);\n\t\tthis._emitEvent<UploadTaskProgressEvent>(TaskEvents.UPLOAD_PROGRESS, {\n\t\t\tloaded: this.bytesUploaded,\n\t\t\ttotal: this.totalBytes,\n\t\t});\n\t\t// Remove the completed item from the inProgress array\n\t\tthis.inProgress = this.inProgress.filter(\n\t\t\tjob => job.uploadPartInput.PartNumber !== partNumber\n\t\t);\n\t\tif (this.queued.length && this.state !== AWSS3UploadTaskState.PAUSED)\n\t\t\tthis._startNextPart();\n\t\tif (this._isDone()) this._completeUpload();\n\t}\n\n\tprivate async _completeUpload() {\n\t\ttry {\n\t\t\tawait this.s3client.send(\n\t\t\t\tnew CompleteMultipartUploadCommand({\n\t\t\t\t\tBucket: this.params.Bucket,\n\t\t\t\t\tKey: this.params.Key,\n\t\t\t\t\tUploadId: this.uploadId,\n\t\t\t\t\tMultipartUpload: {\n\t\t\t\t\t\t// Parts are not always completed in order, we need to manually sort them\n\t\t\t\t\t\tParts: this.completedParts.sort(comparePartNumber),\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t);\n\t\t\tawait this._verifyFileSize();\n\t\t\tthis._emitEvent<UploadTaskCompleteEvent>(TaskEvents.UPLOAD_COMPLETE, {\n\t\t\t\tkey: this.params.Key,\n\t\t\t});\n\t\t\tthis._removeFromCache();\n\t\t\tthis.state = AWSS3UploadTaskState.COMPLETED;\n\t\t} catch (err) {\n\t\t\tlogger.error('error completing upload', err);\n\t\t\tthis._emitEvent(TaskEvents.ERROR, err);\n\t\t}\n\t}\n\n\tprivate async _makeUploadPartRequest(\n\t\tinput: UploadPartCommandInput,\n\t\tcancelTokenSource: CancelTokenSource\n\t) {\n\t\ttry {\n\t\t\tconst res = await this.s3client.send(new UploadPartCommand(input), {\n\t\t\t\tcancelTokenSource,\n\t\t\t} as HttpHandlerOptions);\n\t\t\tawait this._onPartUploadCompletion({\n\t\t\t\teTag: res.ETag,\n\t\t\t\tpartNumber: input.PartNumber,\n\t\t\t\tchunk: input.Body,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tif (this.state === AWSS3UploadTaskState.PAUSED) {\n\t\t\t\tlogger.log('upload paused');\n\t\t\t} else if (this.state === AWSS3UploadTaskState.CANCELLED) {\n\t\t\t\tlogger.log('upload aborted');\n\t\t\t} else {\n\t\t\t\tlogger.error('error starting next part of upload: ', err);\n\t\t\t}\n\t\t\t// axios' cancel will also throw an error, however we don't need to emit an event in that case as it's an\n\t\t\t// expected behavior\n\t\t\tif (\n\t\t\t\t!axios.isCancel(err) &&\n\t\t\t\terr.message !== AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE\n\t\t\t) {\n\t\t\t\tthis._emitEvent(TaskEvents.ERROR, err);\n\t\t\t\tthis.pause();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _startNextPart() {\n\t\tif (this.queued.length > 0 && this.state !== AWSS3UploadTaskState.PAUSED) {\n\t\t\tconst cancelTokenSource = axios.CancelToken.source();\n\t\t\tconst nextPart = this.queued.shift();\n\t\t\tthis.inProgress.push({\n\t\t\t\tuploadPartInput: nextPart,\n\t\t\t\ts3Request: this._makeUploadPartRequest(nextPart, cancelTokenSource),\n\t\t\t\tcancel: cancelTokenSource.cancel,\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Verify on S3 side that the file size matches the one on the client side.\n\t *\n\t * @async\n\t * @throws throws an error if the file size does not match between local copy of the file and the file on s3.\n\t */\n\tprivate async _verifyFileSize() {\n\t\tlet valid: boolean;\n\t\ttry {\n\t\t\tconst obj = await this._listSingleFile({\n\t\t\t\tkey: this.params.Key,\n\t\t\t\tbucket: this.params.Bucket,\n\t\t\t});\n\t\t\tvalid = Boolean(obj && obj.Size === this.file.size);\n\t\t} catch (e) {\n\t\t\tlogger.log('Could not get file on s3 for size matching: ', e);\n\t\t\t// Don't gate verification on auth or other errors\n\t\t\t// unrelated to file size verification\n\t\t\treturn;\n\t\t}\n\n\t\tif (!valid) {\n\t\t\tthrow new Error(\n\t\t\t\t'File size does not match between local file and file on s3'\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _isDone() {\n\t\treturn (\n\t\t\t!this.queued.length &&\n\t\t\t!this.inProgress.length &&\n\t\t\tthis.bytesUploaded === this.totalBytes\n\t\t);\n\t}\n\n\tprivate _createParts() {\n\t\tconst size = this.file.size;\n\t\tconst parts: UploadPartCommandInput[] = [];\n\t\tfor (let bodyStart = 0; bodyStart < size; ) {\n\t\t\tconst bodyEnd = Math.min(bodyStart + this.partSize, size);\n\t\t\tparts.push({\n\t\t\t\tBody: this.file.slice(bodyStart, bodyEnd),\n\t\t\t\tKey: this.params.Key,\n\t\t\t\tBucket: this.params.Bucket,\n\t\t\t\tPartNumber: parts.length + 1,\n\t\t\t\tUploadId: this.uploadId,\n\t\t\t});\n\t\t\tbodyStart += this.partSize;\n\t\t}\n\t\treturn parts;\n\t}\n\n\tprivate _initCachedUploadParts(cachedParts: Part[]) {\n\t\tthis.bytesUploaded += cachedParts.reduce((acc, part) => acc + part.Size, 0);\n\t\t// Find the set of part numbers that have already been uploaded\n\t\tconst uploadedPartNumSet = new Set(\n\t\t\tcachedParts.map(part => part.PartNumber)\n\t\t);\n\t\tthis.queued = this.queued.filter(\n\t\t\tpart => !uploadedPartNumSet.has(part.PartNumber)\n\t\t);\n\t\tthis.completedParts = cachedParts.map(part => ({\n\t\t\tPartNumber: part.PartNumber,\n\t\t\tETag: part.ETag,\n\t\t}));\n\t\tthis._emitEvent<UploadTaskProgressEvent>(TaskEvents.UPLOAD_PROGRESS, {\n\t\t\tloaded: this.bytesUploaded,\n\t\t\ttotal: this.totalBytes,\n\t\t});\n\t}\n\n\tprivate async _initMultipartUpload() {\n\t\tconst res = await this.s3client.send(\n\t\t\tnew CreateMultipartUploadCommand(this.params)\n\t\t);\n\t\tthis._cache({\n\t\t\tuploadId: res.UploadId,\n\t\t\tlastTouched: Date.now(),\n\t\t\tbucket: this.params.Bucket,\n\t\t\tkey: this.params.Key,\n\t\t\tfileName: this.file instanceof File ? this.file.name : '',\n\t\t});\n\t\treturn res.UploadId;\n\t}\n\n\tprivate async _initializeUploadTask() {\n\t\tthis.state = AWSS3UploadTaskState.IN_PROGRESS;\n\t\tthis.partSize = calculatePartSize(this.totalBytes);\n\t\ttry {\n\t\t\tif (await this._isCached()) {\n\t\t\t\tconst { parts, uploadId } = await this._findCachedUploadParts();\n\t\t\t\tthis.uploadId = uploadId;\n\t\t\t\tthis.queued = this._createParts();\n\t\t\t\tthis._initCachedUploadParts(parts);\n\t\t\t\tthis._startUpload();\n\t\t\t} else {\n\t\t\t\tif (!this.uploadId) {\n\t\t\t\t\tconst uploadId = await this._initMultipartUpload();\n\t\t\t\t\tthis.uploadId = uploadId;\n\t\t\t\t\tthis.queued = this._createParts();\n\t\t\t\t\tthis._startUpload();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (!axios.isCancel(err)) {\n\t\t\t\tlogger.error('Error initializing the upload task', err);\n\t\t\t\tthis._emitEvent(TaskEvents.ERROR, err);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic resume(): void {\n\t\tif (this.state === AWSS3UploadTaskState.CANCELLED) {\n\t\t\tlogger.warn('This task has already been cancelled');\n\t\t} else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n\t\t\tlogger.warn('This task has already been completed');\n\t\t} else if (this.state === AWSS3UploadTaskState.IN_PROGRESS) {\n\t\t\tlogger.warn('Upload task already in progress');\n\t\t\t// first time running resume, find any cached parts on s3 or start a new multipart upload request before\n\t\t\t// starting the upload\n\t\t} else if (!this.uploadId) {\n\t\t\tthis._initializeUploadTask();\n\t\t} else {\n\t\t\tthis._startUpload();\n\t\t}\n\t}\n\n\tprivate _startUpload() {\n\t\tthis.state = AWSS3UploadTaskState.IN_PROGRESS;\n\t\tfor (let i = 0; i < this.queueSize; i++) {\n\t\t\tthis._startNextPart();\n\t\t}\n\t}\n\n\tasync _cancel(): Promise<boolean> {\n\t\tif (this.state === AWSS3UploadTaskState.CANCELLED) {\n\t\t\tlogger.warn('This task has already been cancelled');\n\t\t\treturn false;\n\t\t} else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n\t\t\tlogger.warn('This task has already been completed');\n\t\t\treturn false;\n\t\t} else {\n\t\t\tthis.pause();\n\t\t\tthis.queued = [];\n\t\t\tthis.completedParts = [];\n\t\t\tthis.bytesUploaded = 0;\n\t\t\tthis.state = AWSS3UploadTaskState.CANCELLED;\n\t\t\ttry {\n\t\t\t\tawait this.s3client.send(\n\t\t\t\t\tnew AbortMultipartUploadCommand({\n\t\t\t\t\t\tBucket: this.params.Bucket,\n\t\t\t\t\t\tKey: this.params.Key,\n\t\t\t\t\t\tUploadId: this.uploadId,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tawait this._removeFromCache();\n\t\t\t\treturn true;\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error('Error cancelling upload task', err);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * pause this particular upload task\n\t **/\n\tpublic pause(): void {\n\t\tif (this.state === AWSS3UploadTaskState.CANCELLED) {\n\t\t\tlogger.warn('This task has already been cancelled');\n\t\t} else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n\t\t\tlogger.warn('This task has already been completed');\n\t\t} else if (this.state === AWSS3UploadTaskState.PAUSED) {\n\t\t\tlogger.warn('This task is already paused');\n\t\t}\n\t\tthis.state = AWSS3UploadTaskState.PAUSED;\n\t\t// Use axios cancel token to abort the part request immediately\n\t\t// Add the inProgress parts back to pending\n\t\tconst removedInProgressReq = this.inProgress.splice(\n\t\t\t0,\n\t\t\tthis.inProgress.length\n\t\t);\n\t\tremovedInProgressReq.forEach(req => {\n\t\t\treq.cancel(AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE);\n\t\t});\n\t\t// Put all removed in progress parts back into the queue\n\t\tthis.queued.unshift(\n\t\t\t...removedInProgressReq.map(req => req.uploadPartInput)\n\t\t);\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}