{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\n/**\n * This middleware modifies the input on S3 CreateBucket requests.  If the LocationConstraint has not been set, this\n * middleware will set a LocationConstraint to match the configured region.  The CreateBucketConfiguration will be\n * removed entirely on requests to the us-east-1 region.\n */\nexport function locationConstraintMiddleware(options) {\n  var _this = this;\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var CreateBucketConfiguration, region;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              CreateBucketConfiguration = args.input.CreateBucketConfiguration;\n              return [4 /*yield*/, options.region()];\n            case 1:\n              region = _a.sent();\n              if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {\n                args = __assign(__assign({}, args), {\n                  input: __assign(__assign({}, args.input), {\n                    CreateBucketConfiguration: region === \"us-east-1\" ? undefined : {\n                      LocationConstraint: region\n                    }\n                  })\n                });\n              }\n              return [2 /*return*/, next(args)];\n          }\n        });\n      });\n    };\n  };\n}\nexport var locationConstraintMiddlewareOptions = {\n  step: \"initialize\",\n  tags: [\"LOCATION_CONSTRAINT\", \"CREATE_BUCKET_CONFIGURATION\"],\n  name: \"locationConstraintMiddleware\",\n  override: true\n};\nexport var getLocationConstraintPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(locationConstraintMiddleware(config), locationConstraintMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"names":["locationConstraintMiddleware","options","_this","next","args","__awaiter","CreateBucketConfiguration","input","region","_a","sent","LocationConstraint","__assign","undefined","locationConstraintMiddlewareOptions","step","tags","name","override","getLocationConstraintPlugin","config","applyToStack","clientStack","add"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-sdk\\middleware-location-constraint\\src\\index.ts"],"sourcesContent":["import {\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  InitializeMiddleware,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nimport { LocationConstraintResolvedConfig } from \"./configuration\";\n\n/**\n * This middleware modifies the input on S3 CreateBucket requests.  If the LocationConstraint has not been set, this\n * middleware will set a LocationConstraint to match the configured region.  The CreateBucketConfiguration will be\n * removed entirely on requests to the us-east-1 region.\n */\n\nexport function locationConstraintMiddleware(\n  options: LocationConstraintResolvedConfig\n): InitializeMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: InitializeHandler<any, Output>\n  ): InitializeHandler<any, Output> => async (\n    args: InitializeHandlerArguments<any>\n  ): Promise<InitializeHandlerOutput<Output>> => {\n    const { CreateBucketConfiguration } = args.input;\n    //After region config resolution, region is a Provider<string>\n    const region = await options.region();\n    if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {\n      args = {\n        ...args,\n        input: {\n          ...args.input,\n          CreateBucketConfiguration: region === \"us-east-1\" ? undefined : { LocationConstraint: region },\n        },\n      };\n    }\n\n    return next(args);\n  };\n}\n\nexport const locationConstraintMiddlewareOptions: InitializeHandlerOptions = {\n  step: \"initialize\",\n  tags: [\"LOCATION_CONSTRAINT\", \"CREATE_BUCKET_CONFIGURATION\"],\n  name: \"locationConstraintMiddleware\",\n  override: true,\n};\n\nexport const getLocationConstraintPlugin = (config: LocationConstraintResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(locationConstraintMiddleware(config), locationConstraintMiddlewareOptions);\n  },\n});\n"],"mappings":";AAYA;;;;;AAMA,OAAM,SAAUA,4BAA4BA,CAC1CC,OAAyC;EAD3C,IAAAC,KAAA;EAGE,OAAO,UACLC,IAAoC;IACD,iBACnCC,IAAqC;MAAA,OAAAC,SAAA,CAAAH,KAAA;;;;;cAE7BI,yBAAyB,GAAKF,IAAI,CAACG,KAAK,CAAAD,yBAAf;cAElB,qBAAML,OAAO,CAACO,MAAM,EAAE;;cAA/BA,MAAM,GAAGC,EAAA,CAAAC,IAAA,EAAsB;cACrC,IAAI,CAACJ,yBAAyB,IAAI,CAACA,yBAAyB,CAACK,kBAAkB,EAAE;gBAC/EP,IAAI,GAAAQ,QAAA,CAAAA,QAAA,KACCR,IAAI;kBACPG,KAAK,EAAAK,QAAA,CAAAA,QAAA,KACAR,IAAI,CAACG,KAAK;oBACbD,yBAAyB,EAAEE,MAAM,KAAK,WAAW,GAAGK,SAAS,GAAG;sBAAEF,kBAAkB,EAAEH;oBAAM;kBAAE;gBAAA,EAEjG;;cAGH,sBAAOL,IAAI,CAACC,IAAI,CAAC;;;;KAClB;EAjBoC,CAiBpC;AACH;AAEA,OAAO,IAAMU,mCAAmC,GAA6B;EAC3EC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,CAAC,qBAAqB,EAAE,6BAA6B,CAAC;EAC5DC,IAAI,EAAE,8BAA8B;EACpCC,QAAQ,EAAE;CACX;AAED,OAAO,IAAMC,2BAA2B,GAAG,SAAAA,CAACC,MAAwC;EAA0B,OAAC;IAC7GC,YAAY,EAAE,SAAAA,CAACC,WAAW;MACxBA,WAAW,CAACC,GAAG,CAACvB,4BAA4B,CAACoB,MAAM,CAAC,EAAEN,mCAAmC,CAAC;IAC5F;GACD;AAJ6G,CAI5G"},"metadata":{},"sourceType":"module","externalDependencies":[]}