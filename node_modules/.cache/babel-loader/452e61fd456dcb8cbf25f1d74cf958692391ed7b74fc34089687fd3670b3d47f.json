{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { EMPTY_HASH, UNSIGNED_PAYLOAD } from '../constants';\nimport { getHashedDataAsHex } from './dataHashHelpers';\n/**\n * Returns the hashed payload.\n *\n * @param body `body` (payload) from the request.\n * @returns String created using the payload in the body of the HTTP request as input to a hash function. This string\n * uses lowercase hexadecimal characters. If the payload is empty, return precalculated result of an empty hash.\n *\n * @internal\n */\nexport var getHashedPayload = function (body) {\n  // return precalculated empty hash if body is undefined or null\n  if (body == null) {\n    return EMPTY_HASH;\n  }\n  if (isSourceData(body)) {\n    var hashedData = getHashedDataAsHex(null, body);\n    return hashedData;\n  }\n  // Defined body is not signable. Return unsigned payload which may or may not be accepted by the service.\n  return UNSIGNED_PAYLOAD;\n};\nvar isSourceData = function (body) {\n  return typeof body === 'string' || ArrayBuffer.isView(body) || isArrayBuffer(body);\n};\nvar isArrayBuffer = function (arg) {\n  return typeof ArrayBuffer === 'function' && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === '[object ArrayBuffer]';\n};","map":{"version":3,"names":["EMPTY_HASH","UNSIGNED_PAYLOAD","getHashedDataAsHex","getHashedPayload","body","isSourceData","hashedData","ArrayBuffer","isView","isArrayBuffer","arg","Object","prototype","toString","call"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\utils\\getHashedPayload.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SourceData } from '@aws-sdk/types';\nimport { HttpRequest } from '../../../../../types';\nimport { EMPTY_HASH, UNSIGNED_PAYLOAD } from '../constants';\nimport { getHashedDataAsHex } from './dataHashHelpers';\n\n/**\n * Returns the hashed payload.\n *\n * @param body `body` (payload) from the request.\n * @returns String created using the payload in the body of the HTTP request as input to a hash function. This string\n * uses lowercase hexadecimal characters. If the payload is empty, return precalculated result of an empty hash.\n *\n * @internal\n */\nexport const getHashedPayload = (body: HttpRequest['body']): string => {\n\t// return precalculated empty hash if body is undefined or null\n\tif (body == null) {\n\t\treturn EMPTY_HASH;\n\t}\n\n\tif (isSourceData(body)) {\n\t\tconst hashedData = getHashedDataAsHex(null, body);\n\t\treturn hashedData;\n\t}\n\n\t// Defined body is not signable. Return unsigned payload which may or may not be accepted by the service.\n\treturn UNSIGNED_PAYLOAD;\n};\n\nconst isSourceData = (body: HttpRequest['body']): body is SourceData =>\n\ttypeof body === 'string' || ArrayBuffer.isView(body) || isArrayBuffer(body);\n\nconst isArrayBuffer = (arg: any): arg is ArrayBuffer =>\n\t(typeof ArrayBuffer === 'function' && arg instanceof ArrayBuffer) ||\n\tObject.prototype.toString.call(arg) === '[object ArrayBuffer]';\n"],"mappings":"AAAA;AACA;AAIA,SAASA,UAAU,EAAEC,gBAAgB,QAAQ,cAAc;AAC3D,SAASC,kBAAkB,QAAQ,mBAAmB;AAEtD;;;;;;;;;AASA,OAAO,IAAMC,gBAAgB,GAAG,SAAAA,CAACC,IAAyB;EACzD;EACA,IAAIA,IAAI,IAAI,IAAI,EAAE;IACjB,OAAOJ,UAAU;;EAGlB,IAAIK,YAAY,CAACD,IAAI,CAAC,EAAE;IACvB,IAAME,UAAU,GAAGJ,kBAAkB,CAAC,IAAI,EAAEE,IAAI,CAAC;IACjD,OAAOE,UAAU;;EAGlB;EACA,OAAOL,gBAAgB;AACxB,CAAC;AAED,IAAMI,YAAY,GAAG,SAAAA,CAACD,IAAyB;EAC9C,cAAOA,IAAI,KAAK,QAAQ,IAAIG,WAAW,CAACC,MAAM,CAACJ,IAAI,CAAC,IAAIK,aAAa,CAACL,IAAI,CAAC;AAA3E,CAA2E;AAE5E,IAAMK,aAAa,GAAG,SAAAA,CAACC,GAAQ;EAC9B,OAAC,OAAOH,WAAW,KAAK,UAAU,IAAIG,GAAG,YAAYH,WAAW,IAChEI,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,GAAG,CAAC,KAAK,sBAAsB;AAD9D,CAC8D"},"metadata":{},"sourceType":"module","externalDependencies":[]}