{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutObjectCommand, CreateMultipartUploadCommand, UploadPartCommand, CompleteMultipartUploadCommand, ListPartsCommand, AbortMultipartUploadCommand } from '@aws-sdk/client-s3';\nimport { SEND_UPLOAD_PROGRESS_EVENT, SEND_DOWNLOAD_PROGRESS_EVENT } from './axios-http-handler';\nimport * as events from 'events';\nimport { autoAdjustClockskewMiddleware, autoAdjustClockskewMiddlewareOptions, calculatePartSize, createPrefixMiddleware, createS3Client, prefixMiddlewareOptions, DEFAULT_PART_SIZE, DEFAULT_QUEUE_SIZE, MAX_OBJECT_SIZE } from '../common/S3ClientUtils';\nvar logger = new Logger('AWSS3ProviderManagedUpload');\nvar AWSS3ProviderManagedUpload = /** @class */function () {\n  function AWSS3ProviderManagedUpload(params, opts, emitter) {\n    this.opts = null;\n    this.completedParts = [];\n    this.partSize = DEFAULT_PART_SIZE;\n    // Progress reporting\n    this.bytesUploaded = 0;\n    this.totalBytesToUpload = 0;\n    this.emitter = null;\n    this.params = params;\n    this.opts = opts;\n    this.emitter = emitter;\n    this.s3client = this._createNewS3Client(opts, emitter);\n  }\n  AWSS3ProviderManagedUpload.prototype.upload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var putObjectCommand, _a, numberOfPartsToUpload, parts, start, error_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 9,, 11]);\n            this.body = this.validateAndSanitizeBody(this.params.Body);\n            this.totalBytesToUpload = this.byteLength(this.body);\n            if (!(this.totalBytesToUpload <= DEFAULT_PART_SIZE)) return [3 /*break*/, 1];\n            // Multipart upload is not required. Upload the sanitized body as is\n            this.params.Body = this.body;\n            putObjectCommand = new PutObjectCommand(this.params);\n            return [2 /*return*/, this.s3client.send(putObjectCommand)];\n          case 1:\n            // Step 1: Determine appropriate part size.\n            this.partSize = calculatePartSize(this.totalBytesToUpload);\n            // Step 2: Initiate the multi part upload\n            _a = this;\n            return [4 /*yield*/, this.createMultiPartUpload()];\n          case 2:\n            // Step 2: Initiate the multi part upload\n            _a.uploadId = _b.sent();\n            numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.partSize);\n            parts = this.createParts();\n            start = 0;\n            _b.label = 3;\n          case 3:\n            if (!(start < numberOfPartsToUpload)) return [3 /*break*/, 6];\n            // Upload as many as `queueSize` parts simultaneously\n            return [4 /*yield*/, this.uploadParts(this.uploadId, parts.slice(start, start + DEFAULT_QUEUE_SIZE))];\n          case 4:\n            // Upload as many as `queueSize` parts simultaneously\n            _b.sent();\n            _b.label = 5;\n          case 5:\n            start += DEFAULT_QUEUE_SIZE;\n            return [3 /*break*/, 3];\n          case 6:\n            parts.map(function (part) {\n              _this.removeEventListener(part);\n            });\n            return [4 /*yield*/, this.finishMultiPartUpload(this.uploadId)];\n          case 7:\n            // Step 3: Finalize the upload such that S3 can recreate the file\n            return [2 /*return*/, _b.sent()];\n          case 8:\n            return [3 /*break*/, 11];\n          case 9:\n            error_1 = _b.sent();\n            // if any error is thrown, call cleanup\n            return [4 /*yield*/, this.cleanup(this.uploadId)];\n          case 10:\n            // if any error is thrown, call cleanup\n            _b.sent();\n            logger.error('Error. Cancelling the multipart upload.');\n            throw error_1;\n          case 11:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.createParts = function () {\n    try {\n      var parts = [];\n      for (var bodyStart = 0; bodyStart < this.totalBytesToUpload;) {\n        var bodyEnd = Math.min(bodyStart + this.partSize, this.totalBytesToUpload);\n        parts.push({\n          bodyPart: this.body.slice(bodyStart, bodyEnd),\n          partNumber: parts.length + 1,\n          emitter: new events.EventEmitter(),\n          _lastUploadedBytes: 0\n        });\n        bodyStart += this.partSize;\n      }\n      return parts;\n    } catch (error) {\n      logger.error(error);\n      throw error;\n    }\n  };\n  AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var createMultiPartUploadCommand, response, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            createMultiPartUploadCommand = new CreateMultipartUploadCommand(this.params);\n            return [4 /*yield*/, this.s3client.send(createMultiPartUploadCommand)];\n          case 1:\n            response = _a.sent();\n            logger.debug(response.UploadId);\n            return [2 /*return*/, response.UploadId];\n          case 2:\n            error_2 = _a.sent();\n            logger.error(error_2);\n            throw error_2;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @private Not to be extended outside of tests\n   * @VisibleFotTesting\n   */\n  AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allResults, i, error_3;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, Promise.all(parts.map(function (part) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var options, _a, Key, Bucket, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, res;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      this.setupEventListener(part);\n                      options = {\n                        emitter: part.emitter\n                      };\n                      _a = this.params, Key = _a.Key, Bucket = _a.Bucket, SSECustomerAlgorithm = _a.SSECustomerAlgorithm, SSECustomerKey = _a.SSECustomerKey, SSECustomerKeyMD5 = _a.SSECustomerKeyMD5;\n                      return [4 /*yield*/, this.s3client.send(new UploadPartCommand(__assign(__assign(__assign({\n                        PartNumber: part.partNumber,\n                        Body: part.bodyPart,\n                        UploadId: uploadId,\n                        Key: Key,\n                        Bucket: Bucket\n                      }, SSECustomerAlgorithm && {\n                        SSECustomerAlgorithm: SSECustomerAlgorithm\n                      }), SSECustomerKey && {\n                        SSECustomerKey: SSECustomerKey\n                      }), SSECustomerKeyMD5 && {\n                        SSECustomerKeyMD5: SSECustomerKeyMD5\n                      })), options)];\n                    case 1:\n                      res = _b.sent();\n                      return [2 /*return*/, res];\n                  }\n                });\n              });\n            }))];\n          case 1:\n            allResults = _a.sent();\n            // The order of resolved promises is the same as input promise order.\n            for (i = 0; i < allResults.length; i++) {\n              this.completedParts.push({\n                PartNumber: parts[i].partNumber,\n                ETag: allResults[i].ETag\n              });\n            }\n            return [3 /*break*/, 3];\n          case 2:\n            error_3 = _a.sent();\n            logger.error('Error happened while uploading a part. Cancelling the multipart upload');\n            throw error_3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, completeUploadCommand, data, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId,\n              MultipartUpload: {\n                Parts: this.completedParts\n              }\n            };\n            completeUploadCommand = new CompleteMultipartUploadCommand(input);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.s3client.send(completeUploadCommand)];\n          case 2:\n            data = _a.sent();\n            return [2 /*return*/, data.Key];\n          case 3:\n            error_4 = _a.sent();\n            logger.error('Error happened while finishing the upload.');\n            throw error_4;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Reset this's state\n            this.body = null;\n            this.completedParts = [];\n            this.bytesUploaded = 0;\n            this.totalBytesToUpload = 0;\n            if (!uploadId) {\n              // This is a single part upload;\n              return [2 /*return*/];\n            }\n\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId\n            };\n            return [4 /*yield*/, this.s3client.send(new AbortMultipartUploadCommand(input))];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.s3client.send(new ListPartsCommand(input))];\n          case 2:\n            data = _a.sent();\n            if (data && data.Parts && data.Parts.length > 0) {\n              throw new Error('Multipart upload clean up failed.');\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.removeEventListener = function (part) {\n    part.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n    part.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n  };\n  AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {\n    var _this = this;\n    part.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n      _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);\n      part._lastUploadedBytes = progress.loaded;\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {\n    this.bytesUploaded += incrementalUpdate;\n    this.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytesToUpload,\n      part: partNumber,\n      key: this.params.Key\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {\n    if (input === null || input === undefined) return 0;\n    if (typeof input.byteLength === 'number') {\n      return input.byteLength;\n    } else if (typeof input.length === 'number') {\n      return input.length;\n    } else if (typeof input.size === 'number') {\n      return input.size;\n    } else if (typeof input.path === 'string') {\n      /* NodeJs Support\n      return require('fs').lstatSync(input.path).size;\n      */\n    } else {\n      throw new Error('Cannot determine length of ' + input);\n    }\n  };\n  AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {\n    var sanitizedBody = this.isGenericObject(body) ? JSON.stringify(body) : body;\n    /* TODO: streams and files for nodejs\n    if (\n        typeof body.path === 'string' &&\n        require('fs').lstatSync(body.path).size > 0\n    ) {\n        sanitizedBody = body;\n    } */\n    if (this.byteLength(sanitizedBody) > MAX_OBJECT_SIZE) {\n      throw new Error(\"File size bigger than S3 Object limit of 5TB, got \" + this.totalBytesToUpload + \" Bytes\");\n    }\n    return sanitizedBody;\n  };\n  AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {\n    if (body !== null && typeof body === 'object') {\n      try {\n        return !(this.byteLength(body) >= 0);\n      } catch (error) {\n        // If we cannot determine the length of the body, consider it\n        // as a generic object and upload a stringified version of it\n        return true;\n      }\n    }\n    return false;\n  };\n  AWSS3ProviderManagedUpload.prototype._createNewS3Client = function (config, emitter) {\n    var s3client = createS3Client(config, emitter);\n    s3client.middlewareStack.add(createPrefixMiddleware(this.opts, this.params.Key), prefixMiddlewareOptions);\n    s3client.middlewareStack.add(autoAdjustClockskewMiddleware(s3client.config), autoAdjustClockskewMiddlewareOptions);\n    return s3client;\n  };\n  return AWSS3ProviderManagedUpload;\n}();\nexport { AWSS3ProviderManagedUpload };","map":{"version":3,"names":["ConsoleLogger","Logger","PutObjectCommand","CreateMultipartUploadCommand","UploadPartCommand","CompleteMultipartUploadCommand","ListPartsCommand","AbortMultipartUploadCommand","SEND_UPLOAD_PROGRESS_EVENT","SEND_DOWNLOAD_PROGRESS_EVENT","events","autoAdjustClockskewMiddleware","autoAdjustClockskewMiddlewareOptions","calculatePartSize","createPrefixMiddleware","createS3Client","prefixMiddlewareOptions","DEFAULT_PART_SIZE","DEFAULT_QUEUE_SIZE","MAX_OBJECT_SIZE","logger","AWSS3ProviderManagedUpload","params","opts","emitter","completedParts","partSize","bytesUploaded","totalBytesToUpload","s3client","_createNewS3Client","prototype","upload","body","validateAndSanitizeBody","Body","byteLength","putObjectCommand","send","_a","createMultiPartUpload","uploadId","_b","sent","numberOfPartsToUpload","Math","ceil","parts","createParts","start","uploadParts","slice","map","part","_this","removeEventListener","finishMultiPartUpload","cleanup","error","error_1","bodyStart","bodyEnd","min","push","bodyPart","partNumber","length","EventEmitter","_lastUploadedBytes","createMultiPartUploadCommand","response","debug","UploadId","error_2","Promise","all","__awaiter","setupEventListener","options","Key","Bucket","SSECustomerAlgorithm","SSECustomerKey","SSECustomerKeyMD5","__assign","PartNumber","res","allResults","i","ETag","error_3","input","MultipartUpload","Parts","completeUploadCommand","data","error_4","Error","removeAllListeners","on","progress","progressChanged","loaded","incrementalUpdate","emit","total","key","undefined","size","path","sanitizedBody","isGenericObject","JSON","stringify","config","middlewareStack","add"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\storage\\src\\providers\\AWSS3ProviderManagedUpload.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport {\n\tPutObjectCommandInput,\n\tPutObjectCommand,\n\tCreateMultipartUploadCommand,\n\tUploadPartCommand,\n\tCompleteMultipartUploadCommand,\n\tCompleteMultipartUploadCommandInput,\n\tListPartsCommand,\n\tAbortMultipartUploadCommand,\n\tCompletedPart,\n\tS3Client,\n} from '@aws-sdk/client-s3';\nimport {\n\tSEND_UPLOAD_PROGRESS_EVENT,\n\tSEND_DOWNLOAD_PROGRESS_EVENT,\n\tAxiosHttpHandlerOptions,\n} from './axios-http-handler';\nimport * as events from 'events';\nimport {\n\tautoAdjustClockskewMiddleware,\n\tautoAdjustClockskewMiddlewareOptions,\n\tcalculatePartSize,\n\tcreatePrefixMiddleware,\n\tcreateS3Client,\n\tprefixMiddlewareOptions,\n\tDEFAULT_PART_SIZE,\n\tDEFAULT_QUEUE_SIZE,\n\tMAX_OBJECT_SIZE,\n} from '../common/S3ClientUtils';\n\nconst logger = new Logger('AWSS3ProviderManagedUpload');\n\nexport declare interface Part {\n\tbodyPart: any;\n\tpartNumber: number;\n\temitter: events.EventEmitter;\n\tetag?: string;\n\t_lastUploadedBytes: number;\n}\n\nexport class AWSS3ProviderManagedUpload {\n\t// Data for current upload\n\tprivate body;\n\tprivate params: PutObjectCommandInput;\n\tprivate opts = null;\n\tprivate completedParts: CompletedPart[] = [];\n\tprivate s3client: S3Client;\n\tprivate uploadId: string | undefined;\n\tprivate partSize = DEFAULT_PART_SIZE;\n\n\t// Progress reporting\n\tprivate bytesUploaded = 0;\n\tprivate totalBytesToUpload = 0;\n\tprivate emitter: events.EventEmitter | null = null;\n\n\tconstructor(params: PutObjectCommandInput, opts, emitter: events.EventEmitter) {\n\t\tthis.params = params;\n\t\tthis.opts = opts;\n\t\tthis.emitter = emitter;\n\t\tthis.s3client = this._createNewS3Client(opts, emitter);\n\t}\n\n\tpublic async upload() {\n\t\ttry {\n\t\t\tthis.body = this.validateAndSanitizeBody(this.params.Body);\n\t\t\tthis.totalBytesToUpload = this.byteLength(this.body);\n\t\t\tif (this.totalBytesToUpload <= DEFAULT_PART_SIZE) {\n\t\t\t\t// Multipart upload is not required. Upload the sanitized body as is\n\t\t\t\tthis.params.Body = this.body;\n\t\t\t\tconst putObjectCommand = new PutObjectCommand(this.params);\n\t\t\t\treturn this.s3client.send(putObjectCommand);\n\t\t\t} else {\n\t\t\t\t// Step 1: Determine appropriate part size.\n\t\t\t\tthis.partSize = calculatePartSize(this.totalBytesToUpload);\n\t\t\t\t// Step 2: Initiate the multi part upload\n\t\t\t\tthis.uploadId = await this.createMultiPartUpload();\n\n\t\t\t\t// Step 3: Upload chunks in parallel as requested\n\t\t\t\tconst numberOfPartsToUpload = Math.ceil(\n\t\t\t\t\tthis.totalBytesToUpload / this.partSize\n\t\t\t\t);\n\n\t\t\t\tconst parts: Part[] = this.createParts();\n\t\t\t\tfor (\n\t\t\t\t\tlet start = 0;\n\t\t\t\t\tstart < numberOfPartsToUpload;\n\t\t\t\t\tstart += DEFAULT_QUEUE_SIZE\n\t\t\t\t) {\n\t\t\t\t\t// Upload as many as `queueSize` parts simultaneously\n\t\t\t\t\tawait this.uploadParts(\n\t\t\t\t\t\tthis.uploadId!,\n\t\t\t\t\t\tparts.slice(start, start + DEFAULT_QUEUE_SIZE)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tparts.map(part => {\n\t\t\t\t\tthis.removeEventListener(part);\n\t\t\t\t});\n\n\t\t\t\t// Step 3: Finalize the upload such that S3 can recreate the file\n\t\t\t\treturn await this.finishMultiPartUpload(this.uploadId!);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// if any error is thrown, call cleanup\n\t\t\tawait this.cleanup(this.uploadId);\n\t\t\tlogger.error('Error. Cancelling the multipart upload.');\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate createParts(): Part[] {\n\t\ttry {\n\t\t\tconst parts: Part[] = [];\n\t\t\tfor (let bodyStart = 0; bodyStart < this.totalBytesToUpload; ) {\n\t\t\t\tconst bodyEnd = Math.min(\n\t\t\t\t\tbodyStart + this.partSize,\n\t\t\t\t\tthis.totalBytesToUpload\n\t\t\t\t);\n\t\t\t\tparts.push({\n\t\t\t\t\tbodyPart: this.body.slice(bodyStart, bodyEnd),\n\t\t\t\t\tpartNumber: parts.length + 1,\n\t\t\t\t\temitter: new events.EventEmitter(),\n\t\t\t\t\t_lastUploadedBytes: 0,\n\t\t\t\t});\n\t\t\t\tbodyStart += this.partSize;\n\t\t\t}\n\t\t\treturn parts;\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async createMultiPartUpload() {\n\t\ttry {\n\t\t\tconst createMultiPartUploadCommand = new CreateMultipartUploadCommand(\n\t\t\t\tthis.params\n\t\t\t);\n\t\t\tconst response = await this.s3client.send(createMultiPartUploadCommand);\n\t\t\tlogger.debug(response.UploadId);\n\t\t\treturn response.UploadId;\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * @private Not to be extended outside of tests\n\t * @VisibleFotTesting\n\t */\n\tprotected async uploadParts(uploadId: string, parts: Part[]) {\n\t\ttry {\n\t\t\tconst allResults = await Promise.all(\n\t\t\t\tparts.map(async part => {\n\t\t\t\t\tthis.setupEventListener(part);\n\t\t\t\t\tconst options: AxiosHttpHandlerOptions = { emitter: part.emitter };\n\t\t\t\t\tconst {\n\t\t\t\t\t\tKey,\n\t\t\t\t\t\tBucket,\n\t\t\t\t\t\tSSECustomerAlgorithm,\n\t\t\t\t\t\tSSECustomerKey,\n\t\t\t\t\t\tSSECustomerKeyMD5,\n\t\t\t\t\t} = this.params;\n\t\t\t\t\tconst res = await this.s3client.send(\n\t\t\t\t\t\tnew UploadPartCommand({\n\t\t\t\t\t\t\tPartNumber: part.partNumber,\n\t\t\t\t\t\t\tBody: part.bodyPart,\n\t\t\t\t\t\t\tUploadId: uploadId,\n\t\t\t\t\t\t\tKey,\n\t\t\t\t\t\t\tBucket,\n\t\t\t\t\t\t\t...(SSECustomerAlgorithm && { SSECustomerAlgorithm }),\n\t\t\t\t\t\t\t...(SSECustomerKey && { SSECustomerKey }),\n\t\t\t\t\t\t\t...(SSECustomerKeyMD5 && { SSECustomerKeyMD5 }),\n\t\t\t\t\t\t}),\n\t\t\t\t\t\toptions\n\t\t\t\t\t);\n\t\t\t\t\treturn res;\n\t\t\t\t})\n\t\t\t);\n\t\t\t// The order of resolved promises is the same as input promise order.\n\t\t\tfor (let i = 0; i < allResults.length; i++) {\n\t\t\t\tthis.completedParts.push({\n\t\t\t\t\tPartNumber: parts[i].partNumber,\n\t\t\t\t\tETag: allResults[i].ETag,\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error(\n\t\t\t\t'Error happened while uploading a part. Cancelling the multipart upload'\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async finishMultiPartUpload(uploadId: string) {\n\t\tconst input: CompleteMultipartUploadCommandInput = {\n\t\t\tBucket: this.params.Bucket,\n\t\t\tKey: this.params.Key,\n\t\t\tUploadId: uploadId,\n\t\t\tMultipartUpload: { Parts: this.completedParts },\n\t\t};\n\t\tconst completeUploadCommand = new CompleteMultipartUploadCommand(input);\n\t\ttry {\n\t\t\tconst data = await this.s3client.send(completeUploadCommand);\n\t\t\treturn data.Key;\n\t\t} catch (error) {\n\t\t\tlogger.error('Error happened while finishing the upload.');\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async cleanup(uploadId: string | undefined) {\n\t\t// Reset this's state\n\t\tthis.body = null;\n\t\tthis.completedParts = [];\n\t\tthis.bytesUploaded = 0;\n\t\tthis.totalBytesToUpload = 0;\n\n\t\tif (!uploadId) {\n\t\t\t// This is a single part upload;\n\t\t\treturn;\n\t\t}\n\n\t\tconst input = {\n\t\t\tBucket: this.params.Bucket,\n\t\t\tKey: this.params.Key,\n\t\t\tUploadId: uploadId,\n\t\t};\n\n\t\tawait this.s3client.send(new AbortMultipartUploadCommand(input));\n\n\t\t// verify that all parts are removed.\n\t\tconst data = await this.s3client.send(new ListPartsCommand(input));\n\n\t\tif (data && data.Parts && data.Parts.length > 0) {\n\t\t\tthrow new Error('Multipart upload clean up failed.');\n\t\t}\n\t}\n\n\tprivate removeEventListener(part: Part) {\n\t\tpart.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n\t\tpart.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n\t}\n\n\tprivate setupEventListener(part: Part) {\n\t\tpart.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, progress => {\n\t\t\tthis.progressChanged(\n\t\t\t\tpart.partNumber,\n\t\t\t\tprogress.loaded - part._lastUploadedBytes\n\t\t\t);\n\t\t\tpart._lastUploadedBytes = progress.loaded;\n\t\t});\n\t}\n\n\tprivate progressChanged(partNumber: number, incrementalUpdate: number) {\n\t\tthis.bytesUploaded += incrementalUpdate;\n\t\tthis.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n\t\t\tloaded: this.bytesUploaded,\n\t\t\ttotal: this.totalBytesToUpload,\n\t\t\tpart: partNumber,\n\t\t\tkey: this.params.Key,\n\t\t});\n\t}\n\n\tprivate byteLength(input: any) {\n\t\tif (input === null || input === undefined) return 0;\n\t\tif (typeof input.byteLength === 'number') {\n\t\t\treturn input.byteLength;\n\t\t} else if (typeof input.length === 'number') {\n\t\t\treturn input.length;\n\t\t} else if (typeof input.size === 'number') {\n\t\t\treturn input.size;\n\t\t} else if (typeof input.path === 'string') {\n\t\t\t/* NodeJs Support\n\t\t\treturn require('fs').lstatSync(input.path).size;\n\t\t\t*/\n\t\t} else {\n\t\t\tthrow new Error('Cannot determine length of ' + input);\n\t\t}\n\t}\n\n\tprivate validateAndSanitizeBody(body: any): any {\n\t\tconst sanitizedBody = this.isGenericObject(body)\n\t\t\t? JSON.stringify(body)\n\t\t\t: body;\n\t\t/* TODO: streams and files for nodejs \n\t\tif (\n\t\t\ttypeof body.path === 'string' &&\n\t\t\trequire('fs').lstatSync(body.path).size > 0\n\t\t) {\n\t\t\tsanitizedBody = body;\n\t\t} */\n\t\tif (this.byteLength(sanitizedBody) > MAX_OBJECT_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`File size bigger than S3 Object limit of 5TB, got ${this.totalBytesToUpload} Bytes`\n\t\t\t);\n\t\t}\n\t\treturn sanitizedBody;\n\t}\n\n\tprivate isGenericObject(body: any): body is Object {\n\t\tif (body !== null && typeof body === 'object') {\n\t\t\ttry {\n\t\t\t\treturn !(this.byteLength(body) >= 0);\n\t\t\t} catch (error) {\n\t\t\t\t// If we cannot determine the length of the body, consider it\n\t\t\t\t// as a generic object and upload a stringified version of it\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected _createNewS3Client(config, emitter?: events.EventEmitter) {\n\t\tconst s3client = createS3Client(config, emitter);\n\t\ts3client.middlewareStack.add(\n\t\t\tcreatePrefixMiddleware(this.opts, this.params.Key),\n\t\t\tprefixMiddlewareOptions\n\t\t);\n\t\ts3client.middlewareStack.add(\n\t\t\tautoAdjustClockskewMiddleware(s3client.config),\n\t\t\tautoAdjustClockskewMiddlewareOptions\n\t\t);\n\t\treturn s3client;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}