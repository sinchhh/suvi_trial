{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { GetIdCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\n/**\n * Retrieves or generates a unique identifier using Amazon Cognito's `GetId`\n * operation, then generates temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from `GetId` are cached internally, but results from\n * `GetCredentialsForIdentity` are not.\n */\nexport function fromCognitoIdentityPool(_a) {\n  var _this = this;\n  var accountId = _a.accountId,\n    _b = _a.cache,\n    cache = _b === void 0 ? localStorage() : _b,\n    client = _a.client,\n    customRoleArn = _a.customRoleArn,\n    identityPoolId = _a.identityPoolId,\n    logins = _a.logins,\n    _c = _a.userIdentifier,\n    userIdentifier = _c === void 0 ? !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined : _c;\n  var cacheKey = userIdentifier ? \"aws:cognito-identity-credentials:\" + identityPoolId + \":\" + userIdentifier : undefined;\n  var provider = function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var identityId, _a, _b, IdentityId, _c, _d, _e, _f;\n      var _g;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _a = cacheKey;\n            if (!_a) return [3 /*break*/, 2];\n            return [4 /*yield*/, cache.getItem(cacheKey)];\n          case 1:\n            _a = _h.sent();\n            _h.label = 2;\n          case 2:\n            identityId = _a;\n            if (!!identityId) return [3 /*break*/, 7];\n            _d = (_c = client).send;\n            _e = GetIdCommand.bind;\n            _g = {\n              AccountId: accountId,\n              IdentityPoolId: identityPoolId\n            };\n            if (!logins) return [3 /*break*/, 4];\n            return [4 /*yield*/, resolveLogins(logins)];\n          case 3:\n            _f = _h.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            _f = undefined;\n            _h.label = 5;\n          case 5:\n            return [4 /*yield*/, _d.apply(_c, [new (_e.apply(GetIdCommand, [void 0, (_g.Logins = _f, _g)]))()])];\n          case 6:\n            _b = _h.sent().IdentityId, IdentityId = _b === void 0 ? throwOnMissingId() : _b;\n            identityId = IdentityId;\n            if (cacheKey) {\n              Promise.resolve(cache.setItem(cacheKey, identityId)).catch(function () {});\n            }\n            _h.label = 7;\n          case 7:\n            provider = fromCognitoIdentity({\n              client: client,\n              customRoleArn: customRoleArn,\n              logins: logins,\n              identityId: identityId\n            });\n            return [2 /*return*/, provider()];\n        }\n      });\n    });\n  };\n  return function () {\n    return provider().catch(function (err) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          if (cacheKey) {\n            Promise.resolve(cache.removeItem(cacheKey)).catch(function () {});\n          }\n          throw err;\n        });\n      });\n    });\n  };\n}\nfunction throwOnMissingId() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}","map":{"version":3,"names":["GetIdCommand","ProviderError","fromCognitoIdentity","localStorage","resolveLogins","fromCognitoIdentityPool","_a","_this","accountId","_b","cache","client","customRoleArn","identityPoolId","logins","_c","userIdentifier","Object","keys","length","undefined","cacheKey","provider","__awaiter","getItem","_h","sent","identityId","_d","send","bind","AccountId","IdentityPoolId","_f","apply","_e","_g","Logins","IdentityId","throwOnMissingId","Promise","resolve","setItem","catch","err","removeItem"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-sdk\\credential-provider-cognito-identity\\src\\fromCognitoIdentityPool.ts"],"sourcesContent":["import { GetIdCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { CredentialProvider } from \"@aws-sdk/types\";\n\nimport { CognitoProviderParameters } from \"./CognitoProviderParameters\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\nimport { Storage } from \"./Storage\";\n\n/**\n * Retrieves or generates a unique identifier using Amazon Cognito's `GetId`\n * operation, then generates temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from `GetId` are cached internally, but results from\n * `GetCredentialsForIdentity` are not.\n */\nexport function fromCognitoIdentityPool({\n  accountId,\n  cache = localStorage(),\n  client,\n  customRoleArn,\n  identityPoolId,\n  logins,\n  userIdentifier = !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined,\n}: FromCognitoIdentityPoolParameters): CredentialProvider {\n  const cacheKey = userIdentifier ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}` : undefined;\n\n  let provider: CredentialProvider = async () => {\n    let identityId = cacheKey && (await cache.getItem(cacheKey));\n    if (!identityId) {\n      const { IdentityId = throwOnMissingId() } = await client.send(\n        new GetIdCommand({\n          AccountId: accountId,\n          IdentityPoolId: identityPoolId,\n          Logins: logins ? await resolveLogins(logins) : undefined,\n        })\n      );\n      identityId = IdentityId;\n      if (cacheKey) {\n        Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => {});\n      }\n    }\n\n    provider = fromCognitoIdentity({\n      client,\n      customRoleArn,\n      logins,\n      identityId,\n    });\n\n    return provider();\n  };\n\n  return () =>\n    provider().catch(async (err) => {\n      if (cacheKey) {\n        Promise.resolve(cache.removeItem(cacheKey)).catch(() => {});\n      }\n\n      throw err;\n    });\n}\n\nexport interface FromCognitoIdentityPoolParameters extends CognitoProviderParameters {\n  /**\n   * A standard AWS account ID (9+ digits).\n   */\n  accountId?: string;\n\n  /**\n   * A cache in which to store resolved Cognito IdentityIds. If not supplied,\n   * the credential provider will attempt to store IdentityIds in one of the\n   * following (in order of preference):\n   *   1. IndexedDB\n   *   2. LocalStorage\n   *   3. An in-memory cache object that will not persist between pages.\n   *\n   * IndexedDB is preferred to maximize data sharing between top-level\n   * browsing contexts and web workers.\n   *\n   * The provider will not cache IdentityIds of authenticated users unless a\n   * separate `userIdentitifer` parameter is supplied.\n   */\n  cache?: Storage;\n\n  /**\n   * The unique identifier for the identity pool from which an identity should\n   * be retrieved or generated.\n   */\n  identityPoolId: string;\n\n  /**\n   * A unique identifier for the user. This is distinct from a Cognito\n   * IdentityId and should instead be an identifier meaningful to your\n   * application. Used to cache Cognito IdentityIds on a per-user basis.\n   */\n  userIdentifier?: string;\n}\n\nfunction throwOnMissingId(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}