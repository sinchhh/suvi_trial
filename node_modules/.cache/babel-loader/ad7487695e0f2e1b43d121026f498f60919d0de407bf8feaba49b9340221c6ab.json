{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Returns a canonical uri.\n *\n * @param pathname `pathname` from request url.\n * @returns URI-encoded version of the absolute path component URL (everything between the host and the question mark\n * character (?) that starts the query string parameters). If the absolute path is empty, a forward slash character (/).\n *\n * @internal\n */\nexport var getCanonicalUri = function (pathname) {\n  return pathname ? encodeURIComponent(pathname).replace(/%2F/g, '/') : '/';\n};","map":{"version":3,"names":["getCanonicalUri","pathname","encodeURIComponent","replace"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\utils\\getCanonicalUri.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Returns a canonical uri.\n *\n * @param pathname `pathname` from request url.\n * @returns URI-encoded version of the absolute path component URL (everything between the host and the question mark\n * character (?) that starts the query string parameters). If the absolute path is empty, a forward slash character (/).\n *\n * @internal\n */\nexport const getCanonicalUri = (pathname: string): string =>\n\tpathname ? encodeURIComponent(pathname).replace(/%2F/g, '/') : '/';\n"],"mappings":"AAAA;AACA;AAEA;;;;;;;;;AASA,OAAO,IAAMA,eAAe,GAAG,SAAAA,CAACC,QAAgB;EAC/C,OAAAA,QAAQ,GAAGC,kBAAkB,CAACD,QAAQ,CAAC,CAACE,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG;AAAlE,CAAkE"},"metadata":{},"sourceType":"module","externalDependencies":[]}