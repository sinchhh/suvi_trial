{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { HttpResponse } from \"@aws-sdk/protocol-http\";\n/**\n * In case of an internal error/terminated connection, S3 operations may return 200 errors. CopyObject, UploadPartCopy,\n * CompleteMultipartUpload may return empty payload or payload with only xml Preamble.\n * @internal\n */\nexport var throw200ExceptionsMiddleware = function (config) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var result, response, statusCode, body, bodyBytes, bodyString, err;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, next(args)];\n            case 1:\n              result = _a.sent();\n              response = result.response;\n              if (!HttpResponse.isInstance(response)) return [2 /*return*/, result];\n              statusCode = response.statusCode, body = response.body;\n              if (statusCode < 200 && statusCode >= 300) return [2 /*return*/, result];\n              return [4 /*yield*/, collectBody(body, config)];\n            case 2:\n              bodyBytes = _a.sent();\n              return [4 /*yield*/, collectBodyString(bodyBytes, config)];\n            case 3:\n              bodyString = _a.sent();\n              if (bodyBytes.length === 0) {\n                err = new Error(\"S3 aborted request\");\n                err.name = \"InternalError\";\n                throw err;\n              }\n              if (bodyString && bodyString.match(\"<Error>\")) {\n                // Set the error code to 4XX so that error deserializer can parse them\n                response.statusCode = 400;\n              }\n              // Body stream is consumed and paused at this point. So replace the response.body to the collected bytes.\n              // So that the deserializer can consume the body as normal.\n              response.body = bodyBytes;\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    };\n  };\n};\n// Collect low-level response body stream to Uint8Array.\nvar collectBody = function (streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n// Encode Uint8Array data into string with utf-8.\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\n/**\n * @internal\n */\nexport var throw200ExceptionsMiddlewareOptions = {\n  relation: \"after\",\n  toMiddleware: \"deserializerMiddleware\",\n  tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n  name: \"throw200ExceptionsMiddleware\",\n  override: true\n};\n/**\n *\n * @internal\n */\nexport var getThrow200ExceptionsPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"names":["HttpResponse","throw200ExceptionsMiddleware","config","next","args","__awaiter","result","_a","sent","response","isInstance","statusCode","body","collectBody","bodyBytes","collectBodyString","bodyString","length","err","Error","name","match","streamBody","context","Uint8Array","Promise","resolve","streamCollector","then","utf8Encoder","throw200ExceptionsMiddlewareOptions","relation","toMiddleware","tags","override","getThrow200ExceptionsPlugin","applyToStack","clientStack","addRelativeTo"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-sdk\\middleware-sdk-s3\\src\\throw-200-exceptions.ts"],"sourcesContent":["import { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { DeserializeMiddleware, Encoder, Pluggable, RelativeMiddlewareOptions, StreamCollector } from \"@aws-sdk/types\";\n\ntype PreviouslyResolved = {\n  streamCollector: StreamCollector;\n  utf8Encoder: Encoder;\n};\n\n/**\n * In case of an internal error/terminated connection, S3 operations may return 200 errors. CopyObject, UploadPartCopy,\n * CompleteMultipartUpload may return empty payload or payload with only xml Preamble.\n * @internal\n */\nexport const throw200ExceptionsMiddleware = (config: PreviouslyResolved): DeserializeMiddleware<any, any> => (\n  next\n) => async (args) => {\n  const result = await next(args);\n  const { response } = result;\n  if (!HttpResponse.isInstance(response)) return result;\n  const { statusCode, body } = response;\n  if (statusCode < 200 && statusCode >= 300) return result;\n\n  // Throw 2XX response that's either an error or has empty body.\n  const bodyBytes = await collectBody(body, config);\n  const bodyString = await collectBodyString(bodyBytes, config);\n  if (bodyBytes.length === 0) {\n    const err = new Error(\"S3 aborted request\");\n    err.name = \"InternalError\";\n    throw err;\n  }\n  if (bodyString && bodyString.match(\"<Error>\")) {\n    // Set the error code to 4XX so that error deserializer can parse them\n    response.statusCode = 400;\n  }\n\n  // Body stream is consumed and paused at this point. So replace the response.body to the collected bytes.\n  // So that the deserializer can consume the body as normal.\n  response.body = bodyBytes;\n  return result;\n};\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: PreviouslyResolved): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: PreviouslyResolved): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\n/**\n * @internal\n */\nexport const throw200ExceptionsMiddlewareOptions: RelativeMiddlewareOptions = {\n  relation: \"after\",\n  toMiddleware: \"deserializerMiddleware\",\n  tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n  name: \"throw200ExceptionsMiddleware\",\n  override: true,\n};\n\n/**\n *\n * @internal\n */\nexport const getThrow200ExceptionsPlugin = (config: PreviouslyResolved): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n  },\n});\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,wBAAwB;AAQrD;;;;;AAKA,OAAO,IAAMC,4BAA4B,GAAG,SAAAA,CAACC,MAA0B;EAAsC,iBAC3GC,IAAI;IACD,iBAAOC,IAAI;MAAA,OAAAC,SAAA;;;;;cACC,qBAAMF,IAAI,CAACC,IAAI,CAAC;;cAAzBE,MAAM,GAAGC,EAAA,CAAAC,IAAA,EAAgB;cACvBC,QAAQ,GAAKH,MAAM,CAAAG,QAAX;cAChB,IAAI,CAACT,YAAY,CAACU,UAAU,CAACD,QAAQ,CAAC,EAAE,sBAAOH,MAAM;cAC7CK,UAAU,GAAWF,QAAQ,CAAAE,UAAnB,EAAEC,IAAI,GAAKH,QAAQ,CAAAG,IAAb;cACxB,IAAID,UAAU,GAAG,GAAG,IAAIA,UAAU,IAAI,GAAG,EAAE,sBAAOL,MAAM;cAGtC,qBAAMO,WAAW,CAACD,IAAI,EAAEV,MAAM,CAAC;;cAA3CY,SAAS,GAAGP,EAAA,CAAAC,IAAA,EAA+B;cAC9B,qBAAMO,iBAAiB,CAACD,SAAS,EAAEZ,MAAM,CAAC;;cAAvDc,UAAU,GAAGT,EAAA,CAAAC,IAAA,EAA0C;cAC7D,IAAIM,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;gBACpBC,GAAG,GAAG,IAAIC,KAAK,CAAC,oBAAoB,CAAC;gBAC3CD,GAAG,CAACE,IAAI,GAAG,eAAe;gBAC1B,MAAMF,GAAG;;cAEX,IAAIF,UAAU,IAAIA,UAAU,CAACK,KAAK,CAAC,SAAS,CAAC,EAAE;gBAC7C;gBACAZ,QAAQ,CAACE,UAAU,GAAG,GAAG;;cAG3B;cACA;cACAF,QAAQ,CAACG,IAAI,GAAGE,SAAS;cACzB,sBAAOR,MAAM;;;;KACd;EAxBI,CAwBJ;AA1B4G,CA0B5G;AAED;AACA,IAAMO,WAAW,GAAG,SAAAA,CAACS,UAAkC,EAAEC,OAA2B;EAA/D,IAAAD,UAAA;IAAAA,UAAA,OAAsBE,UAAU,EAAE;EAAA;EACrD,IAAIF,UAAU,YAAYE,UAAU,EAAE;IACpC,OAAOC,OAAO,CAACC,OAAO,CAACJ,UAAU,CAAC;;EAEpC,OAAOC,OAAO,CAACI,eAAe,CAACL,UAAU,CAAC,IAAIG,OAAO,CAACC,OAAO,CAAC,IAAIF,UAAU,EAAE,CAAC;AACjF,CAAC;AAED;AACA,IAAMT,iBAAiB,GAAG,SAAAA,CAACO,UAAe,EAAEC,OAA2B;EACrE,OAAAV,WAAW,CAACS,UAAU,EAAEC,OAAO,CAAC,CAACK,IAAI,CAAC,UAAChB,IAAI;IAAK,OAAAW,OAAO,CAACM,WAAW,CAACjB,IAAI,CAAC;EAAzB,CAAyB,CAAC;AAA1E,CAA0E;AAE5E;;;AAGA,OAAO,IAAMkB,mCAAmC,GAA8B;EAC5EC,QAAQ,EAAE,OAAO;EACjBC,YAAY,EAAE,wBAAwB;EACtCC,IAAI,EAAE,CAAC,sBAAsB,EAAE,IAAI,CAAC;EACpCb,IAAI,EAAE,8BAA8B;EACpCc,QAAQ,EAAE;CACX;AAED;;;;AAIA,OAAO,IAAMC,2BAA2B,GAAG,SAAAA,CAACjC,MAA0B;EAA0B,OAAC;IAC/FkC,YAAY,EAAE,SAAAA,CAACC,WAAW;MACxBA,WAAW,CAACC,aAAa,CAACrC,4BAA4B,CAACC,MAAM,CAAC,EAAE4B,mCAAmC,CAAC;IACtG;GACD;AAJ+F,CAI9F"},"metadata":{},"sourceType":"module","externalDependencies":[]}