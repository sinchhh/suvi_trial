{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getCredentialScope } from './getCredentialScope';\nimport { getFormattedDates } from './getFormattedDates';\n/**\n * Extracts common values used for signing both requests and urls.\n *\n * @param options `SignRequestOptions` object containing values used to construct the signature.\n * @returns Common `SigningValues` used for signing.\n *\n * @internal\n */\nexport var getSigningValues = function (_a) {\n  var credentials = _a.credentials,\n    _b = _a.signingDate,\n    signingDate = _b === void 0 ? new Date() : _b,\n    signingRegion = _a.signingRegion,\n    signingService = _a.signingService;\n  // get properties from credentials\n  var accessKeyId = credentials.accessKeyId,\n    secretAccessKey = credentials.secretAccessKey,\n    sessionToken = credentials.sessionToken;\n  // get formatted dates for signing\n  var _c = getFormattedDates(signingDate),\n    longDate = _c.longDate,\n    shortDate = _c.shortDate;\n  // copy header and set signing properties\n  var credentialScope = getCredentialScope(shortDate, signingRegion, signingService);\n  return {\n    accessKeyId: accessKeyId,\n    credentialScope: credentialScope,\n    longDate: longDate,\n    secretAccessKey: secretAccessKey,\n    sessionToken: sessionToken,\n    shortDate: shortDate,\n    signingRegion: signingRegion,\n    signingService: signingService\n  };\n};","map":{"version":3,"names":["getCredentialScope","getFormattedDates","getSigningValues","_a","credentials","_b","signingDate","Date","signingRegion","signingService","accessKeyId","secretAccessKey","sessionToken","_c","longDate","shortDate","credentialScope"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\utils\\getSigningValues.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SignRequestOptions } from '../types';\nimport { SigningValues } from '../types/signer';\nimport { getCredentialScope } from './getCredentialScope';\nimport { getFormattedDates } from './getFormattedDates';\n\n/**\n * Extracts common values used for signing both requests and urls.\n *\n * @param options `SignRequestOptions` object containing values used to construct the signature.\n * @returns Common `SigningValues` used for signing.\n *\n * @internal\n */\nexport const getSigningValues = ({\n\tcredentials,\n\tsigningDate = new Date(),\n\tsigningRegion,\n\tsigningService,\n}: SignRequestOptions): SigningValues => {\n\t// get properties from credentials\n\tconst { accessKeyId, secretAccessKey, sessionToken } = credentials;\n\t// get formatted dates for signing\n\tconst { longDate, shortDate } = getFormattedDates(signingDate);\n\t// copy header and set signing properties\n\tconst credentialScope = getCredentialScope(\n\t\tshortDate,\n\t\tsigningRegion,\n\t\tsigningService\n\t);\n\treturn {\n\t\taccessKeyId,\n\t\tcredentialScope,\n\t\tlongDate,\n\t\tsecretAccessKey,\n\t\tsessionToken,\n\t\tshortDate,\n\t\tsigningRegion,\n\t\tsigningService,\n\t};\n};\n"],"mappings":"AAAA;AACA;AAIA,SAASA,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,iBAAiB,QAAQ,qBAAqB;AAEvD;;;;;;;;AAQA,OAAO,IAAMC,gBAAgB,GAAG,SAAAA,CAACC,EAKZ;MAJpBC,WAAA,GAAAD,EAAA,CAAAC,WAAW;IACXC,EAAA,GAAAF,EAAA,CAAAG,WAAwB;IAAxBA,WAAA,GAAAD,EAAA,kBAAAE,IAAA,KAAAF,EAAwB;IACxBG,aAAA,GAAAL,EAAA,CAAAK,aAAa;IACbC,cAAA,GAAAN,EAAA,CAAAM,cAAc;EAEd;EACQ,IAAAC,WAAA,GAAAN,WAAA,CAAAM,WAAW;IAAEC,eAAA,GAAAP,WAAA,CAAAO,eAAe;IAAEC,YAAA,GAAAR,WAAA,CAAAQ,YAAY;EAClD;EACM,IAAAC,EAAA,GAAAZ,iBAAA,CAAAK,WAAA,CAAwD;IAAtDQ,QAAA,GAAAD,EAAA,CAAAC,QAAQ;IAAEC,SAAA,GAAAF,EAAA,CAAAE,SAA4C;EAC9D;EACA,IAAMC,eAAe,GAAGhB,kBAAkB,CACzCe,SAAS,EACTP,aAAa,EACbC,cAAc,CACd;EACD,OAAO;IACNC,WAAW,EAAAA,WAAA;IACXM,eAAe,EAAAA,eAAA;IACfF,QAAQ,EAAAA,QAAA;IACRH,eAAe,EAAAA,eAAA;IACfC,YAAY,EAAAA,YAAA;IACZG,SAAS,EAAAA,SAAA;IACTP,aAAa,EAAAA,aAAA;IACbC,cAAc,EAAAA;GACd;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}