{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __read } from \"tslib\";\n/**\n * Returns canonical headers.\n *\n * @param headers Headers from the request.\n * @returns Request headers that will be signed, and their values, separated by newline characters. Header names must\n * use lowercase characters, must appear in alphabetical order, and must be followed by a colon (:). For the values,\n * trim any leading or trailing spaces, convert sequential spaces to a single space, and separate the values\n * for a multi-value header using commas.\n *\n * @internal\n */\nexport var getCanonicalHeaders = function (headers) {\n  return Object.entries(headers).map(function (_a) {\n    var _b = __read(_a, 2),\n      key = _b[0],\n      value = _b[1];\n    var _c;\n    return {\n      key: key.toLowerCase(),\n      value: (_c = value === null || value === void 0 ? void 0 : value.trim().replace(/\\s+/g, ' ')) !== null && _c !== void 0 ? _c : ''\n    };\n  }).sort(function (a, b) {\n    return a.key < b.key ? -1 : 1;\n  }).map(function (entry) {\n    return entry.key + \":\" + entry.value + \"\\n\";\n  }).join('');\n};","map":{"version":3,"names":["getCanonicalHeaders","headers","Object","entries","map","_a","_b","__read","key","value","toLowerCase","_c","trim","replace","sort","a","b","entry","join"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\utils\\getCanonicalHeaders.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HttpRequest } from '../../../../../types';\n\n/**\n * Returns canonical headers.\n *\n * @param headers Headers from the request.\n * @returns Request headers that will be signed, and their values, separated by newline characters. Header names must\n * use lowercase characters, must appear in alphabetical order, and must be followed by a colon (:). For the values,\n * trim any leading or trailing spaces, convert sequential spaces to a single space, and separate the values\n * for a multi-value header using commas.\n *\n * @internal\n */\nexport const getCanonicalHeaders = (headers: HttpRequest['headers']): string =>\n\tObject.entries(headers)\n\t\t.map(([key, value]) => ({\n\t\t\tkey: key.toLowerCase(),\n\t\t\tvalue: value?.trim().replace(/\\s+/g, ' ') ?? '',\n\t\t}))\n\t\t.sort((a, b) => (a.key < b.key ? -1 : 1))\n\t\t.map(entry => `${entry.key}:${entry.value}\\n`)\n\t\t.join('');\n"],"mappings":"AAAA;AACA;;AAIA;;;;;;;;;;;AAWA,OAAO,IAAMA,mBAAmB,GAAG,SAAAA,CAACC,OAA+B;EAClE,OAAAC,MAAM,CAACC,OAAO,CAACF,OAAO,CAAC,CACrBG,GAAG,CAAC,UAACC,EAAY;QAAZC,EAAA,GAAAC,MAAA,CAAAF,EAAA,IAAY;MAAXG,GAAA,GAAAF,EAAA,GAAG;MAAEG,KAAA,GAAAH,EAAA,GAAK;;IAAM,OAAC;MACvBE,GAAG,EAAEA,GAAG,CAACE,WAAW,EAAE;MACtBD,KAAK,GAAAE,EAAA,GAAEF,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEG,IAAI,GAAGC,OAAO,CAAC,MAAM,EAAE,GAAG,eAAAF,EAAA,cAAAA,EAAA,GAAK;KAC7C;GAAC,CAAC,CACFG,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;IAAK,OAACD,CAAC,CAACP,GAAG,GAAGQ,CAAC,CAACR,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;EAAvB,CAAwB,CAAC,CACxCJ,GAAG,CAAC,UAAAa,KAAK;IAAI,OAAGA,KAAK,CAACT,GAAG,SAAIS,KAAK,CAACR,KAAK,OAAI;EAA/B,CAA+B,CAAC,CAC7CS,IAAI,CAAC,EAAE,CAAC;AAPV,CAOU"},"metadata":{},"sourceType":"module","externalDependencies":[]}