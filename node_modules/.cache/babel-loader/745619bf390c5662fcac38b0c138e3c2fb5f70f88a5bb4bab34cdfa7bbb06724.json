{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutBucketNotificationConfigurationRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlPutBucketNotificationConfigurationCommand, serializeAws_restXmlPutBucketNotificationConfigurationCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Enables notifications of specified events for a bucket. For more information about event\n *          notifications, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring Event\n *             Notifications</a>.</p>\n *\n *          <p>Using this API, you can replace an existing notification configuration. The\n *          configuration is an XML file that defines the event types that you want Amazon S3 to publish and\n *          the destination where you want Amazon S3 to publish an event notification when it detects an\n *          event of the specified type.</p>\n *\n *          <p>By default, your bucket has no event notifications configured. That is, the notification\n *          configuration will be an empty <code>NotificationConfiguration</code>.</p>\n *\n *          <p>\n *             <code><NotificationConfiguration></code>\n *          </p>\n *          <p>\n *             <code></NotificationConfiguration></code>\n *          </p>\n *          <p>This operation replaces the existing notification configuration with the configuration\n *          you include in the request body.</p>\n *\n *          <p>After Amazon S3 receives this request, it first verifies that any Amazon Simple Notification\n *          Service (Amazon SNS) or Amazon Simple Queue Service (Amazon SQS) destination exists, and\n *          that the bucket owner has permission to publish to it by sending a test notification. In\n *          the case of AWS Lambda destinations, Amazon S3 verifies that the Lambda function permissions\n *          grant Amazon S3 permission to invoke the function from the Amazon S3 bucket. For more information,\n *          see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring Notifications for Amazon S3\n *             Events</a>.</p>\n *\n *          <p>You can disable notifications by adding the empty NotificationConfiguration\n *          element.</p>\n *\n *          <p>By default, only the bucket owner can configure notifications on a bucket. However,\n *          bucket owners can use a bucket policy to grant permission to other users to set this\n *          configuration with <code>s3:PutBucketNotification</code> permission.</p>\n *\n *          <note>\n *             <p>The PUT notification is an atomic operation. For example, suppose your notification\n *             configuration includes SNS topic, SQS queue, and Lambda function configurations. When\n *             you send a PUT request with this configuration, Amazon S3 sends test messages to your SNS\n *             topic. If the message fails, the entire PUT operation will fail, and Amazon S3 will not add\n *             the configuration to your bucket.</p>\n *          </note>\n *\n *          <p>\n *             <b>Responses</b>\n *          </p>\n *          <p>If the configuration in the request body includes only one\n *             <code>TopicConfiguration</code> specifying only the\n *             <code>s3:ReducedRedundancyLostObject</code> event type, the response will also include\n *          the <code>x-amz-sns-test-message-id</code> header containing the message ID of the test\n *          notification sent to the topic.</p>\n *\n *          <p>The following operation is related to\n *          <code>PutBucketNotificationConfiguration</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketNotificationConfiguration.html\">GetBucketNotificationConfiguration</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nvar PutBucketNotificationConfigurationCommand = /** @class */function (_super) {\n  __extends(PutBucketNotificationConfigurationCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function PutBucketNotificationConfigurationCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  PutBucketNotificationConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"PutBucketNotificationConfigurationCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutBucketNotificationConfigurationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  PutBucketNotificationConfigurationCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlPutBucketNotificationConfigurationCommand(input, context);\n  };\n  PutBucketNotificationConfigurationCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlPutBucketNotificationConfigurationCommand(output, context);\n  };\n  return PutBucketNotificationConfigurationCommand;\n}($Command);\nexport { PutBucketNotificationConfigurationCommand };","map":{"version":3,"names":["PutBucketNotificationConfigurationRequest","deserializeAws_restXmlPutBucketNotificationConfigurationCommand","serializeAws_restXmlPutBucketNotificationConfigurationCommand","getBucketEndpointPlugin","getSerdePlugin","Command","$Command","PutBucketNotificationConfigurationCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","requestHandler","resolve","request","handle","context"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-sdk\\client-s3\\commands\\PutBucketNotificationConfigurationCommand.ts"],"sourcesContent":["import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { PutBucketNotificationConfigurationRequest } from \"../models/models_0\";\nimport {\n  deserializeAws_restXmlPutBucketNotificationConfigurationCommand,\n  serializeAws_restXmlPutBucketNotificationConfigurationCommand,\n} from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type PutBucketNotificationConfigurationCommandInput = PutBucketNotificationConfigurationRequest;\nexport type PutBucketNotificationConfigurationCommandOutput = __MetadataBearer;\n\n/**\n * <p>Enables notifications of specified events for a bucket. For more information about event\n *          notifications, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring Event\n *             Notifications</a>.</p>\n *\n *          <p>Using this API, you can replace an existing notification configuration. The\n *          configuration is an XML file that defines the event types that you want Amazon S3 to publish and\n *          the destination where you want Amazon S3 to publish an event notification when it detects an\n *          event of the specified type.</p>\n *\n *          <p>By default, your bucket has no event notifications configured. That is, the notification\n *          configuration will be an empty <code>NotificationConfiguration</code>.</p>\n *\n *          <p>\n *             <code><NotificationConfiguration></code>\n *          </p>\n *          <p>\n *             <code></NotificationConfiguration></code>\n *          </p>\n *          <p>This operation replaces the existing notification configuration with the configuration\n *          you include in the request body.</p>\n *\n *          <p>After Amazon S3 receives this request, it first verifies that any Amazon Simple Notification\n *          Service (Amazon SNS) or Amazon Simple Queue Service (Amazon SQS) destination exists, and\n *          that the bucket owner has permission to publish to it by sending a test notification. In\n *          the case of AWS Lambda destinations, Amazon S3 verifies that the Lambda function permissions\n *          grant Amazon S3 permission to invoke the function from the Amazon S3 bucket. For more information,\n *          see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring Notifications for Amazon S3\n *             Events</a>.</p>\n *\n *          <p>You can disable notifications by adding the empty NotificationConfiguration\n *          element.</p>\n *\n *          <p>By default, only the bucket owner can configure notifications on a bucket. However,\n *          bucket owners can use a bucket policy to grant permission to other users to set this\n *          configuration with <code>s3:PutBucketNotification</code> permission.</p>\n *\n *          <note>\n *             <p>The PUT notification is an atomic operation. For example, suppose your notification\n *             configuration includes SNS topic, SQS queue, and Lambda function configurations. When\n *             you send a PUT request with this configuration, Amazon S3 sends test messages to your SNS\n *             topic. If the message fails, the entire PUT operation will fail, and Amazon S3 will not add\n *             the configuration to your bucket.</p>\n *          </note>\n *\n *          <p>\n *             <b>Responses</b>\n *          </p>\n *          <p>If the configuration in the request body includes only one\n *             <code>TopicConfiguration</code> specifying only the\n *             <code>s3:ReducedRedundancyLostObject</code> event type, the response will also include\n *          the <code>x-amz-sns-test-message-id</code> header containing the message ID of the test\n *          notification sent to the topic.</p>\n *\n *          <p>The following operation is related to\n *          <code>PutBucketNotificationConfiguration</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketNotificationConfiguration.html\">GetBucketNotificationConfiguration</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class PutBucketNotificationConfigurationCommand extends $Command<\n  PutBucketNotificationConfigurationCommandInput,\n  PutBucketNotificationConfigurationCommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: PutBucketNotificationConfigurationCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<PutBucketNotificationConfigurationCommandInput, PutBucketNotificationConfigurationCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"PutBucketNotificationConfigurationCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: PutBucketNotificationConfigurationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(\n    input: PutBucketNotificationConfigurationCommandInput,\n    context: __SerdeContext\n  ): Promise<__HttpRequest> {\n    return serializeAws_restXmlPutBucketNotificationConfigurationCommand(input, context);\n  }\n\n  private deserialize(\n    output: __HttpResponse,\n    context: __SerdeContext\n  ): Promise<PutBucketNotificationConfigurationCommandOutput> {\n    return deserializeAws_restXmlPutBucketNotificationConfigurationCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,yCAAyC,QAAQ,oBAAoB;AAC9E,SACEC,+DAA+D,EAC/DC,6DAA6D,QACxD,0BAA0B;AACjC,SAASC,uBAAuB,QAAQ,qCAAqC;AAC7E,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA,IAAAC,yCAAA,0BAAAC,MAAA;EAA+DC,SAAA,CAAAF,yCAAA,EAAAC,MAAA;EAK7D;EACA;EAEA,SAAAD,0CAAqBG,KAAqD;IAA1E,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,yCAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAAqC,EACrCC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IACzF,IAAI,CAACH,eAAe,CAACC,GAAG,CAAChB,uBAAuB,CAACa,aAAa,CAAC,CAAC;IAEhE,IAAMM,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,UAAU;IAC7B,IAAMC,WAAW,GAAG,2CAA2C;IAC/D,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,yCAAyC,CAAC6B,kBAAkB;MACrFC,wBAAwB,EAAE,SAAAA,CAACC,MAAW;QAAK,OAAAA,MAAM;MAAN;KAC5C;IACO,IAAAC,cAAc,GAAKhB,aAAa,CAAAgB,cAAlB;IACtB,OAAOV,KAAK,CAACW,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEjB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,yCAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UACEV,KAAqD,EACrD0B,OAAuB;IAEvB,OAAOlC,6DAA6D,CAACQ,KAAK,EAAE0B,OAAO,CAAC;EACtF,CAAC;EAEO7B,yCAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UACEU,MAAsB,EACtBK,OAAuB;IAEvB,OAAOnC,+DAA+D,CAAC8B,MAAM,EAAEK,OAAO,CAAC;EACzF,CAAC;EAIH,OAAA7B,yCAAC;AAAD,CAAC,CA7D8DD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}