{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __read, __values } from \"tslib\";\nimport { HttpResponse } from '@aws-sdk/protocol-http';\nimport { buildQueryString } from '@aws-sdk/querystring-builder';\nimport axios from 'axios';\nimport { ConsoleLogger as Logger, Platform } from '@aws-amplify/core';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nvar logger = new Logger('axios-http-handler');\nexport var SEND_UPLOAD_PROGRESS_EVENT = 'sendUploadProgress';\nexport var SEND_DOWNLOAD_PROGRESS_EVENT = 'sendDownloadProgress';\nfunction isBlob(body) {\n  return typeof Blob !== 'undefined' && body instanceof Blob;\n}\nfunction hasErrorResponse(error) {\n  return typeof error !== 'undefined' && Object.prototype.hasOwnProperty.call(error, 'response') && typeof error.response !== 'undefined' && Object.prototype.hasOwnProperty.call(error.response, 'status') && typeof error.response.status === 'number';\n}\nvar normalizeHeaders = function (headers, normalizedName) {\n  var e_1, _a;\n  try {\n    for (var _b = __values(Object.entries(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var _d = __read(_c.value, 2),\n        k = _d[0],\n        v = _d[1];\n      if (k !== normalizedName && k.toUpperCase() === normalizedName.toUpperCase()) {\n        headers[normalizedName] = v;\n        delete headers[k];\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n};\nexport var reactNativeRequestTransformer = [function (data, headers) {\n  if (isBlob(data)) {\n    normalizeHeaders(headers, 'Content-Type');\n    normalizeHeaders(headers, 'Accept');\n    return data;\n  }\n  // Axios' default transformRequest is an array\n  return axios.defaults.transformRequest[0].call(null, data, headers);\n}];\nvar AxiosHttpHandler = /** @class */function () {\n  function AxiosHttpHandler(httpOptions, emitter, cancelTokenSource) {\n    if (httpOptions === void 0) {\n      httpOptions = {};\n    }\n    this.httpOptions = httpOptions;\n    this.emitter = emitter;\n    this.cancelTokenSource = cancelTokenSource;\n  }\n  AxiosHttpHandler.prototype.destroy = function () {\n    // Do nothing. TLS and HTTP/2 connection pooling is handled by the\n    // browser.\n  };\n  AxiosHttpHandler.prototype.handle = function (request, options) {\n    var requestTimeoutInMs = this.httpOptions.requestTimeout;\n    // prioritize the call specific event emitter, this is useful for multipart upload as each individual parts has\n    // their own event emitter, without having to create s3client for every individual calls.\n    var emitter = options.emitter || this.emitter;\n    var path = request.path;\n    if (request.query) {\n      var queryString = buildQueryString(request.query);\n      if (queryString) {\n        path += \"?\" + queryString;\n      }\n    }\n    var port = request.port;\n    var url = request.protocol + \"//\" + request.hostname + (port ? \":\" + port : '') + path;\n    var axiosRequest = {};\n    axiosRequest.url = url;\n    axiosRequest.method = request.method;\n    axiosRequest.headers = request.headers;\n    // The host header is automatically added by the browser and adding it explicitly in the\n    // axios request throws an error https://github.com/aws-amplify/amplify-js/issues/5376\n    // This is because the host header is a forbidden header for the http client to set\n    // see https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name and\n    // https://fetch.spec.whatwg.org/#forbidden-header-name\n    // The reason we are removing this header here instead of in the aws-sdk's client\n    // middleware is that the host header is required to be in the request signature and if\n    // we remove it from the middlewares, then the request fails because the header is added\n    // by the browser but is absent from the signature.\n    delete axiosRequest.headers['host'];\n    if (request.body) {\n      axiosRequest.data = request.body;\n    } else {\n      // Fix for https://github.com/aws-amplify/amplify-js/issues/5432\n      // If the POST request body is empty but content-type header is set, axios is forcibly removing it\n      // See https://github.com/axios/axios/issues/1535 and refusing to fix it https://github.com/axios/axios/issues/755\n      // This change is a workaround to set the data as null (instead of undefined) to prevent axios from\n      // removing the content-type header. Link for the source code\n      // https://github.com/axios/axios/blob/dc4bc49673943e35280e5df831f5c3d0347a9393/lib/adapters/xhr.js#L121-L123\n      if (axiosRequest.headers[Object.keys(axiosRequest.headers).find(function (key) {\n        return key.toLowerCase() === 'content-type';\n      })]) {\n        axiosRequest.data = null;\n      }\n    }\n    if (emitter) {\n      // TODO: Unify linting rules across JS repo\n      axiosRequest.onUploadProgress = function (event) {\n        emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, event);\n        logger.debug(event);\n      };\n      // TODO: Unify linting rules across JS repo\n      axiosRequest.onDownloadProgress = function (event) {\n        emitter.emit(SEND_DOWNLOAD_PROGRESS_EVENT, event);\n        logger.debug(event);\n      };\n    }\n    // If a cancel token source is passed down from the provider, allows cancellation of in-flight requests\n    if (this.cancelTokenSource) {\n      axiosRequest.cancelToken = this.cancelTokenSource.token;\n    }\n    if (options.cancelTokenSource) {\n      axiosRequest.cancelToken = options.cancelTokenSource.token;\n    }\n    // From gamma release, aws-sdk now expects all response type to be of blob or streams\n    axiosRequest.responseType = 'blob';\n    // In Axios, Blobs are identified by calling Object.prototype.toString on the object. However, on React Native,\n    // calling Object.prototype.toString on a Blob returns '[object Object]' instead of '[object Blob]', which causes\n    // Axios to treat Blobs as generic Javascript objects. Therefore we need a to use a custom request transformer\n    // to correctly handle Blob in React Native.\n    if (Platform.isReactNative) {\n      axiosRequest.transformRequest = reactNativeRequestTransformer;\n    }\n    var raceOfPromises = [axios.request(axiosRequest).then(function (response) {\n      return {\n        response: new HttpResponse({\n          headers: response.headers,\n          statusCode: response.status,\n          body: response.data\n        })\n      };\n    }).catch(function (error) {\n      var _a, _b;\n      // Error\n      if (error.message !== AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE) {\n        logger.error(error.message);\n      }\n      // for axios' cancel error, we should re-throw it back so it's not considered an s3client error\n      // if we return empty, or an abitrary error HttpResponse, it will be hard to debug down the line.\n      //\n      // for errors that does not have a 'response' object, it's very likely that it is an unexpected error for\n      // example a disconnect. Without it we cannot meaningfully reconstruct a HttpResponse, and the AWS SDK might\n      // consider the request successful by mistake. In this case we should also re-throw the error.\n      if (axios.isCancel(error) || !hasErrorResponse(error)) {\n        throw error;\n      }\n      // otherwise, we should re-construct an HttpResponse from the error, so that it can be passed down to other\n      // aws sdk middleware (e.g retry, clock skew correction, error message serializing)\n      return {\n        response: new HttpResponse({\n          statusCode: error.response.status,\n          body: (_a = error.response) === null || _a === void 0 ? void 0 : _a.data,\n          headers: (_b = error.response) === null || _b === void 0 ? void 0 : _b.headers\n        })\n      };\n    }), requestTimeout(requestTimeoutInMs)];\n    return Promise.race(raceOfPromises);\n  };\n  return AxiosHttpHandler;\n}();\nexport { AxiosHttpHandler };\nfunction requestTimeout(timeoutInMs) {\n  if (timeoutInMs === void 0) {\n    timeoutInMs = 0;\n  }\n  return new Promise(function (resolve, reject) {\n    if (timeoutInMs) {\n      setTimeout(function () {\n        var timeoutError = new Error(\"Request did not complete within \" + timeoutInMs + \" ms\");\n        timeoutError.name = 'TimeoutError';\n        reject(timeoutError);\n      }, timeoutInMs);\n    }\n  });\n}","map":{"version":3,"names":["HttpResponse","buildQueryString","axios","ConsoleLogger","Logger","Platform","AWSS3ProviderUploadErrorStrings","logger","SEND_UPLOAD_PROGRESS_EVENT","SEND_DOWNLOAD_PROGRESS_EVENT","isBlob","body","Blob","hasErrorResponse","error","Object","prototype","hasOwnProperty","call","response","status","normalizeHeaders","headers","normalizedName","_b","__values","entries","_c","next","done","_d","__read","value","k","v","toUpperCase","reactNativeRequestTransformer","data","defaults","transformRequest","AxiosHttpHandler","httpOptions","emitter","cancelTokenSource","destroy","handle","request","options","requestTimeoutInMs","requestTimeout","path","query","queryString","port","url","protocol","hostname","axiosRequest","method","keys","find","key","toLowerCase","onUploadProgress","event","emit","debug","onDownloadProgress","cancelToken","token","responseType","isReactNative","raceOfPromises","then","statusCode","catch","message","UPLOAD_PAUSED_MESSAGE","isCancel","_a","Promise","race","timeoutInMs","resolve","reject","setTimeout","timeoutError","Error","name"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\storage\\src\\providers\\axios-http-handler.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HttpHandlerOptions } from '@aws-sdk/types';\nimport { HttpHandler, HttpRequest, HttpResponse } from '@aws-sdk/protocol-http';\nimport { buildQueryString } from '@aws-sdk/querystring-builder';\nimport axios, {\n\tAxiosRequestConfig,\n\tMethod,\n\tCancelTokenSource,\n\tAxiosRequestHeaders,\n\tAxiosRequestTransformer,\n} from 'axios';\nimport { ConsoleLogger as Logger, Platform } from '@aws-amplify/core';\nimport { FetchHttpHandlerOptions } from '@aws-sdk/fetch-http-handler';\nimport * as events from 'events';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\n\n/**\nExtending the axios interface here to make headers required, (previously, \nthey were not required on the type we were using, but our implementation\ndoes not currently account for missing headers. This worked previously, \nbecause the previous `headers` type was `any`.\n*/\ninterface AxiosTransformer extends Partial<AxiosRequestTransformer> {\n\t(data: any, headers: AxiosRequestHeaders): any;\n}\n\nconst logger = new Logger('axios-http-handler');\nexport const SEND_UPLOAD_PROGRESS_EVENT = 'sendUploadProgress';\nexport const SEND_DOWNLOAD_PROGRESS_EVENT = 'sendDownloadProgress';\n\nexport type ErrorWithResponse = {\n\tresponse: { status: number } & { [key: string]: any };\n};\n\nfunction isBlob(body: any): body is Blob {\n\treturn typeof Blob !== 'undefined' && body instanceof Blob;\n}\n\nfunction hasErrorResponse(error: any): error is ErrorWithResponse {\n\treturn (\n\t\ttypeof error !== 'undefined' &&\n\t\tObject.prototype.hasOwnProperty.call(error, 'response') &&\n\t\ttypeof error.response !== 'undefined' &&\n\t\tObject.prototype.hasOwnProperty.call(error.response, 'status') &&\n\t\ttypeof error.response.status === 'number'\n\t);\n}\n\nconst normalizeHeaders = (\n\theaders: AxiosRequestHeaders,\n\tnormalizedName: string\n) => {\n\tfor (const [k, v] of Object.entries(headers)) {\n\t\tif (\n\t\t\tk !== normalizedName &&\n\t\t\tk.toUpperCase() === normalizedName.toUpperCase()\n\t\t) {\n\t\t\theaders[normalizedName] = v;\n\t\t\tdelete headers[k];\n\t\t}\n\t}\n};\n\nexport const reactNativeRequestTransformer: AxiosTransformer[] = [\n\t(data: any, headers: AxiosRequestHeaders): any => {\n\t\tif (isBlob(data)) {\n\t\t\tnormalizeHeaders(headers, 'Content-Type');\n\t\t\tnormalizeHeaders(headers, 'Accept');\n\t\t\treturn data;\n\t\t}\n\t\t// Axios' default transformRequest is an array\n\t\treturn axios.defaults.transformRequest[0].call(null, data, headers);\n\t},\n];\n\nexport type AxiosHttpHandlerOptions = HttpHandlerOptions & {\n\tcancelTokenSource?: CancelTokenSource;\n\temitter?: events.EventEmitter;\n};\n\nexport class AxiosHttpHandler implements HttpHandler {\n\tconstructor(\n\t\tprivate readonly httpOptions: FetchHttpHandlerOptions = {},\n\t\tprivate readonly emitter?: events.EventEmitter,\n\t\tprivate readonly cancelTokenSource?: CancelTokenSource\n\t) {}\n\n\tdestroy(): void {\n\t\t// Do nothing. TLS and HTTP/2 connection pooling is handled by the\n\t\t// browser.\n\t}\n\n\thandle(\n\t\trequest: HttpRequest,\n\t\toptions: AxiosHttpHandlerOptions\n\t): Promise<{ response: HttpResponse }> {\n\t\tconst requestTimeoutInMs = this.httpOptions.requestTimeout;\n\t\t// prioritize the call specific event emitter, this is useful for multipart upload as each individual parts has\n\t\t// their own event emitter, without having to create s3client for every individual calls.\n\t\tconst emitter = options.emitter || this.emitter;\n\n\t\tlet path = request.path;\n\t\tif (request.query) {\n\t\t\tconst queryString = buildQueryString(request.query);\n\t\t\tif (queryString) {\n\t\t\t\tpath += `?${queryString}`;\n\t\t\t}\n\t\t}\n\n\t\tconst port = request.port;\n\t\tconst url = `${request.protocol}//${request.hostname}${\n\t\t\tport ? `:${port}` : ''\n\t\t}${path}`;\n\n\t\tconst axiosRequest: AxiosRequestConfig = {};\n\t\taxiosRequest.url = url;\n\t\taxiosRequest.method = request.method as Method;\n\t\taxiosRequest.headers = request.headers;\n\n\t\t// The host header is automatically added by the browser and adding it explicitly in the\n\t\t// axios request throws an error https://github.com/aws-amplify/amplify-js/issues/5376\n\t\t// This is because the host header is a forbidden header for the http client to set\n\t\t// see https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name and\n\t\t// https://fetch.spec.whatwg.org/#forbidden-header-name\n\t\t// The reason we are removing this header here instead of in the aws-sdk's client\n\t\t// middleware is that the host header is required to be in the request signature and if\n\t\t// we remove it from the middlewares, then the request fails because the header is added\n\t\t// by the browser but is absent from the signature.\n\t\tdelete axiosRequest.headers['host'];\n\n\t\tif (request.body) {\n\t\t\taxiosRequest.data = request.body;\n\t\t} else {\n\t\t\t// Fix for https://github.com/aws-amplify/amplify-js/issues/5432\n\n\t\t\t// If the POST request body is empty but content-type header is set, axios is forcibly removing it\n\t\t\t// See https://github.com/axios/axios/issues/1535 and refusing to fix it https://github.com/axios/axios/issues/755\n\t\t\t// This change is a workaround to set the data as null (instead of undefined) to prevent axios from\n\t\t\t// removing the content-type header. Link for the source code\n\t\t\t// https://github.com/axios/axios/blob/dc4bc49673943e35280e5df831f5c3d0347a9393/lib/adapters/xhr.js#L121-L123\n\n\t\t\tif (\n\t\t\t\taxiosRequest.headers[\n\t\t\t\t\tObject.keys(axiosRequest.headers).find(\n\t\t\t\t\t\tkey => key.toLowerCase() === 'content-type'\n\t\t\t\t\t)\n\t\t\t\t]\n\t\t\t) {\n\t\t\t\taxiosRequest.data = null;\n\t\t\t}\n\t\t}\n\t\tif (emitter) {\n\t\t\t// TODO: Unify linting rules across JS repo\n\t\t\taxiosRequest.onUploadProgress = function(event) {\n\t\t\t\temitter.emit(SEND_UPLOAD_PROGRESS_EVENT, event);\n\t\t\t\tlogger.debug(event);\n\t\t\t};\n\t\t\t// TODO: Unify linting rules across JS repo\n\t\t\taxiosRequest.onDownloadProgress = function(event) {\n\t\t\t\temitter.emit(SEND_DOWNLOAD_PROGRESS_EVENT, event);\n\t\t\t\tlogger.debug(event);\n\t\t\t};\n\t\t}\n\t\t// If a cancel token source is passed down from the provider, allows cancellation of in-flight requests\n\t\tif (this.cancelTokenSource) {\n\t\t\taxiosRequest.cancelToken = this.cancelTokenSource.token;\n\t\t}\n\n\t\tif (options.cancelTokenSource) {\n\t\t\taxiosRequest.cancelToken = options.cancelTokenSource.token;\n\t\t}\n\n\t\t// From gamma release, aws-sdk now expects all response type to be of blob or streams\n\t\taxiosRequest.responseType = 'blob';\n\t\t// In Axios, Blobs are identified by calling Object.prototype.toString on the object. However, on React Native,\n\t\t// calling Object.prototype.toString on a Blob returns '[object Object]' instead of '[object Blob]', which causes\n\t\t// Axios to treat Blobs as generic Javascript objects. Therefore we need a to use a custom request transformer\n\t\t// to correctly handle Blob in React Native.\n\t\tif (Platform.isReactNative) {\n\t\t\taxiosRequest.transformRequest = reactNativeRequestTransformer;\n\t\t}\n\n\t\tconst raceOfPromises = [\n\t\t\taxios\n\t\t\t\t.request(axiosRequest)\n\t\t\t\t.then(response => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresponse: new HttpResponse({\n\t\t\t\t\t\t\theaders: response.headers,\n\t\t\t\t\t\t\tstatusCode: response.status,\n\t\t\t\t\t\t\tbody: response.data,\n\t\t\t\t\t\t}),\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\t// Error\n\t\t\t\t\tif (\n\t\t\t\t\t\terror.message !==\n\t\t\t\t\t\tAWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE\n\t\t\t\t\t) {\n\t\t\t\t\t\tlogger.error(error.message);\n\t\t\t\t\t}\n\t\t\t\t\t// for axios' cancel error, we should re-throw it back so it's not considered an s3client error\n\t\t\t\t\t// if we return empty, or an abitrary error HttpResponse, it will be hard to debug down the line.\n\t\t\t\t\t//\n\t\t\t\t\t// for errors that does not have a 'response' object, it's very likely that it is an unexpected error for\n\t\t\t\t\t// example a disconnect. Without it we cannot meaningfully reconstruct a HttpResponse, and the AWS SDK might\n\t\t\t\t\t// consider the request successful by mistake. In this case we should also re-throw the error.\n\t\t\t\t\tif (axios.isCancel(error) || !hasErrorResponse(error)) {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t\t// otherwise, we should re-construct an HttpResponse from the error, so that it can be passed down to other\n\t\t\t\t\t// aws sdk middleware (e.g retry, clock skew correction, error message serializing)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresponse: new HttpResponse({\n\t\t\t\t\t\t\tstatusCode: error.response.status,\n\t\t\t\t\t\t\tbody: error.response?.data,\n\t\t\t\t\t\t\theaders: error.response?.headers,\n\t\t\t\t\t\t}),\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\trequestTimeout(requestTimeoutInMs),\n\t\t];\n\t\treturn Promise.race(raceOfPromises);\n\t}\n}\n\nfunction requestTimeout(timeoutInMs: number = 0): Promise<never> {\n\treturn new Promise((resolve, reject) => {\n\t\tif (timeoutInMs) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst timeoutError = new Error(\n\t\t\t\t\t`Request did not complete within ${timeoutInMs} ms`\n\t\t\t\t);\n\t\t\t\ttimeoutError.name = 'TimeoutError';\n\t\t\t\treject(timeoutError);\n\t\t\t}, timeoutInMs);\n\t\t}\n\t});\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}