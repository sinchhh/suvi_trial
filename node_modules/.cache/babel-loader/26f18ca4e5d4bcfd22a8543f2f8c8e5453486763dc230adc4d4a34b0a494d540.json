{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getCanonicalHeaders } from './getCanonicalHeaders';\nimport { getCanonicalQueryString } from './getCanonicalQueryString';\nimport { getCanonicalUri } from './getCanonicalUri';\nimport { getHashedPayload } from './getHashedPayload';\nimport { getSignedHeaders } from './getSignedHeaders';\n/**\n * Returns a canonical request.\n *\n * @param request `HttpRequest` from which to create the canonical request from.\n * @returns String created by by concatenating the following strings, separated by newline characters:\n * - HTTPMethod\n * - CanonicalUri\n * - CanonicalQueryString\n * - CanonicalHeaders\n * - SignedHeaders\n * - HashedPayload\n *\n * @internal\n */\nexport var getCanonicalRequest = function (_a) {\n  var body = _a.body,\n    headers = _a.headers,\n    method = _a.method,\n    url = _a.url;\n  return [method, getCanonicalUri(url.pathname), getCanonicalQueryString(url.searchParams), getCanonicalHeaders(headers), getSignedHeaders(headers), getHashedPayload(body)].join('\\n');\n};","map":{"version":3,"names":["getCanonicalHeaders","getCanonicalQueryString","getCanonicalUri","getHashedPayload","getSignedHeaders","getCanonicalRequest","_a","body","headers","method","url","pathname","searchParams","join"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\utils\\getCanonicalRequest.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HttpRequest } from '../../../../../types';\nimport { getCanonicalHeaders } from './getCanonicalHeaders';\nimport { getCanonicalQueryString } from './getCanonicalQueryString';\nimport { getCanonicalUri } from './getCanonicalUri';\nimport { getHashedPayload } from './getHashedPayload';\nimport { getSignedHeaders } from './getSignedHeaders';\n\n/**\n * Returns a canonical request.\n *\n * @param request `HttpRequest` from which to create the canonical request from.\n * @returns String created by by concatenating the following strings, separated by newline characters:\n * - HTTPMethod\n * - CanonicalUri\n * - CanonicalQueryString\n * - CanonicalHeaders\n * - SignedHeaders\n * - HashedPayload\n *\n * @internal\n */\nexport const getCanonicalRequest = ({\n\tbody,\n\theaders,\n\tmethod,\n\turl,\n}: HttpRequest): string =>\n\t[\n\t\tmethod,\n\t\tgetCanonicalUri(url.pathname),\n\t\tgetCanonicalQueryString(url.searchParams),\n\t\tgetCanonicalHeaders(headers),\n\t\tgetSignedHeaders(headers),\n\t\tgetHashedPayload(body),\n\t].join('\\n');\n"],"mappings":"AAAA;AACA;AAGA,SAASA,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD;;;;;;;;;;;;;;AAcA,OAAO,IAAMC,mBAAmB,GAAG,SAAAA,CAACC,EAKtB;MAJbC,IAAA,GAAAD,EAAA,CAAAC,IAAI;IACJC,OAAA,GAAAF,EAAA,CAAAE,OAAO;IACPC,MAAA,GAAAH,EAAA,CAAAG,MAAM;IACNC,GAAA,GAAAJ,EAAA,CAAAI,GAAG;EAEH,QACCD,MAAM,EACNP,eAAe,CAACQ,GAAG,CAACC,QAAQ,CAAC,EAC7BV,uBAAuB,CAACS,GAAG,CAACE,YAAY,CAAC,EACzCZ,mBAAmB,CAACQ,OAAO,CAAC,EAC5BJ,gBAAgB,CAACI,OAAO,CAAC,EACzBL,gBAAgB,CAACI,IAAI,CAAC,CACtB,CAACM,IAAI,CAAC,IAAI,CAAC;AAPZ,CAOY"},"metadata":{},"sourceType":"module","externalDependencies":[]}