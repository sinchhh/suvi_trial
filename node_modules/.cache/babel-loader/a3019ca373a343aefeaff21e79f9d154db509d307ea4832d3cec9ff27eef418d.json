{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign } from \"tslib\";\nimport { getSignedHeaders } from './utils/getSignedHeaders';\nimport { getSigningValues } from './utils/getSigningValues';\nimport { AMZ_DATE_HEADER, AUTH_HEADER, HOST_HEADER, SHA256_ALGORITHM_IDENTIFIER, TOKEN_HEADER } from './constants';\nimport { getSignature } from './utils/getSignature';\n/**\n * Given a `HttpRequest`, returns a Signature Version 4 signed `HttpRequest`.\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns A `HttpRequest` with authentication headers which can grant temporary access to AWS resources.\n */\nexport var signRequest = function (request, options) {\n  var signingValues = getSigningValues(options);\n  var accessKeyId = signingValues.accessKeyId,\n    credentialScope = signingValues.credentialScope,\n    longDate = signingValues.longDate,\n    sessionToken = signingValues.sessionToken;\n  // create the request to sign\n  var headers = __assign({}, request.headers);\n  headers[HOST_HEADER] = request.url.host;\n  headers[AMZ_DATE_HEADER] = longDate;\n  if (sessionToken) {\n    headers[TOKEN_HEADER] = sessionToken;\n  }\n  var requestToSign = __assign(__assign({}, request), {\n    headers: headers\n  });\n  // calculate and add the signature to the request\n  var signature = getSignature(requestToSign, signingValues);\n  var credentialEntry = \"Credential=\" + accessKeyId + \"/\" + credentialScope;\n  var signedHeadersEntry = \"SignedHeaders=\" + getSignedHeaders(headers);\n  var signatureEntry = \"Signature=\" + signature;\n  headers[AUTH_HEADER] = SHA256_ALGORITHM_IDENTIFIER + \" \" + credentialEntry + \", \" + signedHeadersEntry + \", \" + signatureEntry;\n  return requestToSign;\n};","map":{"version":3,"names":["getSignedHeaders","getSigningValues","AMZ_DATE_HEADER","AUTH_HEADER","HOST_HEADER","SHA256_ALGORITHM_IDENTIFIER","TOKEN_HEADER","getSignature","signRequest","request","options","signingValues","accessKeyId","credentialScope","longDate","sessionToken","headers","__assign","url","host","requestToSign","signature","credentialEntry","signedHeadersEntry","signatureEntry"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\signRequest.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HttpRequest } from '../../../../types';\nimport { SignRequestOptions } from './types/signer';\nimport { getSignedHeaders } from './utils/getSignedHeaders';\nimport { getSigningValues } from './utils/getSigningValues';\nimport {\n\tAMZ_DATE_HEADER,\n\tAUTH_HEADER,\n\tHOST_HEADER,\n\tSHA256_ALGORITHM_IDENTIFIER,\n\tTOKEN_HEADER,\n} from './constants';\nimport { getSignature } from './utils/getSignature';\n\n/**\n * Given a `HttpRequest`, returns a Signature Version 4 signed `HttpRequest`.\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns A `HttpRequest` with authentication headers which can grant temporary access to AWS resources.\n */\nexport const signRequest = (\n\trequest: HttpRequest,\n\toptions: SignRequestOptions\n): HttpRequest => {\n\tconst signingValues = getSigningValues(options);\n\tconst { accessKeyId, credentialScope, longDate, sessionToken } =\n\t\tsigningValues;\n\n\t// create the request to sign\n\tconst headers = { ...request.headers };\n\theaders[HOST_HEADER] = request.url.host;\n\theaders[AMZ_DATE_HEADER] = longDate;\n\tif (sessionToken) {\n\t\theaders[TOKEN_HEADER] = sessionToken;\n\t}\n\tconst requestToSign = { ...request, headers };\n\n\t// calculate and add the signature to the request\n\tconst signature = getSignature(requestToSign, signingValues);\n\tconst credentialEntry = `Credential=${accessKeyId}/${credentialScope}`;\n\tconst signedHeadersEntry = `SignedHeaders=${getSignedHeaders(headers)}`;\n\tconst signatureEntry = `Signature=${signature}`;\n\theaders[\n\t\tAUTH_HEADER\n\t] = `${SHA256_ALGORITHM_IDENTIFIER} ${credentialEntry}, ${signedHeadersEntry}, ${signatureEntry}`;\n\n\treturn requestToSign;\n};\n"],"mappings":"AAAA;AACA;;AAIA,SAASA,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SACCC,eAAe,EACfC,WAAW,EACXC,WAAW,EACXC,2BAA2B,EAC3BC,YAAY,QACN,aAAa;AACpB,SAASC,YAAY,QAAQ,sBAAsB;AAEnD;;;;;;;AAOA,OAAO,IAAMC,WAAW,GAAG,SAAAA,CAC1BC,OAAoB,EACpBC,OAA2B;EAE3B,IAAMC,aAAa,GAAGV,gBAAgB,CAACS,OAAO,CAAC;EACvC,IAAAE,WAAA,GAAAD,aAAA,CAAAC,WAAW;IAAEC,eAAA,GAAAF,aAAA,CAAAE,eAAe;IAAEC,QAAA,GAAAH,aAAA,CAAAG,QAAQ;IAAEC,YAAA,GAAAJ,aAAA,CAAAI,YAAY;EAG5D;EACA,IAAMC,OAAO,GAAAC,QAAA,KAAQR,OAAO,CAACO,OAAO,CAAE;EACtCA,OAAO,CAACZ,WAAW,CAAC,GAAGK,OAAO,CAACS,GAAG,CAACC,IAAI;EACvCH,OAAO,CAACd,eAAe,CAAC,GAAGY,QAAQ;EACnC,IAAIC,YAAY,EAAE;IACjBC,OAAO,CAACV,YAAY,CAAC,GAAGS,YAAY;;EAErC,IAAMK,aAAa,GAAAH,QAAA,CAAAA,QAAA,KAAQR,OAAO;IAAEO,OAAO,EAAAA;EAAA,EAAE;EAE7C;EACA,IAAMK,SAAS,GAAGd,YAAY,CAACa,aAAa,EAAET,aAAa,CAAC;EAC5D,IAAMW,eAAe,GAAG,gBAAcV,WAAW,SAAIC,eAAiB;EACtE,IAAMU,kBAAkB,GAAG,mBAAiBvB,gBAAgB,CAACgB,OAAO,CAAG;EACvE,IAAMQ,cAAc,GAAG,eAAaH,SAAW;EAC/CL,OAAO,CACNb,WAAW,CACX,GAAME,2BAA2B,SAAIiB,eAAe,UAAKC,kBAAkB,UAAKC,cAAgB;EAEjG,OAAOJ,aAAa;AACrB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}