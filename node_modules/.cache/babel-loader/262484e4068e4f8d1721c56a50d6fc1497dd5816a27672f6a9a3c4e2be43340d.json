{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { I18n as I18nClass } from './I18n';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { Amplify } from '../Amplify';\nvar logger = new Logger('I18n');\nvar _config = null;\nvar _i18n = null;\n/**\n * Export I18n APIs\n */\nvar I18n = /** @class */function () {\n  function I18n() {}\n  /**\n   * @static\n   * @method\n   * Configure I18n part\n   * @param {Object} config - Configuration of the I18n\n   */\n  I18n.configure = function (config) {\n    logger.debug('configure I18n');\n    if (!config) {\n      return _config;\n    }\n    _config = Object.assign({}, _config, config.I18n || config);\n    I18n.createInstance();\n    return _config;\n  };\n  I18n.getModuleName = function () {\n    return 'I18n';\n  };\n  /**\n   * @static\n   * @method\n   * Create an instance of I18n for the library\n   */\n  I18n.createInstance = function () {\n    logger.debug('create I18n instance');\n    if (_i18n) {\n      return;\n    }\n    _i18n = new I18nClass(_config);\n  };\n  /**\n   * @static @method\n   * Explicitly setting language\n   * @param {String} lang\n   */\n  I18n.setLanguage = function (lang) {\n    I18n.checkConfig();\n    return _i18n.setLanguage(lang);\n  };\n  /**\n   * @static @method\n   * Get value\n   * @param {String} key\n   * @param {String} defVal - Default value\n   */\n  I18n.get = function (key, defVal) {\n    if (!I18n.checkConfig()) {\n      return typeof defVal === 'undefined' ? key : defVal;\n    }\n    return _i18n.get(key, defVal);\n  };\n  /**\n   * @static\n   * @method\n   * Add vocabularies for one language\n   * @param {String} langurage - Language of the dictionary\n   * @param {Object} vocabularies - Object that has key-value as dictionary entry\n   */\n  I18n.putVocabulariesForLanguage = function (language, vocabularies) {\n    I18n.checkConfig();\n    return _i18n.putVocabulariesForLanguage(language, vocabularies);\n  };\n  /**\n   * @static\n   * @method\n   * Add vocabularies for one language\n   * @param {Object} vocabularies - Object that has language as key,\n   *                                vocabularies of each language as value\n   */\n  I18n.putVocabularies = function (vocabularies) {\n    I18n.checkConfig();\n    return _i18n.putVocabularies(vocabularies);\n  };\n  I18n.checkConfig = function () {\n    if (!_i18n) {\n      _i18n = new I18nClass(_config);\n    }\n    return true;\n  };\n  return I18n;\n}();\nexport { I18n };\nAmplify.register(I18n);","map":{"version":3,"names":["I18n","I18nClass","ConsoleLogger","Logger","Amplify","logger","_config","_i18n","configure","config","debug","Object","assign","createInstance","getModuleName","setLanguage","lang","checkConfig","get","key","defVal","putVocabulariesForLanguage","language","vocabularies","putVocabularies","register"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\core\\src\\I18n\\index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { I18n as I18nClass } from './I18n';\n\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { Amplify } from '../Amplify';\n\nconst logger = new Logger('I18n');\n\nlet _config = null;\nlet _i18n = null;\n\n/**\n * Export I18n APIs\n */\nexport class I18n {\n\t/**\n\t * @static\n\t * @method\n\t * Configure I18n part\n\t * @param {Object} config - Configuration of the I18n\n\t */\n\tstatic configure(config) {\n\t\tlogger.debug('configure I18n');\n\t\tif (!config) {\n\t\t\treturn _config;\n\t\t}\n\n\t\t_config = Object.assign({}, _config, config.I18n || config);\n\n\t\tI18n.createInstance();\n\n\t\treturn _config;\n\t}\n\n\tstatic getModuleName() {\n\t\treturn 'I18n';\n\t}\n\n\t/**\n\t * @static\n\t * @method\n\t * Create an instance of I18n for the library\n\t */\n\tstatic createInstance() {\n\t\tlogger.debug('create I18n instance');\n\t\tif (_i18n) {\n\t\t\treturn;\n\t\t}\n\t\t_i18n = new I18nClass(_config);\n\t}\n\n\t/**\n\t * @static @method\n\t * Explicitly setting language\n\t * @param {String} lang\n\t */\n\tstatic setLanguage(lang) {\n\t\tI18n.checkConfig();\n\n\t\treturn _i18n.setLanguage(lang);\n\t}\n\n\t/**\n\t * @static @method\n\t * Get value\n\t * @param {String} key\n\t * @param {String} defVal - Default value\n\t */\n\tstatic get(key, defVal?) {\n\t\tif (!I18n.checkConfig()) {\n\t\t\treturn typeof defVal === 'undefined' ? key : defVal;\n\t\t}\n\n\t\treturn _i18n.get(key, defVal);\n\t}\n\n\t/**\n\t * @static\n\t * @method\n\t * Add vocabularies for one language\n\t * @param {String} langurage - Language of the dictionary\n\t * @param {Object} vocabularies - Object that has key-value as dictionary entry\n\t */\n\tstatic putVocabulariesForLanguage(language, vocabularies) {\n\t\tI18n.checkConfig();\n\n\t\treturn _i18n.putVocabulariesForLanguage(language, vocabularies);\n\t}\n\n\t/**\n\t * @static\n\t * @method\n\t * Add vocabularies for one language\n\t * @param {Object} vocabularies - Object that has language as key,\n\t *                                vocabularies of each language as value\n\t */\n\tstatic putVocabularies(vocabularies) {\n\t\tI18n.checkConfig();\n\n\t\treturn _i18n.putVocabularies(vocabularies);\n\t}\n\n\tpublic static checkConfig() {\n\t\tif (!_i18n) {\n\t\t\t_i18n = new I18nClass(_config);\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\nAmplify.register(I18n);\n"],"mappings":"AAAA;AACA;AAEA,SAASA,IAAI,IAAIC,SAAS,QAAQ,QAAQ;AAE1C,SAASC,aAAa,IAAIC,MAAM,QAAQ,WAAW;AACnD,SAASC,OAAO,QAAQ,YAAY;AAEpC,IAAMC,MAAM,GAAG,IAAIF,MAAM,CAAC,MAAM,CAAC;AAEjC,IAAIG,OAAO,GAAG,IAAI;AAClB,IAAIC,KAAK,GAAG,IAAI;AAEhB;;;AAGA,IAAAP,IAAA;EAAA,SAAAA,KAAA,GA+FA;EA9FC;;;;;;EAMOA,IAAA,CAAAQ,SAAS,GAAhB,UAAiBC,MAAM;IACtBJ,MAAM,CAACK,KAAK,CAAC,gBAAgB,CAAC;IAC9B,IAAI,CAACD,MAAM,EAAE;MACZ,OAAOH,OAAO;;IAGfA,OAAO,GAAGK,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEN,OAAO,EAAEG,MAAM,CAACT,IAAI,IAAIS,MAAM,CAAC;IAE3DT,IAAI,CAACa,cAAc,EAAE;IAErB,OAAOP,OAAO;EACf,CAAC;EAEMN,IAAA,CAAAc,aAAa,GAApB;IACC,OAAO,MAAM;EACd,CAAC;EAED;;;;;EAKOd,IAAA,CAAAa,cAAc,GAArB;IACCR,MAAM,CAACK,KAAK,CAAC,sBAAsB,CAAC;IACpC,IAAIH,KAAK,EAAE;MACV;;IAEDA,KAAK,GAAG,IAAIN,SAAS,CAACK,OAAO,CAAC;EAC/B,CAAC;EAED;;;;;EAKON,IAAA,CAAAe,WAAW,GAAlB,UAAmBC,IAAI;IACtBhB,IAAI,CAACiB,WAAW,EAAE;IAElB,OAAOV,KAAK,CAACQ,WAAW,CAACC,IAAI,CAAC;EAC/B,CAAC;EAED;;;;;;EAMOhB,IAAA,CAAAkB,GAAG,GAAV,UAAWC,GAAG,EAAEC,MAAO;IACtB,IAAI,CAACpB,IAAI,CAACiB,WAAW,EAAE,EAAE;MACxB,OAAO,OAAOG,MAAM,KAAK,WAAW,GAAGD,GAAG,GAAGC,MAAM;;IAGpD,OAAOb,KAAK,CAACW,GAAG,CAACC,GAAG,EAAEC,MAAM,CAAC;EAC9B,CAAC;EAED;;;;;;;EAOOpB,IAAA,CAAAqB,0BAA0B,GAAjC,UAAkCC,QAAQ,EAAEC,YAAY;IACvDvB,IAAI,CAACiB,WAAW,EAAE;IAElB,OAAOV,KAAK,CAACc,0BAA0B,CAACC,QAAQ,EAAEC,YAAY,CAAC;EAChE,CAAC;EAED;;;;;;;EAOOvB,IAAA,CAAAwB,eAAe,GAAtB,UAAuBD,YAAY;IAClCvB,IAAI,CAACiB,WAAW,EAAE;IAElB,OAAOV,KAAK,CAACiB,eAAe,CAACD,YAAY,CAAC;EAC3C,CAAC;EAEavB,IAAA,CAAAiB,WAAW,GAAzB;IACC,IAAI,CAACV,KAAK,EAAE;MACXA,KAAK,GAAG,IAAIN,SAAS,CAACK,OAAO,CAAC;;IAG/B,OAAO,IAAI;EACZ,CAAC;EACF,OAAAN,IAAC;AAAD,CAAC,CA/FD;;AAiGAI,OAAO,CAACqB,QAAQ,CAACzB,IAAI,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}