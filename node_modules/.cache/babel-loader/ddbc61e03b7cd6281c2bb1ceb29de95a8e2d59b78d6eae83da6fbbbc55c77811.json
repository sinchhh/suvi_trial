{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { Credentials, Logger, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { S3Client } from '@aws-sdk/client-s3';\nimport { AxiosHttpHandler } from '../providers/axios-http-handler';\nimport { localTestingStorageEndpoint, SET_CONTENT_LENGTH_HEADER } from './StorageConstants';\nvar logger = new Logger('S3ClientUtils');\n// placeholder credentials in order to satisfy type requirement, always results in 403 when used\nvar INVALID_CRED = {\n  accessKeyId: '',\n  secretAccessKey: ''\n};\nexport var getPrefix = function (config) {\n  var credentials = config.credentials,\n    level = config.level,\n    customPrefix = config.customPrefix,\n    identityId = config.identityId;\n  var resolvedCustomPrefix = customPrefix || {};\n  var resolvedIdentityId = identityId || credentials.identityId;\n  var privatePath = (resolvedCustomPrefix.private !== undefined ? resolvedCustomPrefix.private : 'private/') + resolvedIdentityId + '/';\n  var protectedPath = (resolvedCustomPrefix.protected !== undefined ? resolvedCustomPrefix.protected : 'protected/') + resolvedIdentityId + '/';\n  var publicPath = resolvedCustomPrefix.public !== undefined ? resolvedCustomPrefix.public : 'public/';\n  switch (level) {\n    case 'private':\n      return privatePath;\n    case 'protected':\n      return protectedPath;\n    default:\n      return publicPath;\n  }\n};\nexport var createPrefixMiddleware = function (opt, key) {\n  return function (next, _context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var credentials, cred, prefix, clonedInput, result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, Credentials.get()];\n            case 1:\n              credentials = _a.sent();\n              cred = Credentials.shear(credentials);\n              prefix = getPrefix(__assign(__assign({}, opt), {\n                credentials: cred\n              }));\n              clonedInput = Object.assign({}, args.input);\n              if (Object.prototype.hasOwnProperty.call(args.input, 'Key')) {\n                clonedInput.Key = prefix + key;\n                args.input = clonedInput;\n              } else if (Object.prototype.hasOwnProperty.call(args.input, 'Prefix')) {\n                clonedInput.Prefix = prefix + key;\n                args.input = clonedInput;\n              }\n              result = next(args);\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    };\n  };\n};\nvar isTimeSkewedError = function (err) {\n  return err.ServerTime && typeof err.Code === 'string' && err.Code === 'RequestTimeTooSkewed';\n};\n// we want to take the S3Client config in parameter so we can modify it's systemClockOffset\nexport var autoAdjustClockskewMiddleware = function (config) {\n  return function (next, _context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var err_1, serverDate;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n              return [4 /*yield*/, next(args)];\n            case 1:\n              return [2 /*return*/, _a.sent()];\n            case 2:\n              err_1 = _a.sent();\n              if (isTimeSkewedError(err_1)) {\n                serverDate = new Date(err_1.ServerTime);\n                config.systemClockOffset = serverDate.getTime() - Date.now();\n              }\n              throw err_1;\n            case 3:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n  };\n};\n\nexport var autoAdjustClockskewMiddlewareOptions = {\n  step: 'finalizeRequest',\n  name: 'autoAdjustClockskewMiddleware'\n};\nexport var prefixMiddlewareOptions = {\n  step: 'initialize',\n  name: 'addPrefixMiddleware'\n};\nexport var credentialsProvider = function () {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var credentials, cred, error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n          return [4 /*yield*/, Credentials.get()];\n        case 1:\n          credentials = _a.sent();\n          if (!credentials) return [2 /*return*/, INVALID_CRED];\n          cred = Credentials.shear(credentials);\n          logger.debug('credentials provider get credentials', cred);\n          return [2 /*return*/, cred];\n        case 2:\n          error_1 = _a.sent();\n          logger.warn('credentials provider error', error_1);\n          return [2 /*return*/, INVALID_CRED];\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n};\n\nexport var createS3Client = function (config, emitter) {\n  var region = config.region,\n    cancelTokenSource = config.cancelTokenSource,\n    dangerouslyConnectToHttpEndpointForTesting = config.dangerouslyConnectToHttpEndpointForTesting,\n    useAccelerateEndpoint = config.useAccelerateEndpoint;\n  var localTestingConfig = {};\n  if (dangerouslyConnectToHttpEndpointForTesting) {\n    localTestingConfig = {\n      endpoint: localTestingStorageEndpoint,\n      tls: false,\n      bucketEndpoint: false,\n      forcePathStyle: true\n    };\n  }\n  var s3client = new S3Client(__assign(__assign({\n    region: region,\n    // Using provider instead of a static credentials, so that if an upload task was in progress, but credentials gets\n    // changed or invalidated (e.g user signed out), the subsequent requests will fail.\n    credentials: credentialsProvider,\n    customUserAgent: getAmplifyUserAgent()\n  }, localTestingConfig), {\n    requestHandler: new AxiosHttpHandler({}, emitter, cancelTokenSource),\n    useAccelerateEndpoint: useAccelerateEndpoint\n  }));\n  s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n  return s3client;\n};\nvar MB = 1024 * 1024;\nvar GB = 1024 * MB;\nvar TB = 1024 * GB;\nexport var DEFAULT_PART_SIZE = 5 * MB;\nexport var MAX_OBJECT_SIZE = 5 * TB;\nexport var MAX_PARTS_COUNT = 10000;\nexport var DEFAULT_QUEUE_SIZE = 4;\nexport var calculatePartSize = function (totalSize) {\n  var partSize = DEFAULT_PART_SIZE;\n  var partsCount = Math.ceil(totalSize / partSize);\n  while (partsCount > MAX_PARTS_COUNT) {\n    partSize *= 2;\n    partsCount = Math.ceil(totalSize / partSize);\n  }\n  return partSize;\n};","map":{"version":3,"names":["Credentials","Logger","getAmplifyUserAgent","S3Client","AxiosHttpHandler","localTestingStorageEndpoint","SET_CONTENT_LENGTH_HEADER","logger","INVALID_CRED","accessKeyId","secretAccessKey","getPrefix","config","credentials","level","customPrefix","identityId","resolvedCustomPrefix","resolvedIdentityId","privatePath","private","undefined","protectedPath","protected","publicPath","public","createPrefixMiddleware","opt","key","next","_context","args","__awaiter","get","_a","sent","cred","shear","prefix","__assign","clonedInput","Object","assign","input","prototype","hasOwnProperty","call","Key","Prefix","result","isTimeSkewedError","err","ServerTime","Code","autoAdjustClockskewMiddleware","err_1","serverDate","Date","systemClockOffset","getTime","now","autoAdjustClockskewMiddlewareOptions","step","name","prefixMiddlewareOptions","credentialsProvider","debug","warn","error_1","createS3Client","emitter","region","cancelTokenSource","dangerouslyConnectToHttpEndpointForTesting","useAccelerateEndpoint","localTestingConfig","endpoint","tls","bucketEndpoint","forcePathStyle","s3client","customUserAgent","requestHandler","middlewareStack","remove","MB","GB","TB","DEFAULT_PART_SIZE","MAX_OBJECT_SIZE","MAX_PARTS_COUNT","DEFAULT_QUEUE_SIZE","calculatePartSize","totalSize","partSize","partsCount","Math","ceil"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-amplify\\storage\\src\\common\\S3ClientUtils.ts"],"sourcesContent":["import {\n\tCredentials,\n\tICredentials,\n\tLogger,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport { StorageAccessLevel, CustomPrefix } from '../types';\nimport {\n\tInitializeMiddleware,\n\tInitializeHandlerOptions,\n\tFinalizeRequestHandlerOptions,\n\tFinalizeRequestMiddleware,\n\tHandlerExecutionContext,\n} from '@aws-sdk/types';\nimport { S3ClientConfig, S3Client } from '@aws-sdk/client-s3';\nimport { CancelTokenSource } from 'axios';\nimport * as events from 'events';\nimport { AxiosHttpHandler } from '../providers/axios-http-handler';\nimport {\n\tlocalTestingStorageEndpoint,\n\tSET_CONTENT_LENGTH_HEADER,\n} from './StorageConstants';\n\nconst logger = new Logger('S3ClientUtils');\n// placeholder credentials in order to satisfy type requirement, always results in 403 when used\nconst INVALID_CRED = { accessKeyId: '', secretAccessKey: '' };\n\nexport const getPrefix = (config: {\n\tcredentials: ICredentials;\n\tlevel?: StorageAccessLevel;\n\tcustomPrefix?: CustomPrefix;\n\tidentityId?: string;\n}): string => {\n\tconst { credentials, level, customPrefix, identityId } = config;\n\n\tconst resolvedCustomPrefix = customPrefix || {};\n\tconst resolvedIdentityId = identityId || credentials.identityId;\n\tconst privatePath =\n\t\t(resolvedCustomPrefix.private !== undefined\n\t\t\t? resolvedCustomPrefix.private\n\t\t\t: 'private/') +\n\t\tresolvedIdentityId +\n\t\t'/';\n\tconst protectedPath =\n\t\t(resolvedCustomPrefix.protected !== undefined\n\t\t\t? resolvedCustomPrefix.protected\n\t\t\t: 'protected/') +\n\t\tresolvedIdentityId +\n\t\t'/';\n\tconst publicPath =\n\t\tresolvedCustomPrefix.public !== undefined\n\t\t\t? resolvedCustomPrefix.public\n\t\t\t: 'public/';\n\n\tswitch (level) {\n\t\tcase 'private':\n\t\t\treturn privatePath;\n\t\tcase 'protected':\n\t\t\treturn protectedPath;\n\t\tdefault:\n\t\t\treturn publicPath;\n\t}\n};\n\nexport const createPrefixMiddleware =\n\t(opt: Record<string, any>, key: string): InitializeMiddleware<any, any> =>\n\t(next, _context) =>\n\tasync args => {\n\t\tconst credentials = await Credentials.get();\n\t\tconst cred = Credentials.shear(credentials);\n\t\tconst prefix = getPrefix({ ...opt, credentials: cred });\n\t\tconst clonedInput = Object.assign({}, args.input);\n\t\tif (Object.prototype.hasOwnProperty.call(args.input, 'Key')) {\n\t\t\tclonedInput.Key = prefix + key;\n\t\t\targs.input = clonedInput;\n\t\t} else if (Object.prototype.hasOwnProperty.call(args.input, 'Prefix')) {\n\t\t\tclonedInput.Prefix = prefix + key;\n\t\t\targs.input = clonedInput;\n\t\t}\n\t\tconst result = next(args);\n\t\treturn result;\n\t};\n\nconst isTimeSkewedError = (err: any): boolean =>\n\terr.ServerTime &&\n\ttypeof err.Code === 'string' &&\n\terr.Code === 'RequestTimeTooSkewed';\n\n// we want to take the S3Client config in parameter so we can modify it's systemClockOffset\nexport const autoAdjustClockskewMiddleware =\n\t(config: S3ClientConfig): FinalizeRequestMiddleware<any, any> =>\n\t(next, _context: HandlerExecutionContext) =>\n\tasync args => {\n\t\ttry {\n\t\t\treturn await next(args);\n\t\t} catch (err) {\n\t\t\tif (isTimeSkewedError(err)) {\n\t\t\t\tconst serverDate = new Date(err.ServerTime);\n\t\t\t\tconfig.systemClockOffset = serverDate.getTime() - Date.now();\n\t\t\t}\n\t\t\tthrow err;\n\t\t}\n\t};\n\nexport const autoAdjustClockskewMiddlewareOptions: FinalizeRequestHandlerOptions =\n\t{\n\t\tstep: 'finalizeRequest',\n\t\tname: 'autoAdjustClockskewMiddleware',\n\t};\n\nexport const prefixMiddlewareOptions: InitializeHandlerOptions = {\n\tstep: 'initialize',\n\tname: 'addPrefixMiddleware',\n};\n\nexport const credentialsProvider = async () => {\n\ttry {\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) return INVALID_CRED;\n\t\tconst cred = Credentials.shear(credentials);\n\t\tlogger.debug('credentials provider get credentials', cred);\n\t\treturn cred;\n\t} catch (error) {\n\t\tlogger.warn('credentials provider error', error);\n\t\treturn INVALID_CRED;\n\t}\n};\n\nexport const createS3Client = (\n\tconfig: {\n\t\tregion?: string;\n\t\tcancelTokenSource?: CancelTokenSource;\n\t\tdangerouslyConnectToHttpEndpointForTesting?: boolean;\n\t\tuseAccelerateEndpoint?: boolean;\n\t},\n\temitter?: events.EventEmitter\n): S3Client => {\n\tconst {\n\t\tregion,\n\t\tcancelTokenSource,\n\t\tdangerouslyConnectToHttpEndpointForTesting,\n\t\tuseAccelerateEndpoint,\n\t} = config;\n\tlet localTestingConfig = {};\n\n\tif (dangerouslyConnectToHttpEndpointForTesting) {\n\t\tlocalTestingConfig = {\n\t\t\tendpoint: localTestingStorageEndpoint,\n\t\t\ttls: false,\n\t\t\tbucketEndpoint: false,\n\t\t\tforcePathStyle: true,\n\t\t};\n\t}\n\n\tconst s3client = new S3Client({\n\t\tregion,\n\t\t// Using provider instead of a static credentials, so that if an upload task was in progress, but credentials gets\n\t\t// changed or invalidated (e.g user signed out), the subsequent requests will fail.\n\t\tcredentials: credentialsProvider,\n\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t...localTestingConfig,\n\t\trequestHandler: new AxiosHttpHandler({}, emitter, cancelTokenSource),\n\t\tuseAccelerateEndpoint,\n\t});\n\ts3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n\treturn s3client;\n};\n\nconst MB = 1024 * 1024;\nconst GB = 1024 * MB;\nconst TB = 1024 * GB;\n\nexport const DEFAULT_PART_SIZE = 5 * MB;\nexport const MAX_OBJECT_SIZE = 5 * TB;\nexport const MAX_PARTS_COUNT = 10000;\nexport const DEFAULT_QUEUE_SIZE = 4;\n\nexport const calculatePartSize = (totalSize: number): number => {\n\tlet partSize = DEFAULT_PART_SIZE;\n\tlet partsCount = Math.ceil(totalSize / partSize);\n\twhile (partsCount > MAX_PARTS_COUNT) {\n\t\tpartSize *= 2;\n\t\tpartsCount = Math.ceil(totalSize / partSize);\n\t}\n\treturn partSize;\n};\n"],"mappings":";AAAA,SACCA,WAAW,EAEXC,MAAM,EACNC,mBAAmB,QACb,mBAAmB;AAS1B,SAAyBC,QAAQ,QAAQ,oBAAoB;AAG7D,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE,SACCC,2BAA2B,EAC3BC,yBAAyB,QACnB,oBAAoB;AAE3B,IAAMC,MAAM,GAAG,IAAIN,MAAM,CAAC,eAAe,CAAC;AAC1C;AACA,IAAMO,YAAY,GAAG;EAAEC,WAAW,EAAE,EAAE;EAAEC,eAAe,EAAE;AAAE,CAAE;AAE7D,OAAO,IAAMC,SAAS,GAAG,SAAAA,CAACC,MAKzB;EACQ,IAAAC,WAAA,GAAAD,MAAA,CAAAC,WAAW;IAAEC,KAAA,GAAAF,MAAA,CAAAE,KAAK;IAAEC,YAAA,GAAAH,MAAA,CAAAG,YAAY;IAAEC,UAAA,GAAAJ,MAAA,CAAAI,UAAU;EAEpD,IAAMC,oBAAoB,GAAGF,YAAY,IAAI,EAAE;EAC/C,IAAMG,kBAAkB,GAAGF,UAAU,IAAIH,WAAW,CAACG,UAAU;EAC/D,IAAMG,WAAW,GAChB,CAACF,oBAAoB,CAACG,OAAO,KAAKC,SAAS,GACxCJ,oBAAoB,CAACG,OAAO,GAC5B,UAAU,IACbF,kBAAkB,GAClB,GAAG;EACJ,IAAMI,aAAa,GAClB,CAACL,oBAAoB,CAACM,SAAS,KAAKF,SAAS,GAC1CJ,oBAAoB,CAACM,SAAS,GAC9B,YAAY,IACfL,kBAAkB,GAClB,GAAG;EACJ,IAAMM,UAAU,GACfP,oBAAoB,CAACQ,MAAM,KAAKJ,SAAS,GACtCJ,oBAAoB,CAACQ,MAAM,GAC3B,SAAS;EAEb,QAAQX,KAAK;IACZ,KAAK,SAAS;MACb,OAAOK,WAAW;IACnB,KAAK,WAAW;MACf,OAAOG,aAAa;IACrB;MACC,OAAOE,UAAU;;AAEpB,CAAC;AAED,OAAO,IAAME,sBAAsB,GAClC,SAAAA,CAACC,GAAwB,EAAEC,GAAW;EACtC,iBAACC,IAAI,EAAEC,QAAQ;IACf,iBAAMC,IAAI;MAAA,OAAAC,SAAA;;;;;cACW,qBAAMhC,WAAW,CAACiC,GAAG,EAAE;;cAArCpB,WAAW,GAAGqB,EAAA,CAAAC,IAAA,EAAuB;cACrCC,IAAI,GAAGpC,WAAW,CAACqC,KAAK,CAACxB,WAAW,CAAC;cACrCyB,MAAM,GAAG3B,SAAS,CAAA4B,QAAA,CAAAA,QAAA,KAAMZ,GAAG;gBAAEd,WAAW,EAAEuB;cAAI,GAAG;cACjDI,WAAW,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEX,IAAI,CAACY,KAAK,CAAC;cACjD,IAAIF,MAAM,CAACG,SAAS,CAACC,cAAc,CAACC,IAAI,CAACf,IAAI,CAACY,KAAK,EAAE,KAAK,CAAC,EAAE;gBAC5DH,WAAW,CAACO,GAAG,GAAGT,MAAM,GAAGV,GAAG;gBAC9BG,IAAI,CAACY,KAAK,GAAGH,WAAW;eACxB,MAAM,IAAIC,MAAM,CAACG,SAAS,CAACC,cAAc,CAACC,IAAI,CAACf,IAAI,CAACY,KAAK,EAAE,QAAQ,CAAC,EAAE;gBACtEH,WAAW,CAACQ,MAAM,GAAGV,MAAM,GAAGV,GAAG;gBACjCG,IAAI,CAACY,KAAK,GAAGH,WAAW;;cAEnBS,MAAM,GAAGpB,IAAI,CAACE,IAAI,CAAC;cACzB,sBAAOkB,MAAM;;;;KACb;EAdD,CAcC;AAfD,CAeC;AAEF,IAAMC,iBAAiB,GAAG,SAAAA,CAACC,GAAQ;EAClC,OAAAA,GAAG,CAACC,UAAU,IACd,OAAOD,GAAG,CAACE,IAAI,KAAK,QAAQ,IAC5BF,GAAG,CAACE,IAAI,KAAK,sBAAsB;AAFnC,CAEmC;AAEpC;AACA,OAAO,IAAMC,6BAA6B,GACzC,SAAAA,CAAC1C,MAAsB;EACvB,iBAACiB,IAAI,EAAEC,QAAiC;IACxC,iBAAMC,IAAI;MAAA,OAAAC,SAAA;;;;;;cAED,qBAAMH,IAAI,CAACE,IAAI,CAAC;;cAAvB,sBAAOG,EAAA,CAAAC,IAAA,EAAgB;;;cAEvB,IAAIe,iBAAiB,CAACK,KAAG,CAAC,EAAE;gBACrBC,UAAU,GAAG,IAAIC,IAAI,CAACF,KAAG,CAACH,UAAU,CAAC;gBAC3CxC,MAAM,CAAC8C,iBAAiB,GAAGF,UAAU,CAACG,OAAO,EAAE,GAAGF,IAAI,CAACG,GAAG,EAAE;;cAE7D,MAAML,KAAG;;;;;;KAEV;EAVD,CAUC;AAXD,CAWC;;AAEF,OAAO,IAAMM,oCAAoC,GAChD;EACCC,IAAI,EAAE,iBAAiB;EACvBC,IAAI,EAAE;CACN;AAEF,OAAO,IAAMC,uBAAuB,GAA6B;EAChEF,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE;CACN;AAED,OAAO,IAAME,mBAAmB,GAAG,SAAAA,CAAA;EAAA,OAAAjC,SAAA;;;;;;UAEb,qBAAMhC,WAAW,CAACiC,GAAG,EAAE;;UAArCpB,WAAW,GAAGqB,EAAA,CAAAC,IAAA,EAAuB;UAC3C,IAAI,CAACtB,WAAW,EAAE,sBAAOL,YAAY;UAC/B4B,IAAI,GAAGpC,WAAW,CAACqC,KAAK,CAACxB,WAAW,CAAC;UAC3CN,MAAM,CAAC2D,KAAK,CAAC,sCAAsC,EAAE9B,IAAI,CAAC;UAC1D,sBAAOA,IAAI;;;UAEX7B,MAAM,CAAC4D,IAAI,CAAC,4BAA4B,EAAEC,OAAK,CAAC;UAChD,sBAAO5D,YAAY;;;;;;CAEpB;;AAED,OAAO,IAAM6D,cAAc,GAAG,SAAAA,CAC7BzD,MAKC,EACD0D,OAA6B;EAG5B,IAAAC,MAAA,GAAA3D,MAAA,CAAA2D,MAAM;IACNC,iBAAA,GAAA5D,MAAA,CAAA4D,iBAAiB;IACjBC,0CAAA,GAAA7D,MAAA,CAAA6D,0CAA0C;IAC1CC,qBAAA,GAAA9D,MAAA,CAAA8D,qBAAqB;EAEtB,IAAIC,kBAAkB,GAAG,EAAE;EAE3B,IAAIF,0CAA0C,EAAE;IAC/CE,kBAAkB,GAAG;MACpBC,QAAQ,EAAEvE,2BAA2B;MACrCwE,GAAG,EAAE,KAAK;MACVC,cAAc,EAAE,KAAK;MACrBC,cAAc,EAAE;KAChB;;EAGF,IAAMC,QAAQ,GAAG,IAAI7E,QAAQ,CAAAoC,QAAA,CAAAA,QAAA;IAC5BgC,MAAM,EAAAA,MAAA;IACN;IACA;IACA1D,WAAW,EAAEoD,mBAAmB;IAChCgB,eAAe,EAAE/E,mBAAmB;EAAE,GACnCyE,kBAAkB;IACrBO,cAAc,EAAE,IAAI9E,gBAAgB,CAAC,EAAE,EAAEkE,OAAO,EAAEE,iBAAiB,CAAC;IACpEE,qBAAqB,EAAAA;EAAA,GACpB;EACFM,QAAQ,CAACG,eAAe,CAACC,MAAM,CAAC9E,yBAAyB,CAAC;EAC1D,OAAO0E,QAAQ;AAChB,CAAC;AAED,IAAMK,EAAE,GAAG,IAAI,GAAG,IAAI;AACtB,IAAMC,EAAE,GAAG,IAAI,GAAGD,EAAE;AACpB,IAAME,EAAE,GAAG,IAAI,GAAGD,EAAE;AAEpB,OAAO,IAAME,iBAAiB,GAAG,CAAC,GAAGH,EAAE;AACvC,OAAO,IAAMI,eAAe,GAAG,CAAC,GAAGF,EAAE;AACrC,OAAO,IAAMG,eAAe,GAAG,KAAK;AACpC,OAAO,IAAMC,kBAAkB,GAAG,CAAC;AAEnC,OAAO,IAAMC,iBAAiB,GAAG,SAAAA,CAACC,SAAiB;EAClD,IAAIC,QAAQ,GAAGN,iBAAiB;EAChC,IAAIO,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACJ,SAAS,GAAGC,QAAQ,CAAC;EAChD,OAAOC,UAAU,GAAGL,eAAe,EAAE;IACpCI,QAAQ,IAAI,CAAC;IACbC,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACJ,SAAS,GAAGC,QAAQ,CAAC;;EAE7C,OAAOA,QAAQ;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}