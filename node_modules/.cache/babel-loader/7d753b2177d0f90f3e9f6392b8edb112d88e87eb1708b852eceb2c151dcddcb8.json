{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HeadBucketCommand } from \"../commands/HeadBucketCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\nvar checkState = function (client, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var result, exception_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n          return [4 /*yield*/, client.send(new HeadBucketCommand(input))];\n        case 1:\n          result = _a.sent();\n          return [2 /*return*/, {\n            state: WaiterState.SUCCESS\n          }];\n        case 2:\n          exception_1 = _a.sent();\n          return [3 /*break*/, 3];\n        case 3:\n          return [2 /*return*/, {\n            state: WaiterState.RETRY\n          }];\n      }\n    });\n  });\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to HeadBucketCommand for polling.\n */\nexport var waitForBucketExists = function (params, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n      serviceDefaults = {\n        minDelay: 5,\n        maxDelay: 120\n      };\n      return [2 /*return*/, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n  });\n};","map":{"version":3,"names":["HeadBucketCommand","WaiterState","createWaiter","checkState","client","input","__awaiter","send","result","_a","sent","state","SUCCESS","RETRY","waitForBucketExists","params","serviceDefaults","minDelay","maxDelay","__assign"],"sources":["C:\\Users\\sinch\\node_modules\\@aws-sdk\\client-s3\\waiters\\waitForBucketExists.ts"],"sourcesContent":["import { S3Client } from \"../S3Client\";\nimport { HeadBucketCommand, HeadBucketCommandInput } from \"../commands/HeadBucketCommand\";\nimport { WaiterConfiguration, WaiterResult, WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nconst checkState = async (client: S3Client, input: HeadBucketCommandInput): Promise<WaiterResult> => {\n  try {\n    let result: any = await client.send(new HeadBucketCommand(input));\n    return { state: WaiterState.SUCCESS };\n  } catch (exception) {}\n  return { state: WaiterState.RETRY };\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to HeadBucketCommand for polling.\n */\nexport const waitForBucketExists = async (\n  params: WaiterConfiguration<S3Client>,\n  input: HeadBucketCommandInput\n): Promise<WaiterResult> => {\n  const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n  return createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n};\n"],"mappings":";AACA,SAASA,iBAAiB,QAAgC,+BAA+B;AACzF,SAA4CC,WAAW,EAAEC,YAAY,QAAQ,sBAAsB;AAEnG,IAAMC,UAAU,GAAG,SAAAA,CAAOC,MAAgB,EAAEC,KAA6B;EAAA,OAAAC,SAAA;;;;;;UAEnD,qBAAMF,MAAM,CAACG,IAAI,CAAC,IAAIP,iBAAiB,CAACK,KAAK,CAAC,CAAC;;UAA7DG,MAAM,GAAQC,EAAA,CAAAC,IAAA,EAA+C;UACjE,sBAAO;YAAEC,KAAK,EAAEV,WAAW,CAACW;UAAO,CAAE;;;;;UAEvC,sBAAO;YAAED,KAAK,EAAEV,WAAW,CAACY;UAAK,CAAE;;;;CACpC;AACD;;;;;AAKA,OAAO,IAAMC,mBAAmB,GAAG,SAAAA,CACjCC,MAAqC,EACrCV,KAA6B;EAAA,OAAAC,SAAA;;;MAEvBU,eAAe,GAAG;QAAEC,QAAQ,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAG,CAAE;MACtD,sBAAOhB,YAAY,CAAAiB,QAAA,CAAAA,QAAA,KAAMH,eAAe,GAAKD,MAAM,GAAIV,KAAK,EAAEF,UAAU,CAAC;;;CAC1E"},"metadata":{},"sourceType":"module","externalDependencies":[]}